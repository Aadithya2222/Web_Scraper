[
    {
        "title": "JavaIntroduction",
        "url": "https://www.w3schools.com/java/java_intro.asp",
        "content": "JavaIntroduction\nWhat is Java?\nJava is a popular programming language, created in 1995.\nIt is owned by Oracle, and more than3 billiondevices run Java.\nIt is used for:\nWhy Use Java?\nGet Started\nWhen you are finished with this tutorial, you will be able to write basic Java programs and create real-life examples.\nIt is not necessary to have any prior programming experience.\nVideo: Java Introduction"
    },
    {
        "title": "JavaGetting Started",
        "url": "https://www.w3schools.com/java/java_getstarted.asp",
        "content": "JavaGetting Started\nJava Install\nSome PCs might have Java already installed.\nTo check if you have Java installed on a Windows PC, search in the start bar for Java or type the following in Command Prompt (cmd.exe):\nIf Java is installed, you will see something like this (depending on version):\njava version \"22.0.0\" 2024-08-21 LTSJava(TM) SE Runtime Environment 22.9 (build 22.0.0+13-LTS)Java HotSpot(TM) 64-Bit Server VM 22.9 (build 22.0.0+13-LTS, mixed mode)\nIf you do not have Java installed on your computer, you can download it for free atoracle.com.\nNote:In this tutorial, we will write Java code in a text editor. However, it is possible to write Java in an Integrated Development Environment, such as IntelliJ IDEA, Netbeans or Eclipse, which are particularly useful when managing larger collections of Java files.\nJava Quickstart\nIn Java, every application begins with a class name, and that class must match the filename.\nLet's create our first Java file, called Main.java, which can be done in any text editor \n(like Notepad).\nThe file should contain a \"Hello World\" message, which is written with the \nfollowing code:\nMain.java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World\");\n  }\n}\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World\");\n  }\n}\nTry it Yourself »\nDon't worry if you don't understand the code above - we will discuss it in detail in later chapters. \nFor now, focus onhowto run the code above.\nSave the code in Notepad as \"Main.java\". Open Command Prompt (cmd.exe), navigate to the directory where you saved your file, and type \"javac \nMain.java\":\nThis will compile your code. If there are no errors in the code, the command prompt will take you to the next line. \nNow, type \"java Main\" to run the file:\nThe output should read:\nHello World\nCongratulations!You have written and executed your first Java program.\nW3Schools' Java Editor\nWhen learning Java at W3Schools.com, you can use our \"Try it Yourself\" tool, \nwhich shows both the code and the result. It is used to write, run, and test \ncode right in your browser:\nMain.java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World\");\n  }\n}\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World\");\n  }\n}\nTry it Yourself »\nThis editor will be used in the entire tutorial to demonstrate the different aspects of Java.\nVideo: Java Get Started"
    },
    {
        "title": "JavaSyntax",
        "url": "https://www.w3schools.com/java/java_syntax.asp",
        "content": "JavaSyntax\nJava Syntax\nIn the previous chapter, we created a Java file calledMain.java, and we used the following code to print \"Hello World\" to the screen:\nMain.java\nMain.java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World\");\n  }\n}\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World\");\n  }\n}\nTry it Yourself »\nExample explained\nEvery line of code that runs in Java must be inside aclass. \nAnd the class name should always start with \nan uppercase first letter. In our example, we named the classMain.\nclass\nNote:Java is case-sensitive: \"MyClass\" and \"myclass\" has \ndifferent meaning.\nThe name of the java filemust matchthe class name.\nWhen saving the file, save it using the class name and add \".java\" to the end of \nthe filename. To run the example above on your computer, make sure that Java is \nproperly installed: Go to theGet Started Chapterfor how to install Java. The output should be:\nHello World\nThe main Method\nThemain()method is required and you will \nsee it in every Java \nprogram:\nmain()\npublic static voidmain(String[] args)\npublic static voidmain(String[] args)\nAny code inside themain()method will be executed. \nDon't worry about the keywords before and after it. You will get to know \nthem bit by bit while reading this tutorial.\nmain()\nFor now, just remember that every Java program has aclassname which \nmust match the filename, and that every program must contain themain()method.\nclass\nmain()\nSystem.out.println()\nInside themain()method, we can use theprintln()method to print a line of text to the screen:\nmain()\nprintln()\npublic static void main(String[] args) {System.out.println(\"Hello World\");}\npublic static void main(String[] args) {System.out.println(\"Hello World\");}\nTry it Yourself »\nNote:The curly braces{}marks the beginning and the end of a block of code.\n{}\nSystemis a built-in Java class that contains useful members, such asout, \n  which is short for \"output\". Theprintln()method, short for \n  \"print line\", is used to print a value to the screen (or a file).\nSystem\nout\nprintln()\nDon't worry too much about howSystem,outandprintln()works. Just know that you need them \ntogether to print stuff to the screen.\nSystem\nout\nprintln()\nYou should also note that each code statement must end with a semicolon (;).\n;\nVideo: Java Syntax"
    },
    {
        "title": "JavaOutput / Print",
        "url": "https://www.w3schools.com/java/java_output.asp",
        "content": "JavaOutput / Print\nPrint Text\nYou learned from the previous chapter that you can use theprintln()method to output values or print text in Java:\nprintln()\nExample\nSystem.out.println(\"Hello World!\");\nSystem.out.println(\"Hello World!\");\nTry it Yourself »\nYou can add as manyprintln()methods as you want. Note that it will add a new line for each method:\nprintln()\nExample\nSystem.out.println(\"Hello World!\");\nSystem.out.println(\"I am learning Java.\");\nSystem.out.println(\"It is awesome!\");\nSystem.out.println(\"Hello World!\");\nSystem.out.println(\"I am learning Java.\");\nSystem.out.println(\"It is awesome!\");\nTry it Yourself »\nDouble Quotes\nText must be wrapped inside double quotations marks\"\".\n\"\"\nIf you forget the double quotes, an error occurs:\nExample\nSystem.out.println(\"This sentence will work!\");\nSystem.out.println(\"This sentence will work!\");\nSystem.out.println(This sentence will produce an error);\nSystem.out.println(This sentence will produce an error);\nTry it Yourself »\nThe Print() Method\nThere is also aprint()method, which is similar toprintln().\nprint()\nprintln()\nThe only difference is that it does not insert a new line at the end of the output:\nExample\nSystem.out.print(\"Hello World! \");\nSystem.out.print(\"I will print on the same line.\");\nSystem.out.print(\"Hello World! \");\nSystem.out.print(\"I will print on the same line.\");\nTry it Yourself »\nNote that we add an extra space (after \"Hello World!\" in the example above) \nfor better readability.\nIn this tutorial, we will only useprintln()as it makes the code output easier to read.\nprintln()\nVideo: Java Output / Print"
    },
    {
        "title": "JavaOutput / Print",
        "url": "https://www.w3schools.com/java/java_output.asp",
        "content": "JavaOutput / Print\nPrint Text\nYou learned from the previous chapter that you can use theprintln()method to output values or print text in Java:\nprintln()\nExample\nSystem.out.println(\"Hello World!\");\nSystem.out.println(\"Hello World!\");\nTry it Yourself »\nYou can add as manyprintln()methods as you want. Note that it will add a new line for each method:\nprintln()\nExample\nSystem.out.println(\"Hello World!\");\nSystem.out.println(\"I am learning Java.\");\nSystem.out.println(\"It is awesome!\");\nSystem.out.println(\"Hello World!\");\nSystem.out.println(\"I am learning Java.\");\nSystem.out.println(\"It is awesome!\");\nTry it Yourself »\nDouble Quotes\nText must be wrapped inside double quotations marks\"\".\n\"\"\nIf you forget the double quotes, an error occurs:\nExample\nSystem.out.println(\"This sentence will work!\");\nSystem.out.println(\"This sentence will work!\");\nSystem.out.println(This sentence will produce an error);\nSystem.out.println(This sentence will produce an error);\nTry it Yourself »\nThe Print() Method\nThere is also aprint()method, which is similar toprintln().\nprint()\nprintln()\nThe only difference is that it does not insert a new line at the end of the output:\nExample\nSystem.out.print(\"Hello World! \");\nSystem.out.print(\"I will print on the same line.\");\nSystem.out.print(\"Hello World! \");\nSystem.out.print(\"I will print on the same line.\");\nTry it Yourself »\nNote that we add an extra space (after \"Hello World!\" in the example above) \nfor better readability.\nIn this tutorial, we will only useprintln()as it makes the code output easier to read.\nprintln()\nVideo: Java Output / Print"
    },
    {
        "title": "JavaOutput Numbers",
        "url": "https://www.w3schools.com/java/java_output_numbers.asp",
        "content": "JavaOutput Numbers\nPrint Numbers\nYou can also use theprintln()method to \nprint numbers.\nprintln()\nHowever, unlike text, we don't put numbers inside double \nquotes:\nExample\nSystem.out.println(3);\nSystem.out.println(358);\nSystem.out.println(50000);\nSystem.out.println(3);\nSystem.out.println(358);\nSystem.out.println(50000);\nTry it Yourself »\nYou can also perform mathematical calculations inside theprintln()method:\nprintln()\nExample\nSystem.out.println(3 + 3);\nSystem.out.println(3 + 3);\nTry it Yourself »\nExample\nSystem.out.println(2 * 5);\nSystem.out.println(2 * 5);\nTry it Yourself »"
    },
    {
        "title": "JavaComments",
        "url": "https://www.w3schools.com/java/java_comments.asp",
        "content": "JavaComments\nJava Comments\nComments can be used to explain Java code, and to make it more readable. It can also be used to \nprevent execution when testing alternative code.\nSingle-line Comments\nSingle-line comments start with two forward slashes (//).\n//\nAny text between//and the end of the line \nis ignored by Java (will not be executed).\n//\nThis example uses a single-line comment before a line of code:\nExample\n// This is a comment\nSystem.out.println(\"Hello World\");\n// This is a comment\nSystem.out.println(\"Hello World\");\nTry it Yourself »\nThis example uses a single-line comment at the end of a line of code:\nExample\nSystem.out.println(\"Hello World\"); // This is a comment\nSystem.out.println(\"Hello World\"); // This is a comment\nTry it Yourself »\nJava Multi-line Comments\nMulti-line comments start with/*and ends with*/.\n/*\n*/\nAny text between/*and*/will be ignored by Java.\n/*\n*/\nThis example uses a multi-line comment (a comment block) to explain the code:\nExample\n/* The code below will print the words Hello World\nto the screen, and it is amazing */\nSystem.out.println(\"Hello World\");\n/* The code below will print the words Hello World\nto the screen, and it is amazing */\nSystem.out.println(\"Hello World\");\nTry it Yourself »\nIt's up to you which one you use. Normally, we use//for short comments, and/* */for longer.\n//\n/* */\nVideo: Java Comments"
    },
    {
        "title": "JavaVariables",
        "url": "https://www.w3schools.com/java/java_variables.asp",
        "content": "JavaVariables\nJava Variables\nVariables are containers for storing data values.\nIn Java, there are differenttypesof variables, for example:\nString\nint\nfloat\nchar\nboolean\nDeclaring (Creating) Variables\nTo create a variable, you must specify the type and assign it a value:\nSyntax\ntype variableName = value;\ntype variableName = value;\nWheretypeis one of Java's types (such asintorString), andvariableNameis the name of the variable (such asxorname). Theequal signis used to assign values to the variable.\nint\nString\nTo create a variable that should store text, look at the following example:\nExample\nCreate a variable callednameof typeStringand assign it the value \"John\".Then we useprintln()to print thenamevariable:\nString\nprintln()\nString name = \"John\";\nSystem.out.println(name);\nString name = \"John\";\nSystem.out.println(name);\nTry it Yourself »\nTo create a variable that should store a number, look at the following example:\nExample\nCreate a variable calledmyNumof typeintand assign it the value15:\nint\nint myNum = 15;\nSystem.out.println(myNum);\nint myNum = 15;\nSystem.out.println(myNum);\nTry it Yourself »\nYou can also declare a variable without assigning the value, and assign the value later:\nExample\nint myNum;\nmyNum = 15;\nSystem.out.println(myNum);\nint myNum;\nmyNum = 15;\nSystem.out.println(myNum);\nTry it Yourself »\nNote that if you assign a new value to an existing variable, it will overwrite the previous value:\nExample\nChange the value ofmyNumfrom15to20:\nmyNum\n15\n20\nint myNum = 15;\nmyNum = 20;  // myNum is now 20\nSystem.out.println(myNum);\nint myNum = 15;\nmyNum = 20;  // myNum is now 20\nSystem.out.println(myNum);\nTry it Yourself »\nFinal Variables\nIf you don't want others (or yourself) to overwrite existing values, use thefinalkeyword (this will declare the variable as \"final\" or \"constant\", which means unchangeable and read-only):\nfinal\nExample\nfinal int myNum = 15;\nmyNum = 20;  // will generate an error: cannot assign a value to a final variable\nfinal int myNum = 15;\nmyNum = 20;  // will generate an error: cannot assign a value to a final variable\nTry it Yourself »\nOther Types\nA demonstration of how to declare variables of other types:\nExample\nint myNum = 5;\nfloat myFloatNum = 5.99f;\nchar myLetter = 'D';\nboolean myBool = true;\nString myText = \"Hello\";\nint myNum = 5;\nfloat myFloatNum = 5.99f;\nchar myLetter = 'D';\nboolean myBool = true;\nString myText = \"Hello\";\nYou will learn more aboutdata typesin the next section.\nVideo: Java Variables"
    },
    {
        "title": "JavaVariables",
        "url": "https://www.w3schools.com/java/java_variables.asp",
        "content": "JavaVariables\nJava Variables\nVariables are containers for storing data values.\nIn Java, there are differenttypesof variables, for example:\nString\nint\nfloat\nchar\nboolean\nDeclaring (Creating) Variables\nTo create a variable, you must specify the type and assign it a value:\nSyntax\ntype variableName = value;\ntype variableName = value;\nWheretypeis one of Java's types (such asintorString), andvariableNameis the name of the variable (such asxorname). Theequal signis used to assign values to the variable.\nint\nString\nTo create a variable that should store text, look at the following example:\nExample\nCreate a variable callednameof typeStringand assign it the value \"John\".Then we useprintln()to print thenamevariable:\nString\nprintln()\nString name = \"John\";\nSystem.out.println(name);\nString name = \"John\";\nSystem.out.println(name);\nTry it Yourself »\nTo create a variable that should store a number, look at the following example:\nExample\nCreate a variable calledmyNumof typeintand assign it the value15:\nint\nint myNum = 15;\nSystem.out.println(myNum);\nint myNum = 15;\nSystem.out.println(myNum);\nTry it Yourself »\nYou can also declare a variable without assigning the value, and assign the value later:\nExample\nint myNum;\nmyNum = 15;\nSystem.out.println(myNum);\nint myNum;\nmyNum = 15;\nSystem.out.println(myNum);\nTry it Yourself »\nNote that if you assign a new value to an existing variable, it will overwrite the previous value:\nExample\nChange the value ofmyNumfrom15to20:\nmyNum\n15\n20\nint myNum = 15;\nmyNum = 20;  // myNum is now 20\nSystem.out.println(myNum);\nint myNum = 15;\nmyNum = 20;  // myNum is now 20\nSystem.out.println(myNum);\nTry it Yourself »\nFinal Variables\nIf you don't want others (or yourself) to overwrite existing values, use thefinalkeyword (this will declare the variable as \"final\" or \"constant\", which means unchangeable and read-only):\nfinal\nExample\nfinal int myNum = 15;\nmyNum = 20;  // will generate an error: cannot assign a value to a final variable\nfinal int myNum = 15;\nmyNum = 20;  // will generate an error: cannot assign a value to a final variable\nTry it Yourself »\nOther Types\nA demonstration of how to declare variables of other types:\nExample\nint myNum = 5;\nfloat myFloatNum = 5.99f;\nchar myLetter = 'D';\nboolean myBool = true;\nString myText = \"Hello\";\nint myNum = 5;\nfloat myFloatNum = 5.99f;\nchar myLetter = 'D';\nboolean myBool = true;\nString myText = \"Hello\";\nYou will learn more aboutdata typesin the next section.\nVideo: Java Variables"
    },
    {
        "title": "JavaPrint Variables",
        "url": "https://www.w3schools.com/java/java_variables_print.asp",
        "content": "JavaPrint Variables\nDisplay Variables\nTheprintln()method is often used to display variables.\nprintln()\nTo combine both text and a variable, use the+character:\n+\nExample\nString name = \"John\";\nSystem.out.println(\"Hello \" + name);\nString name = \"John\";\nSystem.out.println(\"Hello \" + name);\nTry it Yourself »\nYou can also use the+character to add a variable to another variable:\n+\nExample\nString firstName = \"John \";\nString lastName = \"Doe\";\nString fullName = firstName + lastName;\nSystem.out.println(fullName);\nString firstName = \"John \";\nString lastName = \"Doe\";\nString fullName = firstName + lastName;\nSystem.out.println(fullName);\nTry it Yourself »\nFor numeric values, the+character works as a mathematicaloperator(notice that we useint(integer) variables here):\n+\nint\nExample\nint x = 5;\nint y = 6;\nSystem.out.println(x + y); // Print the value of x + y\nint x = 5;\nint y = 6;\nSystem.out.println(x + y); // Print the value of x + y\nTry it Yourself »\nFrom the example above, you can expect:\nprintln()"
    },
    {
        "title": "JavaDeclare Multiple Variables",
        "url": "https://www.w3schools.com/java/java_variables_multiple.asp",
        "content": "JavaDeclare Multiple Variables\nDeclare Many Variables\nTo declare more than one variable of thesame type, you can \nuse a comma-separated list:\nExample\nInstead of writing:\nint x = 5;\nint y = 6;\nint z = 50;\nSystem.out.println(x + y + z);\nint x = 5;\nint y = 6;\nint z = 50;\nSystem.out.println(x + y + z);\nYou can simply write:\nint x = 5, y = 6, z = 50;\nSystem.out.println(x + y + z);\nint x = 5, y = 6, z = 50;\nSystem.out.println(x + y + z);\nTry it Yourself »\nOne Value to Multiple Variables\nYou can also assign thesame valueto multiple variables in one line:\nExample\nint x, y, z;\nx = y = z = 50;\nSystem.out.println(x + y + z);\nint x, y, z;\nx = y = z = 50;\nSystem.out.println(x + y + z);\nTry it Yourself »"
    },
    {
        "title": "JavaIdentifiers",
        "url": "https://www.w3schools.com/java/java_variables_identifiers.asp",
        "content": "JavaIdentifiers\nIdentifiers\nAll Javavariablesmust beidentifiedwithunique names.\nThese unique names are calledidentifiers.\nIdentifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume).\nNote:It is recommended to use descriptive names in order to \ncreate understandable and maintainable code:\nExample\n// Good\nint minutesPerHour = 60;\n\n// OK, but not so easy to understand whatmactually is\nint m = 60;\n// Good\nint minutesPerHour = 60;\n\n// OK, but not so easy to understand whatmactually is\nint m = 60;\nTry it Yourself »\nThe general rules for naming variables are:\nint\nboolean"
    },
    {
        "title": "JavaVariables - Examples",
        "url": "https://www.w3schools.com/java/java_variables_reallife.asp",
        "content": "JavaVariables - Examples\nReal-Life Examples\nOften in our examples, we simplify variable names to match their data type (myInt or myNum forinttypes, myChar forchartypes, and so on). This is done to avoid confusion.\nint\nchar\nHowever, for a practical example of using variables, we have created a program that stores different data about a college student:\nExample\n// Student data\nString studentName = \"John Doe\";\nint studentID = 15;\nint studentAge = 23;\nfloat studentFee = 75.25f;\nchar studentGrade = 'B';\n\n// Print variables\nSystem.out.println(\"Student name: \" + studentName);\nSystem.out.println(\"Student id: \" + studentID);\nSystem.out.println(\"Student age: \" + studentAge);\nSystem.out.println(\"Student fee: \" + studentFee);\nSystem.out.println(\"Student grade: \" + studentGrade);\n// Student data\nString studentName = \"John Doe\";\nint studentID = 15;\nint studentAge = 23;\nfloat studentFee = 75.25f;\nchar studentGrade = 'B';\n\n// Print variables\nSystem.out.println(\"Student name: \" + studentName);\nSystem.out.println(\"Student id: \" + studentID);\nSystem.out.println(\"Student age: \" + studentAge);\nSystem.out.println(\"Student fee: \" + studentFee);\nSystem.out.println(\"Student grade: \" + studentGrade);\nTry it Yourself »\nCalculate the Area of a Rectangle\nIn this real-life example, we create a program to calculate the area of a rectangle (by multiplying the length and width):\nExample\n// Create integer variables\nint length = 4;\nint width = 6;\nint area;\n\n// Calculate the area of a rectangle\narea = length * width;\n\n// Print variables\nSystem.out.println(\"Length is: \" + length);\nSystem.out.println(\"Width is: \" + width);\nSystem.out.println(\"Area of the rectangle is: \" + area);\n// Create integer variables\nint length = 4;\nint width = 6;\nint area;\n\n// Calculate the area of a rectangle\narea = length * width;\n\n// Print variables\nSystem.out.println(\"Length is: \" + length);\nSystem.out.println(\"Width is: \" + width);\nSystem.out.println(\"Area of the rectangle is: \" + area);\nTry it Yourself »"
    },
    {
        "title": "JavaData Types",
        "url": "https://www.w3schools.com/java/java_data_types.asp",
        "content": "JavaData Types\nJava Data Types\nAs explained in the previous chapter, avariablein Java must be a specified data type:\nExample\nint myNum = 5;               // Integer (whole number)\nfloat myFloatNum = 5.99f;    // Floating point number\nchar myLetter = 'D';         // Character\nboolean myBool = true;       // Boolean\nString myText = \"Hello\";     // String\nint myNum = 5;               // Integer (whole number)\nfloat myFloatNum = 5.99f;    // Floating point number\nchar myLetter = 'D';         // Character\nboolean myBool = true;       // Boolean\nString myText = \"Hello\";     // String\nTry it Yourself »\nData types are divided into two groups:\nbyte\nshort\nint\nlong\nfloat\ndouble\nboolean\nchar\nString\nPrimitive Data Types\nA primitive data type specifies the type of a variable and the kind of values it can hold.\nThere are eight primitive data types in Java:\nbyte\nshort\nint\nlong\nfloat\ndouble\nboolean\nchar\nVideo: Java Data Types"
    },
    {
        "title": "JavaData Types",
        "url": "https://www.w3schools.com/java/java_data_types.asp",
        "content": "JavaData Types\nJava Data Types\nAs explained in the previous chapter, avariablein Java must be a specified data type:\nExample\nint myNum = 5;               // Integer (whole number)\nfloat myFloatNum = 5.99f;    // Floating point number\nchar myLetter = 'D';         // Character\nboolean myBool = true;       // Boolean\nString myText = \"Hello\";     // String\nint myNum = 5;               // Integer (whole number)\nfloat myFloatNum = 5.99f;    // Floating point number\nchar myLetter = 'D';         // Character\nboolean myBool = true;       // Boolean\nString myText = \"Hello\";     // String\nTry it Yourself »\nData types are divided into two groups:\nbyte\nshort\nint\nlong\nfloat\ndouble\nboolean\nchar\nString\nPrimitive Data Types\nA primitive data type specifies the type of a variable and the kind of values it can hold.\nThere are eight primitive data types in Java:\nbyte\nshort\nint\nlong\nfloat\ndouble\nboolean\nchar\nVideo: Java Data Types"
    },
    {
        "title": "JavaNumbers",
        "url": "https://www.w3schools.com/java/java_data_types_numbers.asp",
        "content": "JavaNumbers\nNumbers\nPrimitive number types are divided into two groups:\nInteger typesstores whole numbers, positive or negative (such as 123 or -456), without decimals. \nValid types arebyte,short,intandlong. Which type you should use, depends on the numeric value.\nbyte\nshort\nint\nlong\nFloating point typesrepresents numbers with a fractional part, \ncontaining one or more decimals. There are two types:floatanddouble.\nfloat\ndouble\nEven though there are many numeric types in Java, the most used for numbers \nareint(for whole numbers) anddouble(for floating point numbers). However, we will describe them all as you continue to \nread.\nint\ndouble\nInteger Types\nByte\nThebytedata type can store whole numbers \nfrom -128 to 127. This can be used instead ofintor other integer types to \nsave memory when you are certain that the value will be within -128 and 127:\nbyte\nint\nExample\nbyte myNum = 100;\nSystem.out.println(myNum);\nbyte myNum = 100;\nSystem.out.println(myNum);\nTry it Yourself »\nShort\nTheshortdata type can store whole numbers from -32768 to 32767:\nshort\nExample\nshort myNum = 5000;\nSystem.out.println(myNum);\nshort myNum = 5000;\nSystem.out.println(myNum);\nTry it Yourself »\nInt\nTheintdata type can store whole numbers from -2147483648 to 2147483647.In general, and in our tutorial, theintdata type is \nthe preferred data type when we create variables with a numeric value.\nint\nint\nExample\nint myNum = 100000;\nSystem.out.println(myNum);\nint myNum = 100000;\nSystem.out.println(myNum);\nTry it Yourself »\nLong\nThelongdata type can store whole numbers from -9223372036854775808 to 9223372036854775807. This is used when int is not large enough to store the value. Note that you should end the value with an \"L\":\nlong\nExample\nlong myNum = 15000000000L;\nSystem.out.println(myNum);\nlong myNum = 15000000000L;\nSystem.out.println(myNum);\nTry it Yourself »\nFloating Point Types\nYou should use a floating point type whenever you need a number with a decimal, such as 9.99 or 3.14515.\nThefloatanddoubledata types can store fractional numbers. Note that you should end the value with an \"f\" for floats and \"d\" for doubles:\nfloat\ndouble\nFloat Example\nfloat myNum = 5.75f;\nSystem.out.println(myNum);\nfloat myNum = 5.75f;\nSystem.out.println(myNum);\nTry it Yourself »\nDouble Example\ndouble myNum = 19.99d;\nSystem.out.println(myNum);\ndouble myNum = 19.99d;\nSystem.out.println(myNum);\nTry it Yourself »\nUsefloatordouble?\nfloat\ndouble\nTheprecisionof a floating point value indicates how many digits the value can have \nafter the decimal point.\nThe precision offloatis only six or seven \ndecimal digits, whiledoublevariables have a \nprecision of about 16 digits. Therefore it is safer to usedoublefor most calculations.\nfloat\ndouble\ndouble\nScientific Numbers\nA floating point number can also be a scientific number with an \"e\" to indicate the power of 10:\nExample\nfloat f1 = 35e3f;\ndouble d1 = 12E4d;\nSystem.out.println(f1);\nSystem.out.println(d1);\nfloat f1 = 35e3f;\ndouble d1 = 12E4d;\nSystem.out.println(f1);\nSystem.out.println(d1);\nTry it Yourself »"
    },
    {
        "title": "JavaBoolean Data Types",
        "url": "https://www.w3schools.com/java/java_data_types_boolean.asp",
        "content": "JavaBoolean Data Types\nBoolean Types\nVery often in programming, you will need a data type that can only have one of two values, like:\nFor this, Java has abooleandata type, which can only take the valuestrueorfalse:\nboolean\ntrue\nfalse\nExample\nboolean isJavaFun = true;\nboolean isFishTasty = false;\nSystem.out.println(isJavaFun);     // Outputs true\nSystem.out.println(isFishTasty);   // Outputs false\nboolean isJavaFun = true;\nboolean isFishTasty = false;\nSystem.out.println(isJavaFun);     // Outputs true\nSystem.out.println(isFishTasty);   // Outputs false\nTry it Yourself »\nBoolean values are mostly used for conditional testing.\nYou will learn much more aboutbooleansandconditionslater in this tutorial."
    },
    {
        "title": "JavaCharacters",
        "url": "https://www.w3schools.com/java/java_data_types_characters.asp",
        "content": "JavaCharacters\nCharacters\nThechardata type is used to store asinglecharacter. The character must be \nsurrounded by single quotes, like 'A' or 'c':\nchar\nExample\nchar myGrade = 'B';\nSystem.out.println(myGrade);\nchar myGrade = 'B';\nSystem.out.println(myGrade);\nTry it Yourself »\nAlternatively, if you are familiar with ASCII values, you can use those to display certain characters:\nExample\nchar myVar1 = 65, myVar2 = 66, myVar3 = 67;\nSystem.out.println(myVar1);\nSystem.out.println(myVar2);\nSystem.out.println(myVar3);\nchar myVar1 = 65, myVar2 = 66, myVar3 = 67;\nSystem.out.println(myVar1);\nSystem.out.println(myVar2);\nSystem.out.println(myVar3);\nTry it Yourself »\nTip:A list of all ASCII values can be found in ourASCII Table Reference.\nStrings\nTheStringdata type is used to store a sequence of characters (text). String values must be surrounded by double quotes:\nString\nExample\nString greeting = \"Hello World\";\nSystem.out.println(greeting);\nString greeting = \"Hello World\";\nSystem.out.println(greeting);\nTry it Yourself »\nThe String type is so much used and integrated in Java, that some call it \"the specialninthtype\".\nA String in Java is actually anon-primitivedata type, because it refers to \nan object. The String object has methods that are used to perform certain \noperations on strings.Don't worry if you don't understand the term \"object\" just yet. We will learn more about strings and objects in a later chapter."
    },
    {
        "title": "JavaData Types Example",
        "url": "https://www.w3schools.com/java/java_data_types_reallife.asp",
        "content": "JavaData Types Example\nReal-Life Example\nHere's a real-life example of using different data types, to calculate and output the total cost of a number of items:\nExample\n// Create variables of different data types\nint items = 50;\nfloat costPerItem = 9.99f;\nfloat totalCost = items * costPerItem;\nchar currency = '$';\n\n// Print variables\nSystem.out.println(\"Number of items: \" + items);\nSystem.out.println(\"Cost per item: \" + costPerItem + currency);\nSystem.out.println(\"Total cost = \" + totalCost + currency);\n// Create variables of different data types\nint items = 50;\nfloat costPerItem = 9.99f;\nfloat totalCost = items * costPerItem;\nchar currency = '$';\n\n// Print variables\nSystem.out.println(\"Number of items: \" + items);\nSystem.out.println(\"Cost per item: \" + costPerItem + currency);\nSystem.out.println(\"Total cost = \" + totalCost + currency);\nTry it Yourself »"
    },
    {
        "title": "JavaNon-Primitive Data Types",
        "url": "https://www.w3schools.com/java/java_data_types_non-prim.asp",
        "content": "JavaNon-Primitive Data Types\nNon-Primitive Data Types\nNon-primitive data types are calledreference typesbecause \nthey refer to objects.\nThe main differences betweenprimitiveandnon-primitivedata types are:\nString\nint\nString\nnull\nExamples of non-primitive types areStrings,Arrays,Classesetc. You will learn more about these in a later chapter."
    },
    {
        "title": "JavaType Casting",
        "url": "https://www.w3schools.com/java/java_type_casting.asp",
        "content": "JavaType Casting\nJava Type Casting\nType casting is when you assign a value of one primitive data type to another type.\nIn Java, there are two types of casting:\nbyte\nshort\nchar\nint\nlong\nfloat\ndouble\ndouble\nfloat\nlong\nint\nchar\nshort\nbyte\nWidening Casting\nWidening casting is done automatically when passing a smaller size type to a \nlarger size type:\nExample\npublic class Main {\n  public static void main(String[] args) {\n    int myInt = 9;\n    double myDouble = myInt; // Automatic casting: int to double\n\n    System.out.println(myInt);      // Outputs 9\n    System.out.println(myDouble);   // Outputs 9.0\n  }\n}\npublic class Main {\n  public static void main(String[] args) {\n    int myInt = 9;\n    double myDouble = myInt; // Automatic casting: int to double\n\n    System.out.println(myInt);      // Outputs 9\n    System.out.println(myDouble);   // Outputs 9.0\n  }\n}\nTry it Yourself »\nNarrowing Casting\nNarrowing casting must be done manually by placing the type in parentheses()in front of the value:\n()\nExample\npublic class Main {\n  public static void main(String[] args) {\n    double myDouble = 9.78d;\n    int myInt = (int) myDouble; // Manual casting: double to int\n\n    System.out.println(myDouble);   // Outputs 9.78\n    System.out.println(myInt);      // Outputs 9\n  }\n}\npublic class Main {\n  public static void main(String[] args) {\n    double myDouble = 9.78d;\n    int myInt = (int) myDouble; // Manual casting: double to int\n\n    System.out.println(myDouble);   // Outputs 9.78\n    System.out.println(myInt);      // Outputs 9\n  }\n}\nTry it Yourself »\nReal-Life Example\nHere's a real-life example of type casting where we create a program to \ncalculate the percentage of a user's score in relation to the maximum score in a \ngame.\nWe use type casting to make sure that the result is afloating-pointvalue, rather than an integer:\nExample\n// Set the maximum possible score in the game to 500\nint maxScore = 500;\n\n// The actual score of the user\nint userScore = 423;\n\n/* Calculate the percentage of the user's score in relation to the maximum available score.\nConvert userScore to float to make sure that the division is accurate */\nfloat percentage = (float) userScore / maxScore * 100.0f;\n\nSystem.out.println(\"User's percentage is \" + percentage);\n// Set the maximum possible score in the game to 500\nint maxScore = 500;\n\n// The actual score of the user\nint userScore = 423;\n\n/* Calculate the percentage of the user's score in relation to the maximum available score.\nConvert userScore to float to make sure that the division is accurate */\nfloat percentage = (float) userScore / maxScore * 100.0f;\n\nSystem.out.println(\"User's percentage is \" + percentage);\nTry it Yourself »\nVideo: Java Type Casting"
    },
    {
        "title": "JavaOperators",
        "url": "https://www.w3schools.com/java/java_operators.asp",
        "content": "JavaOperators\nJava Operators\nOperators are used to perform operations on variables and values.\nIn the example below, we use the+operatorto add together two values:\n+\nExample\nint x = 100 + 50;\nint x = 100 + 50;\nTry it Yourself »\nAlthough the+operator is often used to add together two values, like in the example above, it can also be used to add together a variable and a value, or a variable and another variable:\n+\nExample\nint sum1 = 100 + 50;        // 150 (100 + 50)\nint sum2 = sum1 + 250;      // 400 (150 + 250)\nint sum3 = sum2 + sum2;     // 800 (400 + 400)\nint sum1 = 100 + 50;        // 150 (100 + 50)\nint sum2 = sum1 + 250;      // 400 (150 + 250)\nint sum3 = sum2 + sum2;     // 800 (400 + 400)\nTry it Yourself »\nJava divides the operators into the following groups:\nArithmetic Operators\nArithmetic operators are used to perform common mathematical operations.\nJava Assignment Operators\nAssignment operators are used to assign values to variables.\nIn the example below, we use theassignmentoperator (=) \nto assign the value10to a variable calledx:\n=\nExample\nint x = 10;\nint x = 10;\nTry it Yourself »\nTheaddition assignmentoperator (+=) adds a value to a variable:\n+=\nExample\nint x = 10;\nx += 5;\nint x = 10;\nx += 5;\nTry it Yourself »\nA list of all assignment operators:\nJava Comparison Operators\nComparison operators are used to compare two values (or variables). This is important in programming, because it helps us to find answers and make decisions.\nThe return value of a comparison is eithertrueorfalse. These values are known asBoolean values, and you will learn more about them in theBooleansandIf..Elsechapter.\ntrue\nfalse\nIn the following example, we use thegreater thanoperator (>) to find out if 5 is greater than 3:\n>\nExample\nint x = 5;\nint y = 3;\nSystem.out.println(x > y); // returns true, because 5 is higher than 3\nint x = 5;\nint y = 3;\nSystem.out.println(x > y); // returns true, because 5 is higher than 3\nTry it Yourself »\nJava Logical Operators\nYou can also test fortrueorfalsevalues with logical operators.\ntrue\nfalse\nLogical operators are used to determine the logic between variables or \nvalues:\nVideo: Java Operators"
    },
    {
        "title": "JavaStrings",
        "url": "https://www.w3schools.com/java/java_strings.asp",
        "content": "JavaStrings\nJava Strings\nStrings are used for storing text.\nAStringvariable contains a collection of characters surrounded by double quotes:\nString\nExample\nCreate a variable of typeStringand assign it a value:\nString\nString greeting = \"Hello\";\nString greeting = \"Hello\";\nTry it Yourself »\nString Length\nA String in Java is actually an object, which contain methods that can perform certain operations on strings. For example, the length of a string can be found with thelength()method:\nlength()\nExample\nString txt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nSystem.out.println(\"The length of the txt string is: \" + txt.length());\nString txt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nSystem.out.println(\"The length of the txt string is: \" + txt.length());\nTry it Yourself »\nMore String Methods\nThere are many string methods available, for exampletoUpperCase()andtoLowerCase():\ntoUpperCase()\ntoLowerCase()\nExample\nString txt = \"Hello World\";\nSystem.out.println(txt.toUpperCase());   // Outputs \"HELLO WORLD\"\nSystem.out.println(txt.toLowerCase());   // Outputs \"hello world\"\nString txt = \"Hello World\";\nSystem.out.println(txt.toUpperCase());   // Outputs \"HELLO WORLD\"\nSystem.out.println(txt.toLowerCase());   // Outputs \"hello world\"\nTry it Yourself »\nFinding a Character in a String\nTheindexOf()method returns theindex(the position) \nof the first occurrence of a specified text in a string \n(including whitespace):\nindexOf()\nExample\nString txt = \"Please locate where 'locate' occurs!\";\nSystem.out.println(txt.indexOf(\"locate\")); // Outputs 7\nString txt = \"Please locate where 'locate' occurs!\";\nSystem.out.println(txt.indexOf(\"locate\")); // Outputs 7\nTry it Yourself »\nJava counts positions from zero.0 is the first position in a \nstring, 1 is the second, 2 is the third ...\nComplete String Reference\nFor a complete reference of String methods, go to ourJava String Methods Reference.\nThe reference contains descriptions and examples of all string methods.\nVideo: Java Strings"
    },
    {
        "title": "JavaStrings",
        "url": "https://www.w3schools.com/java/java_strings.asp",
        "content": "JavaStrings\nJava Strings\nStrings are used for storing text.\nAStringvariable contains a collection of characters surrounded by double quotes:\nString\nExample\nCreate a variable of typeStringand assign it a value:\nString\nString greeting = \"Hello\";\nString greeting = \"Hello\";\nTry it Yourself »\nString Length\nA String in Java is actually an object, which contain methods that can perform certain operations on strings. For example, the length of a string can be found with thelength()method:\nlength()\nExample\nString txt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nSystem.out.println(\"The length of the txt string is: \" + txt.length());\nString txt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nSystem.out.println(\"The length of the txt string is: \" + txt.length());\nTry it Yourself »\nMore String Methods\nThere are many string methods available, for exampletoUpperCase()andtoLowerCase():\ntoUpperCase()\ntoLowerCase()\nExample\nString txt = \"Hello World\";\nSystem.out.println(txt.toUpperCase());   // Outputs \"HELLO WORLD\"\nSystem.out.println(txt.toLowerCase());   // Outputs \"hello world\"\nString txt = \"Hello World\";\nSystem.out.println(txt.toUpperCase());   // Outputs \"HELLO WORLD\"\nSystem.out.println(txt.toLowerCase());   // Outputs \"hello world\"\nTry it Yourself »\nFinding a Character in a String\nTheindexOf()method returns theindex(the position) \nof the first occurrence of a specified text in a string \n(including whitespace):\nindexOf()\nExample\nString txt = \"Please locate where 'locate' occurs!\";\nSystem.out.println(txt.indexOf(\"locate\")); // Outputs 7\nString txt = \"Please locate where 'locate' occurs!\";\nSystem.out.println(txt.indexOf(\"locate\")); // Outputs 7\nTry it Yourself »\nJava counts positions from zero.0 is the first position in a \nstring, 1 is the second, 2 is the third ...\nComplete String Reference\nFor a complete reference of String methods, go to ourJava String Methods Reference.\nThe reference contains descriptions and examples of all string methods.\nVideo: Java Strings"
    },
    {
        "title": "JavaString Concatenation",
        "url": "https://www.w3schools.com/java/java_strings_concat.asp",
        "content": "JavaString Concatenation\nString Concatenation\nThe+operator can be used between strings to \ncombine them. This is calledconcatenation:\n+\nExample\nString firstName = \"John\";\nString lastName = \"Doe\";\nSystem.out.println(firstName + \" \" + lastName);\nString firstName = \"John\";\nString lastName = \"Doe\";\nSystem.out.println(firstName + \" \" + lastName);\nTry it Yourself »\nNote that we have added an empty text (\" \") to create a space between firstName and lastName on print.\nYou can also use theconcat()method to concatenate two strings:\nconcat()\nExample\nString firstName = \"John \";\nString lastName = \"Doe\";\nSystem.out.println(firstName.concat(lastName));\nString firstName = \"John \";\nString lastName = \"Doe\";\nSystem.out.println(firstName.concat(lastName));\nTry it Yourself »"
    },
    {
        "title": "JavaNumbers and Strings",
        "url": "https://www.w3schools.com/java/java_strings_numbers.asp",
        "content": "JavaNumbers and Strings\nAdding Numbers and Strings\nWARNING!\nJava uses the+operator for both addition and concatenation.\n+\nNumbers are added. Strings are concatenated.\nIf you add two numbers, the result will be a number:\nExample\nint x = 10;\nint y = 20;\nint z = x + y;  // z will be 30 (an integer/number)\nint x = 10;\nint y = 20;\nint z = x + y;  // z will be 30 (an integer/number)\nTry it Yourself »\nIf you add two strings, the result will be a string concatenation:\nExample\nString x = \"10\";\nString y = \"20\";\nString z = x + y;  // z will be 1020 (a String)\nString x = \"10\";\nString y = \"20\";\nString z = x + y;  // z will be 1020 (a String)\nTry it Yourself »\nIf you add a number and a string, the result will be a string concatenation:\nExample\nString x = \"10\";\nint y = 20;\nString z = x + y;  // z will be 1020 (a String)\nString x = \"10\";\nint y = 20;\nString z = x + y;  // z will be 1020 (a String)\nTry it Yourself »"
    },
    {
        "title": "JavaSpecial Characters",
        "url": "https://www.w3schools.com/java/java_strings_specchars.asp",
        "content": "JavaSpecial Characters\nStrings - Special Characters\nBecause strings must be written within quotes, Java will misunderstand this string, \nand generate an error:\nString txt = \"We are the so-called \"Vikings\" from the north.\";\nString txt = \"We are the so-called \"Vikings\" from the north.\";\nThe solution to avoid this problem, is to use thebackslash escape character.\nThe backslash (\\) escape character turns special characters into string characters:\n\\\nThe sequence\\\"inserts a double quote in a string:ExampleString txt = \"We are the so-called \\\"Vikings\\\" from the north.\";Try it Yourself »The sequence\\'inserts a single quote in a string:ExampleString txt = \"It\\'s alright.\";Try it Yourself »The sequence\\\\inserts a single backslash in a string:ExampleString txt = \"The character \\\\ is called backslash.\";Try it Yourself »Other common escape sequences that are valid in Java are:CodeResultTry it\\nNew LineTry it »\\rCarriage ReturnTry it »\\tTabTry it »\\bBackspaceTry it »\\fForm Feed❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up\n\\\"\nExampleString txt = \"We are the so-called \\\"Vikings\\\" from the north.\";Try it Yourself »The sequence\\'inserts a single quote in a string:ExampleString txt = \"It\\'s alright.\";Try it Yourself »The sequence\\\\inserts a single backslash in a string:ExampleString txt = \"The character \\\\ is called backslash.\";Try it Yourself »Other common escape sequences that are valid in Java are:CodeResultTry it\\nNew LineTry it »\\rCarriage ReturnTry it »\\tTabTry it »\\bBackspaceTry it »\\fForm Feed❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up\nExample\nString txt = \"We are the so-called \\\"Vikings\\\" from the north.\";\nString txt = \"We are the so-called \\\"Vikings\\\" from the north.\";\nTry it Yourself »\nThe sequence\\'inserts a single quote in a string:ExampleString txt = \"It\\'s alright.\";Try it Yourself »The sequence\\\\inserts a single backslash in a string:ExampleString txt = \"The character \\\\ is called backslash.\";Try it Yourself »Other common escape sequences that are valid in Java are:CodeResultTry it\\nNew LineTry it »\\rCarriage ReturnTry it »\\tTabTry it »\\bBackspaceTry it »\\fForm Feed❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up\n\\'\nExampleString txt = \"It\\'s alright.\";Try it Yourself »The sequence\\\\inserts a single backslash in a string:ExampleString txt = \"The character \\\\ is called backslash.\";Try it Yourself »Other common escape sequences that are valid in Java are:CodeResultTry it\\nNew LineTry it »\\rCarriage ReturnTry it »\\tTabTry it »\\bBackspaceTry it »\\fForm Feed❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up\nExample\nString txt = \"It\\'s alright.\";\nString txt = \"It\\'s alright.\";\nTry it Yourself »\nThe sequence\\\\inserts a single backslash in a string:ExampleString txt = \"The character \\\\ is called backslash.\";Try it Yourself »Other common escape sequences that are valid in Java are:CodeResultTry it\\nNew LineTry it »\\rCarriage ReturnTry it »\\tTabTry it »\\bBackspaceTry it »\\fForm Feed❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up\n\\\\\nExampleString txt = \"The character \\\\ is called backslash.\";Try it Yourself »Other common escape sequences that are valid in Java are:CodeResultTry it\\nNew LineTry it »\\rCarriage ReturnTry it »\\tTabTry it »\\bBackspaceTry it »\\fForm Feed❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up\nExample\nString txt = \"The character \\\\ is called backslash.\";\nString txt = \"The character \\\\ is called backslash.\";\nTry it Yourself »\nOther common escape sequences that are valid in Java are:"
    },
    {
        "title": "JavaMath",
        "url": "https://www.w3schools.com/java/java_math.asp",
        "content": "JavaMath\nThe Java Math class has many methods that allows you to perform mathematical tasks on numbers.\nMath.max(x,y)\nTheMath.max(x,y)method can be used to find the highest value ofxandy:\nMath.max(x,y)\nExample\nMath.max(5, 10);\nMath.max(5, 10);\nTry it Yourself »\nMath.min(x,y)\nTheMath.min(x,y)method can be used to find the lowest value ofxandy:\nMath.min(x,y)\nExample\nMath.min(5, 10);\nMath.min(5, 10);\nTry it Yourself »\nMath.sqrt(x)\nTheMath.sqrt(x)method returns the square root ofx:\nMath.sqrt(x)\nExample\nMath.sqrt(64);\nMath.sqrt(64);\nTry it Yourself »\nMath.abs(x)\nTheMath.abs(x)method returns the absolute (positive) value ofx:\nMath.abs(x)\nExample\nMath.abs(-4.7);\nMath.abs(-4.7);\nTry it Yourself »\nRandom Numbers\nMath.random()returns a random number between 0.0 (inclusive), and 1.0 (exclusive):\nMath.random()\nExample\nMath.random();\nMath.random();\nTry it Yourself »\nTo get more control over the random number, for example, if you only want a random \nnumber between 0 and 100, you can use the following formula:\nExample\nint randomNum = (int)(Math.random() * 101);  // 0 to 100\nint randomNum = (int)(Math.random() * 101);  // 0 to 100\nTry it Yourself »\nComplete Math Reference\nFor a complete reference of Math methods, go to ourJava Math Methods Reference."
    },
    {
        "title": "JavaBooleans",
        "url": "https://www.w3schools.com/java/java_booleans.asp",
        "content": "JavaBooleans\nJava Booleans\nVery often, in programming, you will need a data type that can only have one of two values, like:\nFor this, Java has abooleandata type, which can storetrueorfalsevalues.\nboolean\ntrue\nfalse\nBoolean Values\nA boolean type is declared with thebooleankeyword and can only take the valuestrueorfalse:\nboolean\ntrue\nfalse\nExample\nboolean isJavaFun = true;\nboolean isFishTasty = false;\nSystem.out.println(isJavaFun);     // Outputs true\nSystem.out.println(isFishTasty);   // Outputs false\nboolean isJavaFun = true;\nboolean isFishTasty = false;\nSystem.out.println(isJavaFun);     // Outputs true\nSystem.out.println(isFishTasty);   // Outputs false\nTry it Yourself »\nHowever, it is more common to return boolean values from boolean expressions, for conditional testing\n(see below).\nBoolean Expression\nA Boolean expression returns a boolean value:trueorfalse.\ntrue\nfalse\nThis is useful to build logic, and find answers.\nFor example, you can use acomparison operator, such as thegreater than(>) operator, to find out if an expression (or a variable) is true or false:\n>\nExample\nint x = 10;\nint y = 9;\nSystem.out.println(x > y); // returns true, because 10 is higher than 9\nint x = 10;\nint y = 9;\nSystem.out.println(x > y); // returns true, because 10 is higher than 9\nTry it Yourself »\nOr even easier:\nExample\nSystem.out.println(10 > 9); // returns true, because 10 is higher than 9\nSystem.out.println(10 > 9); // returns true, because 10 is higher than 9\nTry it Yourself »\nIn the examples below, we use theequal to(==) operator to evaluate an expression:\n==\nExample\nint x = 10;\nSystem.out.println(x == 10); // returns true, because the value of x is equal to 10\nint x = 10;\nSystem.out.println(x == 10); // returns true, because the value of x is equal to 10\nTry it Yourself »\nExample\nSystem.out.println(10 == 15); // returns false, because 10 is not equal to 15\nSystem.out.println(10 == 15); // returns false, because 10 is not equal to 15\nTry it Yourself »\nReal Life Example\nLet's think of a \"real \nlife example\" where we need to find out if a person is old enough to vote.\nIn the example below, we use the>=comparison operator to find out if the age (25) isgreater thanORequal tothe voting age limit, which is set \nto18:\n>=\n25\n18\nExample\nint myAge = 25;\nint votingAge = 18;\nSystem.out.println(myAge >= votingAge);\nint myAge = 25;\nint votingAge = 18;\nSystem.out.println(myAge >= votingAge);\nTry it Yourself »\nCool, right? An even better approach (since we are on a roll now), would be to wrap the code above in anif...elsestatement, so we can perform \ndifferent actions depending on the result:\nif...else\nExample\nOutput \"Old enough to vote!\" ifmyAgeisgreater than or equal to18. Otherwise output \"Not old enough to vote.\":\nmyAge\n18\nint myAge = 25;\nint votingAge = 18;\n\nif (myAge >= votingAge) {\n  System.out.println(\"Old enough to vote!\");\n} else {\n  System.out.println(\"Not old enough to vote.\");\n}\nint myAge = 25;\nint votingAge = 18;\n\nif (myAge >= votingAge) {\n  System.out.println(\"Old enough to vote!\");\n} else {\n  System.out.println(\"Not old enough to vote.\");\n}\nTry it Yourself »\nBooleans are the basis for all Java comparisons and conditions.\nYou will learn more aboutconditions (if...else)in the next chapter.\nif...else"
    },
    {
        "title": "JavaIf ... Else",
        "url": "https://www.w3schools.com/java/java_conditions.asp",
        "content": "JavaIf ... Else\nJava Conditions and If Statements\nYou already know that Java supports the usual logical conditions from mathematics:\nYou can use these conditions to perform different actions for different decisions.\nJava has the following conditional statements:\nif\nelse\nelse if\nswitch\nThe if Statement\nUse theifstatement to specify a block of Java code to be executed if a condition istrue.\nif\ntrue\nSyntax\nif (condition) {// block of code to be executed if the condition is true}\nif (condition) {// block of code to be executed if the condition is true}\nNote thatifis in lowercase letters. Uppercase letters (If or IF) will generate an error.\nif\nIn the example below, we test two values to find out if 20 is greater than \n18. If the condition istrue, print some text:\ntrue\nExample\nif (20 > 18) {\n  System.out.println(\"20 is greater than 18\");\n}\nif (20 > 18) {\n  System.out.println(\"20 is greater than 18\");\n}\nTry it Yourself »\nWe can also test variables:\nExample\nint x = 20;\nint y = 18;\nif (x > y) {\n  System.out.println(\"x is greater than y\");\n}\nint x = 20;\nint y = 18;\nif (x > y) {\n  System.out.println(\"x is greater than y\");\n}\nTry it Yourself »\nIn the example above we use two variables,xandy, \nto test whether x is greater than y \n(using the>operator). As x is 20, and y is 18, and we know that 20 is greater than 18, we print to the screen that \"x is greater than y\".\n>"
    },
    {
        "title": "JavaIf ... Else",
        "url": "https://www.w3schools.com/java/java_conditions.asp",
        "content": "JavaIf ... Else\nJava Conditions and If Statements\nYou already know that Java supports the usual logical conditions from mathematics:\nYou can use these conditions to perform different actions for different decisions.\nJava has the following conditional statements:\nif\nelse\nelse if\nswitch\nThe if Statement\nUse theifstatement to specify a block of Java code to be executed if a condition istrue.\nif\ntrue\nSyntax\nif (condition) {// block of code to be executed if the condition is true}\nif (condition) {// block of code to be executed if the condition is true}\nNote thatifis in lowercase letters. Uppercase letters (If or IF) will generate an error.\nif\nIn the example below, we test two values to find out if 20 is greater than \n18. If the condition istrue, print some text:\ntrue\nExample\nif (20 > 18) {\n  System.out.println(\"20 is greater than 18\");\n}\nif (20 > 18) {\n  System.out.println(\"20 is greater than 18\");\n}\nTry it Yourself »\nWe can also test variables:\nExample\nint x = 20;\nint y = 18;\nif (x > y) {\n  System.out.println(\"x is greater than y\");\n}\nint x = 20;\nint y = 18;\nif (x > y) {\n  System.out.println(\"x is greater than y\");\n}\nTry it Yourself »\nIn the example above we use two variables,xandy, \nto test whether x is greater than y \n(using the>operator). As x is 20, and y is 18, and we know that 20 is greater than 18, we print to the screen that \"x is greater than y\".\n>"
    },
    {
        "title": "JavaElse",
        "url": "https://www.w3schools.com/java/java_conditions_else.asp",
        "content": "JavaElse\nThe else Statement\nUse theelsestatement to specify a block of code to be executed if the condition isfalse.\nelse\nfalse\nSyntax\nif (condition) {// block of code to be executed if the condition is true} else {// block of code to be executed if the condition is false}\nif (condition) {// block of code to be executed if the condition is true} else {// block of code to be executed if the condition is false}\nExample\nint time = 20;\nif (time < 18) {\n  System.out.println(\"Good day.\");\n} else {\n  System.out.println(\"Good evening.\");\n}\n// Outputs \"Good evening.\"\nint time = 20;\nif (time < 18) {\n  System.out.println(\"Good day.\");\n} else {\n  System.out.println(\"Good evening.\");\n}\n// Outputs \"Good evening.\"\nTry it Yourself »\nIn the example above, time (20) is greater than 18, so the condition isfalse. \nBecause of this, we move on to theelsecondition and print to the screen \"Good \nevening\". If the time was less than 18, the program would print \"Good day\".\nfalse\nelse"
    },
    {
        "title": "JavaElse If",
        "url": "https://www.w3schools.com/java/java_conditions_elseif.asp",
        "content": "JavaElse If\nThe else if Statement\nUse theelse ifstatement to specify a new condition if the first condition isfalse.\nelse if\nfalse\nSyntax\nif (condition1) {// block of code to be executed if condition1 is true} else if (condition2) {// block of code to be executed if the condition1 is false and condition2 is true} else {// block of code to be executed if the condition1 is false and condition2 is false}\nif (condition1) {// block of code to be executed if condition1 is true} else if (condition2) {// block of code to be executed if the condition1 is false and condition2 is true} else {// block of code to be executed if the condition1 is false and condition2 is false}\nExample\nint time = 22;\nif (time < 10) {\n  System.out.println(\"Good morning.\");\n} else if (time < 18) {\n  System.out.println(\"Good day.\");\n} else {\n  System.out.println(\"Good evening.\");\n}\n// Outputs \"Good evening.\"\nint time = 22;\nif (time < 10) {\n  System.out.println(\"Good morning.\");\n} else if (time < 18) {\n  System.out.println(\"Good day.\");\n} else {\n  System.out.println(\"Good evening.\");\n}\n// Outputs \"Good evening.\"\nTry it Yourself »\nIn the example above, time (22) is greater than 10, so thefirst conditionisfalse. The next condition, in theelse ifstatement, is alsofalse, so we move on to theelsecondition sincecondition1andcondition2is bothfalse- and print to the screen \"Good \nevening\".\nfalse\nelse if\nfalse\nelse\nfalse\nHowever, if the time was 14, our program would print \"Good day.\""
    },
    {
        "title": "JavaShort Hand If...Else (Ternary Operator)",
        "url": "https://www.w3schools.com/java/java_conditions_shorthand.asp",
        "content": "JavaShort Hand If...Else (Ternary Operator)\nShort Hand if...else\nThere is also a short-handif else, which is known as theternary \noperatorbecause it consists of three operands.\nIt can be used to \nreplace multiple lines of code with a single line, and is most often used to replace \nsimple if else statements:\nSyntax\nvariable= (condition) ?expressionTrue:expressionFalse;\nvariable= (condition) ?expressionTrue:expressionFalse;\nInstead of writing:\nExample\nint time = 20;\nif (time < 18) {\n  System.out.println(\"Good day.\");\n} else {\n  System.out.println(\"Good evening.\");\n}\nint time = 20;\nif (time < 18) {\n  System.out.println(\"Good day.\");\n} else {\n  System.out.println(\"Good evening.\");\n}\nTry it Yourself »\nYou can simply write:\nExample\nint time = 20;\nString result = (time < 18) ? \"Good day.\" : \"Good evening.\";\nSystem.out.println(result);\nint time = 20;\nString result = (time < 18) ? \"Good day.\" : \"Good evening.\";\nSystem.out.println(result);\nTry it Yourself »"
    },
    {
        "title": "JavaIf ... Else Examples",
        "url": "https://www.w3schools.com/java/java_conditions_reallife.asp",
        "content": "JavaIf ... Else Examples\nReal-Life Examples\nThis example shows how you can useif..elseto \"open a door\" if the user enters the correct code:\nExample\nint doorCode = 1337;\n\nif (doorCode == 1337) {\n  System.out.println(\"Correct code. The door is now open.\");\n} else {\n  System.out.println(\"Wrong code. The door remains closed.\");\n}\nint doorCode = 1337;\n\nif (doorCode == 1337) {\n  System.out.println(\"Correct code. The door is now open.\");\n} else {\n  System.out.println(\"Wrong code. The door remains closed.\");\n}\nTry it Yourself »\nThis example shows how you can useif..elseto find out if a number is positive or negative:\nExample\nint myNum = 10; // Is this a positive or negative number?\n\nif (myNum > 0) {\n  System.out.println(\"The value is a positive number.\");\n} else if (myNum < 0) {\n  System.out.println(\"The value is a negative number.\");\n} else {\n  System.out.println(\"The value is 0.\");\n}\nint myNum = 10; // Is this a positive or negative number?\n\nif (myNum > 0) {\n  System.out.println(\"The value is a positive number.\");\n} else if (myNum < 0) {\n  System.out.println(\"The value is a negative number.\");\n} else {\n  System.out.println(\"The value is 0.\");\n}\nTry it Yourself »\nFind out if a person is old enough to vote:\nExample\nint myAge = 25;\nint votingAge = 18;\n\nif (myAge >= votingAge) {\n  System.out.println(\"Old enough to vote!\");\n} else {\n  System.out.println(\"Not old enough to vote.\");\n}\nint myAge = 25;\nint votingAge = 18;\n\nif (myAge >= votingAge) {\n  System.out.println(\"Old enough to vote!\");\n} else {\n  System.out.println(\"Not old enough to vote.\");\n}\nTry it Yourself »\nFind out if a number is even or odd:\nExample\nint myNum = 5;\n\nif (myNum % 2 == 0) {\n  System.out.println(myNum + \" is even\");\n} else {\n  System.out.println(myNum + \" is odd\");\n}\nint myNum = 5;\n\nif (myNum % 2 == 0) {\n  System.out.println(myNum + \" is even\");\n} else {\n  System.out.println(myNum + \" is odd\");\n}\nTry it Yourself »"
    },
    {
        "title": "JavaSwitch",
        "url": "https://www.w3schools.com/java/java_switch.asp",
        "content": "JavaSwitch\nJava Switch Statements\nInstead of writingmanyif..elsestatements, you can use theswitchstatement.\nif..else\nswitch\nTheswitchstatement selects one of many code blocks to be executed:\nswitch\nSyntax\nswitch(expression) {\n  case x:// code blockbreak;\n  case y:// code blockbreak;\n  default:// code block}\nswitch(expression) {\n  case x:// code blockbreak;\n  case y:// code blockbreak;\n  default:// code block}\nThis is how it works:\nswitch\ncase\nbreak\ndefault\nThe example below uses the weekday number to calculate the weekday name:\nExample\nint day = 4;\nswitch (day) {\n  case 1:\n    System.out.println(\"Monday\");\n    break;\n  case 2:\n    System.out.println(\"Tuesday\");\n    break;\n  case 3:\n    System.out.println(\"Wednesday\");\n    break;\n  case 4:\n    System.out.println(\"Thursday\");\n    break;\n  case 5:\n    System.out.println(\"Friday\");\n    break;\n  case 6:\n    System.out.println(\"Saturday\");\n    break;\n  case 7:\n    System.out.println(\"Sunday\");\n    break;\n}\n// Outputs \"Thursday\" (day 4)\nint day = 4;\nswitch (day) {\n  case 1:\n    System.out.println(\"Monday\");\n    break;\n  case 2:\n    System.out.println(\"Tuesday\");\n    break;\n  case 3:\n    System.out.println(\"Wednesday\");\n    break;\n  case 4:\n    System.out.println(\"Thursday\");\n    break;\n  case 5:\n    System.out.println(\"Friday\");\n    break;\n  case 6:\n    System.out.println(\"Saturday\");\n    break;\n  case 7:\n    System.out.println(\"Sunday\");\n    break;\n}\n// Outputs \"Thursday\" (day 4)\nTry it Yourself »\nThe break Keyword\nWhen Java reaches abreakkeyword, it breaks out of the switch block.\nbreak\nThis will stop the execution of more code and case testing inside \nthe block.\nWhen a match is found, and the job is done, it's time for a break. There is no need for more testing.\nA break can save a lot of execution time because it \"ignores\" the execution \nof all the rest of the code in the switch block.\nThe default Keyword\nThedefaultkeyword specifies some code to run if there is no \ncase match:\ndefault\nExample\nint day = 4;\nswitch (day) {\n  case 6:\n    System.out.println(\"Today is Saturday\");\n    break;\n  case 7:\n    System.out.println(\"Today is Sunday\");\n    break;\n  default:\n    System.out.println(\"Looking forward to the Weekend\");\n}\n// Outputs \"Looking forward to the Weekend\"\nint day = 4;\nswitch (day) {\n  case 6:\n    System.out.println(\"Today is Saturday\");\n    break;\n  case 7:\n    System.out.println(\"Today is Sunday\");\n    break;\n  default:\n    System.out.println(\"Looking forward to the Weekend\");\n}\n// Outputs \"Looking forward to the Weekend\"\nTry it Yourself »\nNote that if thedefaultstatement is used \nas the last statement in a switch block, it does not need a break.\ndefault"
    },
    {
        "title": "JavaWhile Loop",
        "url": "https://www.w3schools.com/java/java_while_loop.asp",
        "content": "JavaWhile Loop\nLoops\nLoops can execute a block of code as long as a specified condition is reached.\nLoops are handy because they save time, reduce errors, and they make code \nmore readable.\nJava While Loop\nThewhileloop loops through a block of code as long as a specified condition istrue:\nwhile\ntrue\nSyntax\nwhile (condition) {// code block to be executed}\nwhile (condition) {// code block to be executed}\nIn the example below, the code in the loop will run, over and over again, as long as \na variable (i) is less than 5:\nExample\nint i = 0;\nwhile (i < 5) {\n  System.out.println(i);\n  i++;\n}\nint i = 0;\nwhile (i < 5) {\n  System.out.println(i);\n  i++;\n}\nTry it Yourself »\nNote:Do not forget to increase the variable used in the condition, otherwise \nthe loop will never end!"
    },
    {
        "title": "JavaWhile Loop",
        "url": "https://www.w3schools.com/java/java_while_loop.asp",
        "content": "JavaWhile Loop\nLoops\nLoops can execute a block of code as long as a specified condition is reached.\nLoops are handy because they save time, reduce errors, and they make code \nmore readable.\nJava While Loop\nThewhileloop loops through a block of code as long as a specified condition istrue:\nwhile\ntrue\nSyntax\nwhile (condition) {// code block to be executed}\nwhile (condition) {// code block to be executed}\nIn the example below, the code in the loop will run, over and over again, as long as \na variable (i) is less than 5:\nExample\nint i = 0;\nwhile (i < 5) {\n  System.out.println(i);\n  i++;\n}\nint i = 0;\nwhile (i < 5) {\n  System.out.println(i);\n  i++;\n}\nTry it Yourself »\nNote:Do not forget to increase the variable used in the condition, otherwise \nthe loop will never end!"
    },
    {
        "title": "JavaDo/While Loop",
        "url": "https://www.w3schools.com/java/java_while_loop_do.asp",
        "content": "JavaDo/While Loop\nThe Do/While Loop\nThedo/whileloop is a variant of thewhileloop. This loop will \nexecute the code block once, before checking if the condition is true, then it will\nrepeat the loop as long as the condition is true.\ndo/while\nwhile\nSyntax\ndo {// code block to be executed}\nwhile (condition);\ndo {// code block to be executed}\nwhile (condition);\nThe example below uses ado/whileloop. The loop will always be \nexecuted at least once, even if the condition is false, because the code block \nis executed before the condition is tested:\ndo/while\nExample\nint i = 0;do {\n  System.out.println(i);\n  i++;\n}\nwhile (i < 5);\nint i = 0;do {\n  System.out.println(i);\n  i++;\n}\nwhile (i < 5);\nTry it Yourself »\nDo not forget to increase the variable used in the condition, otherwise \nthe loop will never end!"
    },
    {
        "title": "JavaWhile Loop Examples",
        "url": "https://www.w3schools.com/java/java_while_loop_reallife.asp",
        "content": "JavaWhile Loop Examples\nReal-Life Examples\nTo demonstrate a practical example of thewhile loop, we have created a simple \"countdown\" program:\nExample\nint countdown = 3;\n\nwhile (countdown > 0) {\n  System.out.println(countdown);\n  countdown--;\n}\n\nSystem.out.println(\"Happy New Year!!\");\nint countdown = 3;\n\nwhile (countdown > 0) {\n  System.out.println(countdown);\n  countdown--;\n}\n\nSystem.out.println(\"Happy New Year!!\");\nTry it Yourself »\nTo demonstrate a practical example of thewhile loopcombined with anif else statement, let's say we play a game of Yatzy:\nExample\nPrint \"Yatzy!\" If the dice number is 6:\nint dice = 1;\n\nwhile (dice <= 6) {\n  if (dice < 6) {\n    System.out.println(\"No Yatzy.\");\n  } else {\n    System.out.println(\"Yatzy!\");\n  }\n  dice = dice + 1;\n}\nint dice = 1;\n\nwhile (dice <= 6) {\n  if (dice < 6) {\n    System.out.println(\"No Yatzy.\");\n  } else {\n    System.out.println(\"Yatzy!\");\n  }\n  dice = dice + 1;\n}\nTry it Yourself »\nIf the loop passes the values ranging from 1 to 5, it prints \"No Yatzy\". Whenever it passes the value 6, it prints \"Yatzy!\"."
    },
    {
        "title": "JavaFor Loop",
        "url": "https://www.w3schools.com/java/java_for_loop.asp",
        "content": "JavaFor Loop\nJava For Loop\nWhen you know exactly how many times you want to loop through a block of \ncode, use theforloop instead of awhileloop:\nfor\nwhile\nSyntax\nfor (statement 1;statement 2;statement 3) {// code block to be executed}\nfor (statement 1;statement 2;statement 3) {// code block to be executed}\nStatement 1is executed (one time) before the execution of the code block.\nStatement 2defines the condition for executing the code block.\nStatement 3is executed (every time) after the code block has been executed.\nThe example below will print the numbers 0 to 4:\nExample\nfor (int i = 0; i < 5; i++) {\n  System.out.println(i);\n}\nfor (int i = 0; i < 5; i++) {\n  System.out.println(i);\n}\nTry it Yourself »\nStatement 1 sets a variable before the loop starts (int i = 0).\nStatement 2 defines the condition for the loop to run (i must be less than \n5). If the condition is true, the loop will start over again, if it is false, \nthe loop will end.\nStatement 3 increases a value (i++) each time the code block in the loop has \nbeen executed.\nAnother Example\nThis example will only print even values between 0 and 10:\nExample\nfor (int i = 0; i <= 10; i = i + 2) {\n  System.out.println(i);\n}\nfor (int i = 0; i <= 10; i = i + 2) {\n  System.out.println(i);\n}\nTry it Yourself »"
    },
    {
        "title": "JavaFor Loop",
        "url": "https://www.w3schools.com/java/java_for_loop.asp",
        "content": "JavaFor Loop\nJava For Loop\nWhen you know exactly how many times you want to loop through a block of \ncode, use theforloop instead of awhileloop:\nfor\nwhile\nSyntax\nfor (statement 1;statement 2;statement 3) {// code block to be executed}\nfor (statement 1;statement 2;statement 3) {// code block to be executed}\nStatement 1is executed (one time) before the execution of the code block.\nStatement 2defines the condition for executing the code block.\nStatement 3is executed (every time) after the code block has been executed.\nThe example below will print the numbers 0 to 4:\nExample\nfor (int i = 0; i < 5; i++) {\n  System.out.println(i);\n}\nfor (int i = 0; i < 5; i++) {\n  System.out.println(i);\n}\nTry it Yourself »\nStatement 1 sets a variable before the loop starts (int i = 0).\nStatement 2 defines the condition for the loop to run (i must be less than \n5). If the condition is true, the loop will start over again, if it is false, \nthe loop will end.\nStatement 3 increases a value (i++) each time the code block in the loop has \nbeen executed.\nAnother Example\nThis example will only print even values between 0 and 10:\nExample\nfor (int i = 0; i <= 10; i = i + 2) {\n  System.out.println(i);\n}\nfor (int i = 0; i <= 10; i = i + 2) {\n  System.out.println(i);\n}\nTry it Yourself »"
    },
    {
        "title": "JavaNested Loops",
        "url": "https://www.w3schools.com/java/java_for_loop_nested.asp",
        "content": "JavaNested Loops\nNested Loops\nIt is also possible to place a loop inside another loop. This is called anested loop.\nThe \"inner loop\" will be executed one time for each iteration of the \"outer loop\":\nExample\n// Outer loop\nfor (int i = 1; i <= 2; i++) {\n  System.out.println(\"Outer: \" + i); // Executes 2 times\n  \n  // Inner loop\n  for (int j = 1; j <= 3; j++) {\n    System.out.println(\" Inner: \" + j); // Executes 6 times (2 * 3)\n  }\n}\n// Outer loop\nfor (int i = 1; i <= 2; i++) {\n  System.out.println(\"Outer: \" + i); // Executes 2 times\n  \n  // Inner loop\n  for (int j = 1; j <= 3; j++) {\n    System.out.println(\" Inner: \" + j); // Executes 6 times (2 * 3)\n  }\n}\nTry it Yourself »"
    },
    {
        "title": "JavaFor Each Loop",
        "url": "https://www.w3schools.com/java/java_foreach_loop.asp",
        "content": "JavaFor Each Loop\nFor-Each Loop\nThere is also a \"for-each\" loop, which is used exclusively to loop through elements in anarray(or other data sets):\nSyntax\nfor (typevariableName:arrayName) {// code block to be executed}\nfor (typevariableName:arrayName) {// code block to be executed}\nThe following example outputs all elements in thecarsarray, using a \"for-each\" loop:\nExample\nString[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\nfor (String i : cars) {\n  System.out.println(i);\n}\nString[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\nfor (String i : cars) {\n  System.out.println(i);\n}\nTry it Yourself »\nNote:Don't worry if you don't understand the example above. You will learn more about Arrays in theJava Arrays chapter."
    },
    {
        "title": "JavaFor Loop Examples",
        "url": "https://www.w3schools.com/java/java_for_loop_reallife.asp",
        "content": "JavaFor Loop Examples\nReal-Life Examples\nTo demonstrate a practical example of thefor loop, let's create a program that counts to 100 by tens:\nExample\nfor (int i = 0; i <= 100; i += 10) {\n  System.out.println(i);\n}\nfor (int i = 0; i <= 100; i += 10) {\n  System.out.println(i);\n}\nTry it Yourself »\nIn this example, we create a program that only print even values between 0 and 10:\nExample\nfor (int i = 0; i <= 10; i = i + 2) {\n  System.out.println(i);\n}\nfor (int i = 0; i <= 10; i = i + 2) {\n  System.out.println(i);\n}\nTry it Yourself »\nAnd in this example, we create a program that prints the multiplication table for a specified number:\nExample\nint number = 2;\n\n// Print the multiplication table for the number 2\nfor (int i = 1; i <= 10; i++) {\n  System.out.println(number + \" x \" + i + \" = \" + (number * i));\n}\nint number = 2;\n\n// Print the multiplication table for the number 2\nfor (int i = 1; i <= 10; i++) {\n  System.out.println(number + \" x \" + i + \" = \" + (number * i));\n}\nTry it Yourself »"
    },
    {
        "title": "JavaBreak and Continue",
        "url": "https://www.w3schools.com/java/java_break.asp",
        "content": "JavaBreak and Continue\nJava Break\nYou have already seen thebreakstatement used in an earlier chapter of this tutorial. It was used to \"jump out\" of aswitchstatement.\nbreak\nswitch\nThebreakstatement can also be used to jump out of aloop.\nbreak\nThis example stops the loop when i is equal to 4:\nExample\nfor (int i = 0; i < 10; i++) {\n  if (i == 4) {\n    break;\n  }\n  System.out.println(i);\n}\nfor (int i = 0; i < 10; i++) {\n  if (i == 4) {\n    break;\n  }\n  System.out.println(i);\n}\nTry it Yourself »\nJava Continue\nThecontinuestatement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.\ncontinue\nThis example skips the value of 4:\nExample\nfor (int i = 0; i < 10; i++) {\n  if (i == 4) {\n    continue;\n  }\n  System.out.println(i);\n}\nfor (int i = 0; i < 10; i++) {\n  if (i == 4) {\n    continue;\n  }\n  System.out.println(i);\n}\nTry it Yourself »\nBreak and Continue in While Loop\nYou can also usebreakandcontinuein while loops:\nbreak\ncontinue\nBreak Example\nint i = 0;\nwhile (i < 10) {\n  System.out.println(i);\n  i++;\n  if (i == 4) {\n    break;\n  }\n}\nint i = 0;\nwhile (i < 10) {\n  System.out.println(i);\n  i++;\n  if (i == 4) {\n    break;\n  }\n}\nTry it Yourself »\nContinue Example\nint i = 0;\nwhile (i < 10) {\n  if (i == 4) {\n    i++;\n    continue;\n  }\n  System.out.println(i);\n  i++;\n}\nint i = 0;\nwhile (i < 10) {\n  if (i == 4) {\n    i++;\n    continue;\n  }\n  System.out.println(i);\n  i++;\n}\nTry it Yourself »"
    },
    {
        "title": "JavaArrays",
        "url": "https://www.w3schools.com/java/java_arrays.asp",
        "content": "JavaArrays\nJava Arrays\nArrays are used to store multiple values in a single variable, instead of declaring separate variables for each \nvalue.\nTo declare an array, define the variable type withsquare brackets:\nString[] cars;\nString[] cars;\nWe have now declared a variable that holds an array of strings. To insert \nvalues to it, you can place the values in a \ncomma-separated list, inside curly braces:\nString[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\nString[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\nTo create an array of integers, you could write:\nint[] myNum = {10, 20, 30, 40};\nint[] myNum = {10, 20, 30, 40};\nAccess the Elements of an Array\nYou can access an array element by referring to the index number.\nThis statement accesses the value of the first element in cars:\nExample\nString[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\nSystem.out.println(cars[0]);\n// Outputs Volvo\nString[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\nSystem.out.println(cars[0]);\n// Outputs Volvo\nTry it Yourself »\nNote:Array indexes start with 0: [0] is the first element. [1] is the second \nelement, etc.\nChange an Array Element\nTo change the value of a specific element, refer to the index number:\nExample\ncars[0] = \"Opel\";\ncars[0] = \"Opel\";\nExample\nString[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\ncars[0] = \"Opel\";\nSystem.out.println(cars[0]);\n// Now outputs Opel instead of Volvo\nString[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\ncars[0] = \"Opel\";\nSystem.out.println(cars[0]);\n// Now outputs Opel instead of Volvo\nTry it Yourself »\nArray Length\nTo find out how many elements an array has, use thelengthproperty:\nlength\nExample\nString[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\nSystem.out.println(cars.length);\n// Outputs 4\nString[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\nSystem.out.println(cars.length);\n// Outputs 4\nTry it Yourself »"
    },
    {
        "title": "JavaArrays",
        "url": "https://www.w3schools.com/java/java_arrays.asp",
        "content": "JavaArrays\nJava Arrays\nArrays are used to store multiple values in a single variable, instead of declaring separate variables for each \nvalue.\nTo declare an array, define the variable type withsquare brackets:\nString[] cars;\nString[] cars;\nWe have now declared a variable that holds an array of strings. To insert \nvalues to it, you can place the values in a \ncomma-separated list, inside curly braces:\nString[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\nString[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\nTo create an array of integers, you could write:\nint[] myNum = {10, 20, 30, 40};\nint[] myNum = {10, 20, 30, 40};\nAccess the Elements of an Array\nYou can access an array element by referring to the index number.\nThis statement accesses the value of the first element in cars:\nExample\nString[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\nSystem.out.println(cars[0]);\n// Outputs Volvo\nString[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\nSystem.out.println(cars[0]);\n// Outputs Volvo\nTry it Yourself »\nNote:Array indexes start with 0: [0] is the first element. [1] is the second \nelement, etc.\nChange an Array Element\nTo change the value of a specific element, refer to the index number:\nExample\ncars[0] = \"Opel\";\ncars[0] = \"Opel\";\nExample\nString[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\ncars[0] = \"Opel\";\nSystem.out.println(cars[0]);\n// Now outputs Opel instead of Volvo\nString[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\ncars[0] = \"Opel\";\nSystem.out.println(cars[0]);\n// Now outputs Opel instead of Volvo\nTry it Yourself »\nArray Length\nTo find out how many elements an array has, use thelengthproperty:\nlength\nExample\nString[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\nSystem.out.println(cars.length);\n// Outputs 4\nString[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\nSystem.out.println(cars.length);\n// Outputs 4\nTry it Yourself »"
    },
    {
        "title": "JavaArrays Loop",
        "url": "https://www.w3schools.com/java/java_arrays_loop.asp",
        "content": "JavaArrays Loop\nLoop Through an Array\nYou can loop through the array elements with theforloop, and use thelengthproperty to specify how many times the loop should run.\nfor\nlength\nThe following example outputs all elements in thecarsarray:\nExample\nString[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\nfor (int i = 0; i < cars.length; i++) {\n  System.out.println(cars[i]);\n}\nString[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\nfor (int i = 0; i < cars.length; i++) {\n  System.out.println(cars[i]);\n}\nTry it Yourself »\nLoop Through an Array with For-Each\nThere is also a \"for-each\" loop, which is used exclusively to loop through elements in arrays:\nSyntax\nfor (typevariable:arrayname) {\n  ...\n}\nfor (typevariable:arrayname) {\n  ...\n}\nThe following example outputs all elements in thecarsarray, using a \"for-each\" loop:\nExample\nString[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\nfor (String i : cars) {\n  System.out.println(i);\n}\nString[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\nfor (String i : cars) {\n  System.out.println(i);\n}\nTry it Yourself »\nThe example above can be read like this:for eachStringelement (calledi- as inindex) incars, print out the value ofi.\nString\nIf you compare theforloop andfor-eachloop, you will see that thefor-eachmethod is easier to write, it \ndoes not require a counter (using the length property), and it is more readable.\nfor"
    },
    {
        "title": "JavaArrays - Real-Life Examples",
        "url": "https://www.w3schools.com/java/java_arrays_reallife.asp",
        "content": "JavaArrays - Real-Life Examples\nReal-Life Example\nTo demonstrate a practical example of using arrays, let's create a program that calculates the average of different ages:\nExample\n// An array storing different ages\nint ages[] = {20, 22, 18, 35, 48, 26, 87, 70};\n\nfloat avg, sum = 0;\n\n// Get the length of the array\nint length = ages.length;\n\n// Loop through the elements of the array\nfor (int age : ages) {\n  sum += age;\n}\n\n// Calculate the average by dividing the sum by the length\navg = sum / length;\n\n// Print the average\nSystem.out.println(\"The average age is: \" + avg);\n// An array storing different ages\nint ages[] = {20, 22, 18, 35, 48, 26, 87, 70};\n\nfloat avg, sum = 0;\n\n// Get the length of the array\nint length = ages.length;\n\n// Loop through the elements of the array\nfor (int age : ages) {\n  sum += age;\n}\n\n// Calculate the average by dividing the sum by the length\navg = sum / length;\n\n// Print the average\nSystem.out.println(\"The average age is: \" + avg);\nTry it Yourself »\nAnd in this example, we create a program that finds the lowest age among different ages:\nExample\n// An array storing different ages\nint ages[] = {20, 22, 18, 35, 48, 26, 87, 70};\n\n// Get the length of the array\nint length = ages.length;\n\n// Create a 'lowest age' variable and assign the first array element of ages to it\nint lowestAge = ages[0];\n\n// Loop through the elements of the ages array to find the lowest age\nfor (int age : ages) {\n  // Check if the current age is smaller than the current 'lowest age'\n  if (lowestAge > age) {\n    // If the smaller age is found, update 'lowest age' with that element\n    lowestAge = age;\n  }\n}\n\n// Output the value of the lowest age\nSystem.out.println(\"The lowest age in the array is: \" + lowestAge);\n// An array storing different ages\nint ages[] = {20, 22, 18, 35, 48, 26, 87, 70};\n\n// Get the length of the array\nint length = ages.length;\n\n// Create a 'lowest age' variable and assign the first array element of ages to it\nint lowestAge = ages[0];\n\n// Loop through the elements of the ages array to find the lowest age\nfor (int age : ages) {\n  // Check if the current age is smaller than the current 'lowest age'\n  if (lowestAge > age) {\n    // If the smaller age is found, update 'lowest age' with that element\n    lowestAge = age;\n  }\n}\n\n// Output the value of the lowest age\nSystem.out.println(\"The lowest age in the array is: \" + lowestAge);\nTry it Yourself »"
    },
    {
        "title": "JavaMulti-Dimensional Arrays",
        "url": "https://www.w3schools.com/java/java_arrays_multi.asp",
        "content": "JavaMulti-Dimensional Arrays\nMultidimensional Arrays\nA multidimensional array is an array of arrays.\nMultidimensional arrays are useful when you want to store data as a tabular form, like a table with rows and columns.\nTo create a two-dimensional array, add each array within its own set ofcurly braces:\nExample\nint[][] myNumbers = { {1, 2, 3, 4}, {5, 6, 7} };\nint[][] myNumbers = { {1, 2, 3, 4}, {5, 6, 7} };\nmyNumbersis now an array with two arrays as its elements.\nAccess Elements\nTo access the elements of themyNumbersarray, \nspecify two indexes: one for the array, and one for the element inside that array. \nThis example accesses the third element (2) in the second array (1) of \nmyNumbers:\nExample\nint[][] myNumbers = { {1, 2, 3, 4}, {5, 6, 7} };\nSystem.out.println(myNumbers[1][2]); // Outputs 7\nint[][] myNumbers = { {1, 2, 3, 4}, {5, 6, 7} };\nSystem.out.println(myNumbers[1][2]); // Outputs 7\nTry it Yourself »\nRemember that:Array indexes start with 0: [0] is the first element. [1] is the second element, etc.\nChange Element Values\nYou can also change the value of an element:\nExample\nint[][] myNumbers = { {1, 2, 3, 4}, {5, 6, 7} };\nmyNumbers[1][2] = 9;\nSystem.out.println(myNumbers[1][2]); // Outputs 9 instead of 7\nint[][] myNumbers = { {1, 2, 3, 4}, {5, 6, 7} };\nmyNumbers[1][2] = 9;\nSystem.out.println(myNumbers[1][2]); // Outputs 9 instead of 7\nTry it Yourself »\nLoop Through a Multi-Dimensional Array\nYou can also use afor loopinside anotherfor loopto get the elements of a two-dimensional array (we still have to point to the two indexes):\nfor loop\nfor loop\nExample\nint[][] myNumbers = { {1, 2, 3, 4}, {5, 6, 7} };\nfor (int i = 0; i < myNumbers.length; ++i) {\n  for (int j = 0; j < myNumbers[i].length; ++j) {\n    System.out.println(myNumbers[i][j]);\n  }}\nint[][] myNumbers = { {1, 2, 3, 4}, {5, 6, 7} };\nfor (int i = 0; i < myNumbers.length; ++i) {\n  for (int j = 0; j < myNumbers[i].length; ++j) {\n    System.out.println(myNumbers[i][j]);\n  }}\nTry it Yourself »\nOr you could just use afor-eachloop, which is considered easier \nto read and write:\nExample\nint[][] myNumbers = { {1, 2, 3, 4}, {5, 6, 7} };\nfor (int[] row : myNumbers) {\n  for (int i : row) {\n    System.out.println(i);}\n}\nint[][] myNumbers = { {1, 2, 3, 4}, {5, 6, 7} };\nfor (int[] row : myNumbers) {\n  for (int i : row) {\n    System.out.println(i);\nTry it Yourself »"
    },
    {
        "title": "JavaMethods",
        "url": "https://www.w3schools.com/java/java_methods.asp",
        "content": "JavaMethods\nAmethodis a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a method.\nMethods are used to perform certain actions, and they are also known asfunctions.\nWhy use methods? To reuse code: define the code once, and use \nit many times.\nCreate a Method\nA method must be declared within a class. It is defined \nwith the name of the method, followed by parentheses(). Java provides some pre-defined methods, such asSystem.out.println(), but you can also create your own methods to perform certain actions:\nSystem.out.println()\nExample\nCreate a method inside Main:\npublic class Main {\n  static void myMethod() {\n    // code to be executed\n  }\n}\npublic class Main {\n  static void myMethod() {\n    // code to be executed\n  }\n}\nmyMethod()\nstatic\nvoid\nCall a Method\nTo call a method in Java, write the method's name followed by two \nparentheses()and a semicolon;\nIn the following example,myMethod()is used to print a text (the action), when it is called:\nmyMethod()\nExample\nInsidemain, call themyMethod()method:\nmain\nmyMethod()\npublic class Main {\n  static void myMethod() {\n    System.out.println(\"I just got executed!\");\n  }\n\n  public static void main(String[] args) {\n    myMethod();\n  }\n}\n\n// Outputs \"I just got executed!\"\npublic class Main {\n  static void myMethod() {\n    System.out.println(\"I just got executed!\");\n  }\n\n  public static void main(String[] args) {\n    myMethod();\n  }\n}\n\n// Outputs \"I just got executed!\"\nTry it Yourself »\nA method can also be called multiple times:\nExample\npublic class Main {\n  static void myMethod() {\n    System.out.println(\"I just got executed!\");\n  }\n\n  public static void main(String[] args) {\n    myMethod();\n    myMethod();\n    myMethod();\n  }\n}\n\n// I just got executed!\n// I just got executed!\n// I just got executed!\npublic class Main {\n  static void myMethod() {\n    System.out.println(\"I just got executed!\");\n  }\n\n  public static void main(String[] args) {\n    myMethod();\n    myMethod();\n    myMethod();\n  }\n}\n\n// I just got executed!\n// I just got executed!\n// I just got executed!\nTry it Yourself »\nIn the next chapter,Method Parameters, you will learn how to pass data (parameters) into a method."
    },
    {
        "title": "JavaMethod Parameters",
        "url": "https://www.w3schools.com/java/java_methods_param.asp",
        "content": "JavaMethod Parameters\nParameters and Arguments\nInformation can be passed to methods as a parameter. Parameters act as variables inside the method.\nParameters are specified after the method name, inside the parentheses.\nYou can add as many parameters as you want, just separate them with a comma.\nThe following example has a \nmethod that takes aStringcalledfnameas parameter.\nWhen the method is called, we pass along a first name,\nwhich is used inside the method to print the full name:\nString\nExample\npublic class Main {\n  static void myMethod(String fname) {\n    System.out.println(fname + \" Refsnes\");\n  }\n\n  public static void main(String[] args) {\n    myMethod(\"Liam\");\n    myMethod(\"Jenny\");\n    myMethod(\"Anja\");\n  }\n}\n// Liam Refsnes\n// Jenny Refsnes\n// Anja Refsnes\npublic class Main {\n  static void myMethod(String fname) {\n    System.out.println(fname + \" Refsnes\");\n  }\n\n  public static void main(String[] args) {\n    myMethod(\"Liam\");\n    myMethod(\"Jenny\");\n    myMethod(\"Anja\");\n  }\n}\n// Liam Refsnes\n// Jenny Refsnes\n// Anja Refsnes\nTry it Yourself »\nWhen aparameteris passed to the method, it is called anargument. So, from the example above:fnameis aparameter, whileLiam,JennyandAnjaarearguments.\nfname\nLiam\nJenny\nAnja\nMultiple Parameters\nYou can have as many parameters as you like:\nExample\npublic class Main {\n  static void myMethod(String fname, int age) {\n    System.out.println(fname + \" is \" + age);\n  }\n\n  public static void main(String[] args) {\n    myMethod(\"Liam\", 5);\n    myMethod(\"Jenny\", 8);\n    myMethod(\"Anja\", 31);\n  }\n}\n\n// Liam is 5\n// Jenny is 8\n// Anja is 31\npublic class Main {\n  static void myMethod(String fname, int age) {\n    System.out.println(fname + \" is \" + age);\n  }\n\n  public static void main(String[] args) {\n    myMethod(\"Liam\", 5);\n    myMethod(\"Jenny\", 8);\n    myMethod(\"Anja\", 31);\n  }\n}\n\n// Liam is 5\n// Jenny is 8\n// Anja is 31\nTry it Yourself »\nNote that when you are working with multiple parameters, the method call must \nhave the same number of arguments as there are parameters, and the arguments must be passed in the same order.\nA Method with If...Else\nIt is common to useif...elsestatements inside methods:\nif...else\nExample\npublic class Main {\n\n  // Create a checkAge() method with an integer variable calledagestatic void checkAge(int age) {\n\n    // If age is less than 18, print \"access denied\"\n    if (age < 18) {\n      System.out.println(\"Access denied - You are not old enough!\");\n\n    // If age is greater than, or equal to, 18, print \"access granted\"\n    } else {\n      System.out.println(\"Access granted - You are old enough!\");\n    }\n\n  }\n\n  public static void main(String[] args) {\n    checkAge(20); // Call the checkAge method and pass along an age of 20\n  }\n}\n\n// Outputs \"Access granted - You are old enough!\"\npublic class Main {\n\n  // Create a checkAge() method with an integer variable calledagestatic void checkAge(int age) {\n\n    // If age is less than 18, print \"access denied\"\n    if (age < 18) {\n      System.out.println(\"Access denied - You are not old enough!\");\n\n    // If age is greater than, or equal to, 18, print \"access granted\"\n    } else {\n      System.out.println(\"Access granted - You are old enough!\");\n    }\n\n  }\n\n  public static void main(String[] args) {\n    checkAge(20); // Call the checkAge method and pass along an age of 20\n  }\n}\n\n// Outputs \"Access granted - You are old enough!\"\nTry it Yourself »"
    },
    {
        "title": "JavaMethod Parameters",
        "url": "https://www.w3schools.com/java/java_methods_param.asp",
        "content": "JavaMethod Parameters\nParameters and Arguments\nInformation can be passed to methods as a parameter. Parameters act as variables inside the method.\nParameters are specified after the method name, inside the parentheses.\nYou can add as many parameters as you want, just separate them with a comma.\nThe following example has a \nmethod that takes aStringcalledfnameas parameter.\nWhen the method is called, we pass along a first name,\nwhich is used inside the method to print the full name:\nString\nExample\npublic class Main {\n  static void myMethod(String fname) {\n    System.out.println(fname + \" Refsnes\");\n  }\n\n  public static void main(String[] args) {\n    myMethod(\"Liam\");\n    myMethod(\"Jenny\");\n    myMethod(\"Anja\");\n  }\n}\n// Liam Refsnes\n// Jenny Refsnes\n// Anja Refsnes\npublic class Main {\n  static void myMethod(String fname) {\n    System.out.println(fname + \" Refsnes\");\n  }\n\n  public static void main(String[] args) {\n    myMethod(\"Liam\");\n    myMethod(\"Jenny\");\n    myMethod(\"Anja\");\n  }\n}\n// Liam Refsnes\n// Jenny Refsnes\n// Anja Refsnes\nTry it Yourself »\nWhen aparameteris passed to the method, it is called anargument. So, from the example above:fnameis aparameter, whileLiam,JennyandAnjaarearguments.\nfname\nLiam\nJenny\nAnja\nMultiple Parameters\nYou can have as many parameters as you like:\nExample\npublic class Main {\n  static void myMethod(String fname, int age) {\n    System.out.println(fname + \" is \" + age);\n  }\n\n  public static void main(String[] args) {\n    myMethod(\"Liam\", 5);\n    myMethod(\"Jenny\", 8);\n    myMethod(\"Anja\", 31);\n  }\n}\n\n// Liam is 5\n// Jenny is 8\n// Anja is 31\npublic class Main {\n  static void myMethod(String fname, int age) {\n    System.out.println(fname + \" is \" + age);\n  }\n\n  public static void main(String[] args) {\n    myMethod(\"Liam\", 5);\n    myMethod(\"Jenny\", 8);\n    myMethod(\"Anja\", 31);\n  }\n}\n\n// Liam is 5\n// Jenny is 8\n// Anja is 31\nTry it Yourself »\nNote that when you are working with multiple parameters, the method call must \nhave the same number of arguments as there are parameters, and the arguments must be passed in the same order.\nA Method with If...Else\nIt is common to useif...elsestatements inside methods:\nif...else\nExample\npublic class Main {\n\n  // Create a checkAge() method with an integer variable calledagestatic void checkAge(int age) {\n\n    // If age is less than 18, print \"access denied\"\n    if (age < 18) {\n      System.out.println(\"Access denied - You are not old enough!\");\n\n    // If age is greater than, or equal to, 18, print \"access granted\"\n    } else {\n      System.out.println(\"Access granted - You are old enough!\");\n    }\n\n  }\n\n  public static void main(String[] args) {\n    checkAge(20); // Call the checkAge method and pass along an age of 20\n  }\n}\n\n// Outputs \"Access granted - You are old enough!\"\npublic class Main {\n\n  // Create a checkAge() method with an integer variable calledagestatic void checkAge(int age) {\n\n    // If age is less than 18, print \"access denied\"\n    if (age < 18) {\n      System.out.println(\"Access denied - You are not old enough!\");\n\n    // If age is greater than, or equal to, 18, print \"access granted\"\n    } else {\n      System.out.println(\"Access granted - You are old enough!\");\n    }\n\n  }\n\n  public static void main(String[] args) {\n    checkAge(20); // Call the checkAge method and pass along an age of 20\n  }\n}\n\n// Outputs \"Access granted - You are old enough!\"\nTry it Yourself »"
    },
    {
        "title": "JavaReturn",
        "url": "https://www.w3schools.com/java/java_methods_return.asp",
        "content": "JavaReturn\nReturn Values\nIn theprevious page, we used thevoidkeyword in all examples, which indicates that the method should not return a value.\nvoid\nIf you want the method to return a value, you can use a primitive data type (such asint,char, etc.) instead ofvoid, and use thereturnkeyword inside the method:\nint\nchar\nvoid\nreturn\nExample\npublic class Main {\n  staticintmyMethod(int x) {return5 + x;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(myMethod(3));\n  }\n}\n// Outputs 8 (5 + 3)\npublic class Main {\n  staticintmyMethod(int x) {return5 + x;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(myMethod(3));\n  }\n}\n// Outputs 8 (5 + 3)\nTry it Yourself »\nThis example returns the sum of a method'stwo parameters:\nExample\npublic class Main {\n  static int myMethod(int x, int y) {\n    return x + y;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(myMethod(5, 3));\n  }\n}\n// Outputs 8 (5 + 3)\npublic class Main {\n  static int myMethod(int x, int y) {\n    return x + y;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(myMethod(5, 3));\n  }\n}\n// Outputs 8 (5 + 3)\nTry it Yourself »\nYou can also store the result in a variable (recommended, as it is easier to read and maintain):\nExample\npublic class Main {\n  static int myMethod(int x, int y) {\n    return x + y;\n  }\n\n  public static void main(String[] args) {\n    int z = myMethod(5, 3);\n    System.out.println(z);\n  }\n}\n// Outputs 8 (5 + 3)\npublic class Main {\n  static int myMethod(int x, int y) {\n    return x + y;\n  }\n\n  public static void main(String[] args) {\n    int z = myMethod(5, 3);\n    System.out.println(z);\n  }\n}\n// Outputs 8 (5 + 3)\nTry it Yourself »"
    },
    {
        "title": "JavaMethod Overloading",
        "url": "https://www.w3schools.com/java/java_methods_overloading.asp",
        "content": "JavaMethod Overloading\nMethod Overloading\nWithmethod overloading, multiple methods can have the same name with different\nparameters:\nExample\nint myMethod(int x)\nfloat myMethod(float x)\ndouble myMethod(double x, double y)\nint myMethod(int x)\nfloat myMethod(float x)\ndouble myMethod(double x, double y)\nConsider the following example, which has two methods that add numbers of different type:\nExample\nstatic int plusMethodInt(int x, int y) {\n  return x + y;\n}\n\nstatic double plusMethodDouble(double x, double y) {\n  return x + y;\n}\n\npublic static void main(String[] args) {\n  int myNum1 = plusMethodInt(8, 5);\n  double myNum2 = plusMethodDouble(4.3, 6.26);\n  System.out.println(\"int: \" + myNum1);\n  System.out.println(\"double: \" + myNum2);\n}\nstatic int plusMethodInt(int x, int y) {\n  return x + y;\n}\n\nstatic double plusMethodDouble(double x, double y) {\n  return x + y;\n}\n\npublic static void main(String[] args) {\n  int myNum1 = plusMethodInt(8, 5);\n  double myNum2 = plusMethodDouble(4.3, 6.26);\n  System.out.println(\"int: \" + myNum1);\n  System.out.println(\"double: \" + myNum2);\n}\nTry it Yourself »\nInstead of defining two methods that should do the same thing, it is better to overload one.\nIn the example below, we overload theplusMethodmethod to work for bothintanddouble:\nplusMethod\nint\ndouble\nExample\nstatic int plusMethod(int x, int y) {\n  return x + y;\n}\n\nstatic double plusMethod(double x, double y) {\n  return x + y;\n}\n\npublic static void main(String[] args) {\n  int myNum1 = plusMethod(8, 5);\n  double myNum2 = plusMethod(4.3, 6.26);\n  System.out.println(\"int: \" + myNum1);\n  System.out.println(\"double: \" + myNum2);\n}\nstatic int plusMethod(int x, int y) {\n  return x + y;\n}\n\nstatic double plusMethod(double x, double y) {\n  return x + y;\n}\n\npublic static void main(String[] args) {\n  int myNum1 = plusMethod(8, 5);\n  double myNum2 = plusMethod(4.3, 6.26);\n  System.out.println(\"int: \" + myNum1);\n  System.out.println(\"double: \" + myNum2);\n}\nTry it Yourself »\nNote:Multiple methods can have the same name \n  as long as the number and/or type of parameters are different."
    },
    {
        "title": "JavaScope",
        "url": "https://www.w3schools.com/java/java_scope.asp",
        "content": "JavaScope\nJava Scope\nIn Java, variables are only accessible inside the region they are created. This is calledscope.\nMethod Scope\nVariables declared directly inside a method are available anywhere in the method following the line of code in which they were declared:\nExample\npublic class Main {\n  public static void main(String[] args) {\n\n    // Code here CANNOT use x\n\n    int x = 100;\n\n    // Code here can use x\n    System.out.println(x);}}\npublic class Main {\n  public static void main(String[] args) {\n\n    // Code here CANNOT use x\n\n    int x = 100;\n\n    // Code here can use x\n    System.out.println(x);\n\nTry it Yourself »\nBlock Scope\nA block of code refers to all of the code between curly braces{}.\n{}\nVariables\ndeclared inside blocks of code are only accessible by the code between the curly braces, which follows the line in which the variable was declared:\nExample\npublic class Main {\n  public static void main(String[] args) {\n\n    // Code here CANNOT use x\n\n    { // This is a block\n\n      // Code here CANNOT use x\n\n      int x = 100;\n\n      // Code here CAN use x\n      System.out.println(x);\n\n    } // The block ends here\n\n  // Code here CANNOT use x\n\n  }\n}\npublic class Main {\n  public static void main(String[] args) {\n\n    // Code here CANNOT use x\n\n    { // This is a block\n\n      // Code here CANNOT use x\n\n      int x = 100;\n\n      // Code here CAN use x\n      System.out.println(x);\n\n    } // The block ends here\n\n  // Code here CANNOT use x\n\n  }\n}\nTry it Yourself »\nA block of code may exist on its\nown or it can belong to anif,whileorforstatement. In the case offorstatements,\nvariables declared in the statement itself are also available inside the block's scope.\nif\nwhile\nfor\nfor"
    },
    {
        "title": "JavaRecursion",
        "url": "https://www.w3schools.com/java/java_recursion.asp",
        "content": "JavaRecursion\nJava Recursion\nRecursion is the technique of making a function call itself. This technique provides a way\nto break complicated problems down into simple problems which are easier to solve.\nRecursion may be a bit difficult to understand. The\nbest way to figure out how it works is to experiment with it.\nRecursion Example\nAdding two numbers together is easy to do, but adding a range of numbers is more\ncomplicated. In the following example, recursion is used to add a range of numbers\ntogether by breaking it down into the simple task of adding two numbers:\nExample\nUse recursion to add all of the numbers up to 10.\npublic class Main {\n  public static void main(String[] args) {\n    int result = sum(10);\n    System.out.println(result);}public static int sum(int k) {\n    if (k > 0) {\n      return k + sum(k - 1);\n    } else {\n      return 0;}}}\npublic class Main {\n  public static void main(String[] args) {\n    int result = sum(10);\n    System.out.println(result);\npublic static int sum(int k) {\n    if (k > 0) {\n      return k + sum(k - 1);\n    } else {\n      return 0;\n\n\nTry it Yourself »\nExample Explained\nWhen thesum()function is called, it adds parameterkto the sum of all numbers smaller\nthankand returns the result. When k becomes 0, the function just returns 0. When\nrunning, the program follows these steps:\nsum()\nk\nk\nSince the function does not call itself whenkis 0, the program stops there and returns the\nresult.\nk\nHalting Condition\nJust as loops can run into the problem of infinite looping, recursive functions can run into\nthe problem of infinite recursion. Infinite recursion is when the function never stops calling\nitself. Every recursive function should have a halting condition, which is the condition\nwhere the function stops calling itself. In the previous example, the halting condition is\nwhen the parameterkbecomes 0.\nk\nIt is helpful to see a variety of different examples to better understand the concept. In this\nexample, the function adds a range of numbers between a start and an end. The halting\ncondition for this recursive function is whenendis not greater thanstart:\nExample\nUse recursion to add all of the numbers between 5 to 10.\npublic class Main {\n  public static void main(String[] args) {\n    int result = sum(5, 10);\n    System.out.println(result);}public static int sum(int start, int end) {\n    if (end > start) {\n      return end + sum(start, end - 1);\n    } else {\n      return end;\n    }\n  }\n}\npublic class Main {\n  public static void main(String[] args) {\n    int result = sum(5, 10);\n    System.out.println(result);\npublic static int sum(int start, int end) {\n    if (end > start) {\n      return end + sum(start, end - 1);\n    } else {\n      return end;\n    }\n  }\n}\nTry it Yourself »\nThe developer should be very careful with recursion as it can be quite easy to slip into writing a function which never terminates, or one that uses excess amounts of memory or processor power. However, when written correctly recursion can be a very efficient and mathematically-elegant approach to programming."
    },
    {
        "title": "JavaOOP",
        "url": "https://www.w3schools.com/java/java_oop.asp",
        "content": "JavaOOP\nJava - What is OOP?\nOOP stands forObject-Oriented Programming.\nProcedural programming is about writing procedures or methods that perform \noperations on the data, while object-oriented programming is about \ncreating objects that contain both data and methods.\nObject-oriented programming has several advantages over procedural \nprogramming:\nTip:The \"Don't Repeat Yourself\" (DRY) principle is about \nreducing the repetition of code. You should extract out the codes that are \ncommon for the application, and place them at a single place and reuse them \ninstead of repeating it.\nJava - What are Classes and Objects?\nClasses and objects are the two main aspects of object-oriented programming.\nLook at the following illustration to see the difference between class and \nobjects:\nclass\nFruit\nobjects\nApple\nBanana\nMango\nAnother example:\nclass\nCar\nobjects\nVolvo\nAudi\nToyota\nSo, a class is a template for objects, and an object is an instance of a class.\nWhen the individual objects are created, they inherit all the \nvariables and methods from the class.\nYou will learn much more aboutclasses and objectsin the next chapter."
    },
    {
        "title": "JavaClasses and Objects",
        "url": "https://www.w3schools.com/java/java_classes.asp",
        "content": "JavaClasses and Objects\nJava Classes/Objects\nJava is an object-oriented programming language.\nEverything in Java is associated with classes and objects, along with its attributes and \nmethods. For example: in real life, a car is an object. The car hasattributes, such as weight and color, andmethods, such as drive and brake.\nA Class is like an object constructor, or a \"blueprint\" for creating objects.\nCreate a Class\nTo create a class, use the keywordclass:\nclass\nMain.java\nCreate a class named \"Main\" with a \nvariable x:\nMain\npublic class Main {\n  int x = 5;\n}\npublic class Main {\n  int x = 5;\n}\nRemember from theJava Syntax chapterthat a class should always start with an uppercase first letter, and that the name of the java file should match the class name.\nCreate an Object\nIn Java, an object is created from a class. We have already created the class namedMain, \nso now we can use this to create objects.\nMain\nTo create an object ofMain, \nspecify the class name, followed by the object name, and use the keywordnew:\nMain\nnew\nExample\nCreate an object called \"myObj\" and print the value of x:\nmyObj\npublic class Main {\n  int x = 5;\n\n  public static void main(String[] args) {\n    MainmyObj= new Main();\n    System.out.println(myObj.x);\n  }\n}\npublic class Main {\n  int x = 5;\n\n  public static void main(String[] args) {\n    MainmyObj= new Main();\n    System.out.println(myObj.x);\n  }\n}\nTry it Yourself »\nMultiple Objects\nYou can create multiple objects of one class:\nExample\nCreate two objects ofMain:\nMain\npublic class Main {\n  int x = 5;\n\n  public static void main(String[] args) {\n    MainmyObj1= new Main();  // Object 1\n    MainmyObj2= new Main();  // Object 2\n    System.out.println(myObj1.x);\n    System.out.println(myObj2.x);\n  }\n}\npublic class Main {\n  int x = 5;\n\n  public static void main(String[] args) {\n    MainmyObj1= new Main();  // Object 1\n    MainmyObj2= new Main();  // Object 2\n    System.out.println(myObj1.x);\n    System.out.println(myObj2.x);\n  }\n}\nTry it Yourself »\nUsing Multiple Classes\nYou can also create an object of a class and access it in another class. This \nis often used for better organization of classes (one class has all the \nattributes and methods, while the other class holds themain()method (code to \nbe executed)).\nmain()\nRemember that the name of the java file should match the class name. In this \nexample, we have created two files in the same directory/folder:\npublic class Main {\n  int x = 5;\n}\npublic class Main {\n  int x = 5;\n}\nclass Second {\n  public static void main(String[] args) {\n    MainmyObj= new Main();\n    System.out.println(myObj.x);\n  }\n}\nclass Second {\n  public static void main(String[] args) {\n    MainmyObj= new Main();\n    System.out.println(myObj.x);\n  }\n}\nWhen both files have been compiled:\nRun the Second.java file:\nAnd the output will be:\n5\nYou will learn much more about classes and objects in the next chapters."
    },
    {
        "title": "JavaClass Attributes",
        "url": "https://www.w3schools.com/java/java_class_attributes.asp",
        "content": "JavaClass Attributes\nJava Class Attributes\nIn the previous chapter, we used the term \"variable\" forxin the example (as shown below). It is actually anattributeof the class. Or you could say that class attributes are variables within a class:\nx\nExample\nCreate a class called \"Main\" with two attributes:xandy:\nMain\nx\ny\npublic class Main {\n  int x = 5;\n  int y = 3;\n}\npublic class Main {\n  int x = 5;\n  int y = 3;\n}\nAnother term for class attributes isfields.\nAccessing Attributes\nYou can access attributes by creating an object of the class, and by using the dot syntax (.):\n.\nThe following example will create an object of theMainclass, with the \nnamemyObj. We use thexattribute on the object to print its value:\nMain\nmyObj\nx\nExample\nCreate an object called \"myObj\" and print the value ofx:\nmyObj\nx\npublic class Main {\n  int x = 5;\n\n  public static void main(String[] args) {\n    Main myObj = new Main();\n    System.out.println(myObj.x);\n  }\n}\npublic class Main {\n  int x = 5;\n\n  public static void main(String[] args) {\n    Main myObj = new Main();\n    System.out.println(myObj.x);\n  }\n}\nTry it Yourself »\nModify Attributes\nYou can also modify attribute values:\nExample\nSet the value ofxto 40:\nx\npublic class Main {\n  int x;\n\n  public static void main(String[] args) {\n    Main myObj = new Main();\n    myObj.x = 40;\n    System.out.println(myObj.x);\n  }\n}\npublic class Main {\n  int x;\n\n  public static void main(String[] args) {\n    Main myObj = new Main();\n    myObj.x = 40;\n    System.out.println(myObj.x);\n  }\n}\nTry it Yourself »\nOr override existing values:\nExample\nChange the value ofxto 25:\nx\npublic class Main {\n  int x = 10;\n\n  public static void main(String[] args) {\n    Main myObj = new Main();\n    myObj.x = 25; // x is now 25\n    System.out.println(myObj.x);\n  }\n}\npublic class Main {\n  int x = 10;\n\n  public static void main(String[] args) {\n    Main myObj = new Main();\n    myObj.x = 25; // x is now 25\n    System.out.println(myObj.x);\n  }\n}\nTry it Yourself »\nIf you don't want the ability to override existing values, declare the attribute asfinal:\nfinal\nExample\npublic class Main {finalint x = 10;\n\n  public static void main(String[] args) {\n    Main myObj = new Main();\n    myObj.x = 25; // will generate an error: cannot assign a value to afinalvariable\n    System.out.println(myObj.x);\n  }\n}\npublic class Main {finalint x = 10;\n\n  public static void main(String[] args) {\n    Main myObj = new Main();\n    myObj.x = 25; // will generate an error: cannot assign a value to afinalvariable\n    System.out.println(myObj.x);\n  }\n}\nTry it Yourself »\nThefinalkeyword is useful when you want a variable to always store the same value, like PI (3.14159...).\nfinal\nThefinalkeyword is called a \"modifier\". You will learn more about these in theJava Modifiers Chapter.\nfinal\nMultiple Objects\nIf you create multiple objects of one class, you can change the attribute values in one object, without affecting the attribute values in the other:\nExample\nChange the value ofxto 25 inmyObj2, and leavexinmyObj1unchanged:\nx\nmyObj2\nx\nmyObj1\npublic class Main {\n  int x = 5;\n\n  public static void main(String[] args) {\n    Main myObj1 = new Main();  // Object 1\n    Main myObj2 = new Main();  // Object 2\n    myObj2.x = 25;\n    System.out.println(myObj1.x);  // Outputs 5\n    System.out.println(myObj2.x);  // Outputs 25\n  }\n}\npublic class Main {\n  int x = 5;\n\n  public static void main(String[] args) {\n    Main myObj1 = new Main();  // Object 1\n    Main myObj2 = new Main();  // Object 2\n    myObj2.x = 25;\n    System.out.println(myObj1.x);  // Outputs 5\n    System.out.println(myObj2.x);  // Outputs 25\n  }\n}\nTry it Yourself »\nMultiple Attributes\nYou can specify as many attributes as you want:\nExample\npublic class Main {\n  String fname = \"John\";\n  String lname = \"Doe\";\n  int age = 24;\n\n  public static void main(String[] args) {\n    Main myObj = new Main();\n    System.out.println(\"Name: \" + myObj.fname + \" \" + myObj.lname);\n    System.out.println(\"Age: \" + myObj.age);\n  }\n}\npublic class Main {\n  String fname = \"John\";\n  String lname = \"Doe\";\n  int age = 24;\n\n  public static void main(String[] args) {\n    Main myObj = new Main();\n    System.out.println(\"Name: \" + myObj.fname + \" \" + myObj.lname);\n    System.out.println(\"Age: \" + myObj.age);\n  }\n}\nTry it Yourself »\nThe next chapter will teach you how to create class methods and how to access them with objects."
    },
    {
        "title": "JavaClass Methods",
        "url": "https://www.w3schools.com/java/java_class_methods.asp",
        "content": "JavaClass Methods\nJava Class Methods\nYou learned from theJava Methodschapter that methods are declared within a \nclass, and that they are used to perform certain actions:\nExample\nCreate a \nmethod namedmyMethod()in Main:\nmyMethod()\npublic class Main {\n  static void myMethod() {\n    System.out.println(\"Hello World!\");\n  }\n}\npublic class Main {\n  static void myMethod() {\n    System.out.println(\"Hello World!\");\n  }\n}\nmyMethod()prints a text (the action), when it iscalled. To \ncall a method, write the method's name followed by two parentheses()and a semicolon;\nmyMethod()\nExample\nInsidemain, callmyMethod():\nmain\nmyMethod()\npublic class Main {\n  static void myMethod() {\n    System.out.println(\"Hello World!\");\n  }\n\n  public static void main(String[] args) {\n    myMethod();\n  }\n}\n\n// Outputs \"Hello World!\"\npublic class Main {\n  static void myMethod() {\n    System.out.println(\"Hello World!\");\n  }\n\n  public static void main(String[] args) {\n    myMethod();\n  }\n}\n\n// Outputs \"Hello World!\"\nTry it Yourself »\nStatic vs. Public\nYou will often see Java programs that have eitherstaticorpublicattributes and methods.\nstatic\npublic\nIn the example above, we created astaticmethod, which means that it can be accessed without creating an object of the class, \nunlikepublic, which can only be accessed by \nobjects:\nstatic\npublic\nExample\nAn example to demonstrate the differences betweenstaticandpublicmethods:\nstatic\npublic\npublic class Main {\n  // Static method\n  static void myStaticMethod() {\n    System.out.println(\"Static methods can be called without creating objects\");\n  }\n\n  // Public method\n  public void myPublicMethod() {\n    System.out.println(\"Public methods must be called by creating objects\");\n  }\n\n  // Main method\n  public static void main(String[] args) {\n    myStaticMethod(); // Call the static method\n    // myPublicMethod(); This would compile an error\n\n    Main myObj = new Main(); // Create an object of Main\n    myObj.myPublicMethod(); // Call the public method on the object\n  }\n}\npublic class Main {\n  // Static method\n  static void myStaticMethod() {\n    System.out.println(\"Static methods can be called without creating objects\");\n  }\n\n  // Public method\n  public void myPublicMethod() {\n    System.out.println(\"Public methods must be called by creating objects\");\n  }\n\n  // Main method\n  public static void main(String[] args) {\n    myStaticMethod(); // Call the static method\n    // myPublicMethod(); This would compile an error\n\n    Main myObj = new Main(); // Create an object of Main\n    myObj.myPublicMethod(); // Call the public method on the object\n  }\n}\nTry it Yourself »\nNote:You will learn more about these keywords (called modifiers) in theJava Modifierschapter.\nAccess Methods With an Object\nExample\nCreate a Car object namedmyCar. Call thefullThrottle()andspeed()methods on themyCarobject, and run the program:\nmyCar\nfullThrottle()\nspeed()\nmyCar\n// Create a Main class\npublic class Main {\n \n  // Create a fullThrottle() method\n  public void fullThrottle() {\n    System.out.println(\"The car is going as fast as it can!\");\n  }\n\n  // Create a speed() method and add a parameter\n  public void speed(int maxSpeed) {\n    System.out.println(\"Max speed is: \" + maxSpeed);\n  }\n\n  // Inside main, call the methods on the myCar object\n  public static void main(String[] args) {\n    Main myCar = new Main();   // Create a myCar object\n    myCar.fullThrottle();      // Call the fullThrottle() method\n    myCar.speed(200);          // Call the speed() method\n  }\n}\n\n// The car is going as fast as it can!\n// Max speed is: 200\n// Create a Main class\npublic class Main {\n \n  // Create a fullThrottle() method\n  public void fullThrottle() {\n    System.out.println(\"The car is going as fast as it can!\");\n  }\n\n  // Create a speed() method and add a parameter\n  public void speed(int maxSpeed) {\n    System.out.println(\"Max speed is: \" + maxSpeed);\n  }\n\n  // Inside main, call the methods on the myCar object\n  public static void main(String[] args) {\n    Main myCar = new Main();   // Create a myCar object\n    myCar.fullThrottle();      // Call the fullThrottle() method\n    myCar.speed(200);          // Call the speed() method\n  }\n}\n\n// The car is going as fast as it can!\n// Max speed is: 200\nTry it Yourself »\nExample explained\n1) We created a customMainclass with theclasskeyword.\nMain\nclass\n2) We created thefullThrottle()andspeed()methods in theMainclass.\nfullThrottle()\nspeed()\nMain\n3) ThefullThrottle()method and thespeed()method will print out some text, when they are called.\nfullThrottle()\nspeed()\n4) Thespeed()method accepts anintparameter calledmaxSpeed- we \nwill use this in8).\nspeed()\nint\nmaxSpeed\n5) In order to use theMainclass and its \nmethods, we need to create anobjectof theMainClass.\nMain\nMain\n6) Then, go to themain()method, which you know by now is a built-in \nJava method that runs your program (any code inside main is executed).\nmain()\n7) By using thenewkeyword we created an object with the namemyCar.\nnew\nmyCar\n8) Then, we call thefullThrottle()andspeed()methods on themyCarobject, and run the program using the name of the object (myCar), followed by a dot (.), followed by the name of the method (fullThrottle();andspeed(200);). \nNotice that we add anintparameter of200inside thespeed()method.\nfullThrottle()\nspeed()\nmyCar\nmyCar\n.\nfullThrottle();\nspeed(200);\nint\nspeed()\nRemember that..\nThe dot (.) is used to access the object's attributes and methods.\n.\nTo call a method in Java, write the method name followed by a set of parentheses(), followed by a semicolon (;).\n;\nA class must have a matching filename (MainandMain.java).\nMain\nUsing Multiple Classes\nLike we specified in theClasses chapter, it is \na good practice to create an object of a class and access it in another class.\nRemember that the name of the java file should match the class name. In this \nexample, we have created two files in the same directory:\npublic class Main {\n  public void fullThrottle() {\n    System.out.println(\"The car is going as fast as it can!\");\n  }\n\n  public void speed(int maxSpeed) {\n    System.out.println(\"Max speed is: \" + maxSpeed);\n  }\n}\npublic class Main {\n  public void fullThrottle() {\n    System.out.println(\"The car is going as fast as it can!\");\n  }\n\n  public void speed(int maxSpeed) {\n    System.out.println(\"Max speed is: \" + maxSpeed);\n  }\n}\nclass Second {\n  public static void main(String[] args) {\n    Main myCar = new Main();     // Create a myCar object\n    myCar.fullThrottle();      // Call the fullThrottle() method\n    myCar.speed(200);          // Call the speed() method\n  }\n}\nclass Second {\n  public static void main(String[] args) {\n    Main myCar = new Main();     // Create a myCar object\n    myCar.fullThrottle();      // Call the fullThrottle() method\n    myCar.speed(200);          // Call the speed() method\n  }\n}\nWhen both files have been compiled:\nRun the Second.java file:\nAnd the output will be:\nThe car is going as fast as it can!Max speed is: 200"
    },
    {
        "title": "JavaConstructors",
        "url": "https://www.w3schools.com/java/java_constructors.asp",
        "content": "JavaConstructors\nJava Constructors\nA constructor in Java is aspecial methodthat is used to initialize objects. \nThe constructor is called when an object of a class is created. It can be used to \nset initial values for object attributes:\nExample\nCreate a constructor:\n// Create a Main class\npublic class Main {\n  int x;  // Create a class attribute\n\n  // Create aclass constructorfor the Main class\n  public Main() {\n    x = 5;  // Set the initial value for the class attribute x\n  }\n\n  public static void main(String[] args) {\n    Main myObj = new Main(); // Create an object of class Main (This willcall the constructor)\n    System.out.println(myObj.x); // Print the value of x\n  }\n}\n\n// Outputs 5\n// Create a Main class\npublic class Main {\n  int x;  // Create a class attribute\n\n  // Create aclass constructorfor the Main class\n  public Main() {\n    x = 5;  // Set the initial value for the class attribute x\n  }\n\n  public static void main(String[] args) {\n    Main myObj = new Main(); // Create an object of class Main (This willcall the constructor)\n    System.out.println(myObj.x); // Print the value of x\n  }\n}\n\n// Outputs 5\nTry it Yourself »\nNote that the constructor name mustmatch the class name, and it cannot have areturn type(likevoid).\nvoid\nAlso note that the constructor is called when the object is created.\nAll classes have constructors by default: if you do not create a class constructor \nyourself, Java creates one for you. However, then you are not able to set initial values for object attributes.\nConstructor Parameters\nConstructors can also take parameters, which is used to initialize \nattributes.\nThe following example adds anint yparameter \nto the constructor. \nInside the constructor we set x to y (x=y). When we call \nthe constructor, we pass a parameter to the constructor (5), which will set the value of \nx to 5:\nint y\nExample\npublic class Main {\n  int x;\n\n  public Main(int y) {\n    x = y;\n  }\n\n  public static void main(String[] args) {\n    Main myObj = new Main(5);\n    System.out.println(myObj.x);\n  }\n}\n\n// Outputs 5\npublic class Main {\n  int x;\n\n  public Main(int y) {\n    x = y;\n  }\n\n  public static void main(String[] args) {\n    Main myObj = new Main(5);\n    System.out.println(myObj.x);\n  }\n}\n\n// Outputs 5\nTry it Yourself »\nYou can have as many parameters as you want:\nExample\npublic class Main {\n  int modelYear;\n  String modelName;\n\n  public Main(int year, String name) {\n    modelYear = year;\n    modelName = name;\n  }\n\n  public static void main(String[] args) {\n    Main myCar = new Main(1969, \"Mustang\");\n    System.out.println(myCar.modelYear + \" \" + myCar.modelName);\n  }\n}\n\n// Outputs 1969 Mustang\npublic class Main {\n  int modelYear;\n  String modelName;\n\n  public Main(int year, String name) {\n    modelYear = year;\n    modelName = name;\n  }\n\n  public static void main(String[] args) {\n    Main myCar = new Main(1969, \"Mustang\");\n    System.out.println(myCar.modelYear + \" \" + myCar.modelName);\n  }\n}\n\n// Outputs 1969 Mustang\nTry it Yourself »"
    },
    {
        "title": "JavaModifiers",
        "url": "https://www.w3schools.com/java/java_modifiers.asp",
        "content": "JavaModifiers\nModifiers\nBy now, you are quite familiar with thepublickeyword that appears in almost \nall of our examples:\npublic\npublicclass Main\npublicclass Main\nThepublickeyword is anaccess modifier, \nmeaning that it is used to set the access level for classes, attributes, methods and \nconstructors.\npublic\nWe divide modifiers into two groups:\nAccess Modifiers\nForclasses, you can use eitherpublicordefault:\npublic\npublic\nForattributes, methods and constructors, you can use the one of the \nfollowing:\npublic\nprivate\nprotected\nNon-Access Modifiers\nForclasses, you can use eitherfinalorabstract:\nfinal\nabstract\nfinal\nabstract\nForattributes and methods, you can use the one of the \nfollowing:\nfinal\nstatic\nabstract\ntransient\nsynchronized\nvolatile\nFinal\nIf you don't want the ability to override existing attribute values, declare \nattributes asfinal:\nfinal\nExample\npublic class Main {finalint x = 10;finaldouble PI = 3.14;\n\n  public static void main(String[] args) {\n    Main myObj = new Main();\n    myObj.x = 50; // will generate an error: cannot assign a value to afinalvariable\n    myObj.PI = 25; // will generate an error: cannot assign a value to afinalvariable\n    System.out.println(myObj.x);\n  }\n}\npublic class Main {finalint x = 10;finaldouble PI = 3.14;\n\n  public static void main(String[] args) {\n    Main myObj = new Main();\n    myObj.x = 50; // will generate an error: cannot assign a value to afinalvariable\n    myObj.PI = 25; // will generate an error: cannot assign a value to afinalvariable\n    System.out.println(myObj.x);\n  }\n}\nTry it Yourself »\nStatic\nAstaticmethod means that it can be \naccessed without creating an object of the class, unlikepublic:\nstatic\npublic\nExample\nAn example to demonstrate the differences betweenstaticandpublicmethods:\nstatic\npublic\npublic class Main {\n  // Static method\n  static void myStaticMethod() {\n    System.out.println(\"Static methods can be called without creating objects\");\n  }\n\n  // Public method\n  public void myPublicMethod() {\n    System.out.println(\"Public methods must be called by creating objects\");\n  }\n\n  // Main method\n  public static void main(String[ ] args) {\n    myStaticMethod(); // Call the static method\n    // myPublicMethod(); This would output an error\n\n    Main myObj = new Main(); // Create an object of Main\n    myObj.myPublicMethod(); // Call the public method\n  }\n}\npublic class Main {\n  // Static method\n  static void myStaticMethod() {\n    System.out.println(\"Static methods can be called without creating objects\");\n  }\n\n  // Public method\n  public void myPublicMethod() {\n    System.out.println(\"Public methods must be called by creating objects\");\n  }\n\n  // Main method\n  public static void main(String[ ] args) {\n    myStaticMethod(); // Call the static method\n    // myPublicMethod(); This would output an error\n\n    Main myObj = new Main(); // Create an object of Main\n    myObj.myPublicMethod(); // Call the public method\n  }\n}\nTry it Yourself »\nAbstract\nAnabstractmethod belongs to anabstractclass, and it does not have a body. \nThe body is provided by the subclass:\nabstract\nabstract\nExample\n// Code from filename: Main.java\n// abstract classabstract class Main {\n  public String fname = \"John\";\n  public int age = 24;\n  publicabstractvoid study(); // abstract method\n}\n\n// Subclass (inherit from Main)\nclass Student extends Main {\n  public int graduationYear = 2018;\n  public void study() { // the body of the abstract method is provided here\n    System.out.println(\"Studying all day long\");\n  }\n}\n// End code from filename: Main.java\n\n// Code from filename: Second.java\nclass Second {\n  public static void main(String[] args) {\n    // create an object of the Student class (which inherits attributes and methods from Main)\n    Student myObj = new Student();\n\n    System.out.println(\"Name: \" + myObj.fname);\n    System.out.println(\"Age: \" + myObj.age);\n    System.out.println(\"Graduation Year: \" + myObj.graduationYear);\n    myObj.study(); // call abstract method}\n}\n// Code from filename: Main.java\n// abstract classabstract class Main {\n  public String fname = \"John\";\n  public int age = 24;\n  publicabstractvoid study(); // abstract method\n}\n\n// Subclass (inherit from Main)\nclass Student extends Main {\n  public int graduationYear = 2018;\n  public void study() { // the body of the abstract method is provided here\n    System.out.println(\"Studying all day long\");\n  }\n}\n// End code from filename: Main.java\n\n// Code from filename: Second.java\nclass Second {\n  public static void main(String[] args) {\n    // create an object of the Student class (which inherits attributes and methods from Main)\n    Student myObj = new Student();\n\n    System.out.println(\"Name: \" + myObj.fname);\n    System.out.println(\"Age: \" + myObj.age);\n    System.out.println(\"Graduation Year: \" + myObj.graduationYear);\n    myObj.study(); // call abstract method}\n}\nTry it Yourself »"
    },
    {
        "title": "JavaEncapsulation",
        "url": "https://www.w3schools.com/java/java_encapsulation.asp",
        "content": "JavaEncapsulation\nEncapsulation\nThe meaning ofEncapsulation, is to make sure that \"sensitive\" data is hidden \nfrom users. To achieve this, you must:declare class variables/attributes asprivateprovide publicgetandsetmethods to access and update the value of aprivatevariableGet and SetYou learned from the previous chapter thatprivatevariables can only be \naccessed within the same class (an outside class has no access to it). However, \nit is possible to access them if we provide publicgetandsetmethods.Thegetmethod returns the variable value, and thesetmethod sets the value.Syntax for both is that they start with eithergetorset, followed by the \nname of the variable, with the first letter in upper case:Examplepublic class Person {\n  private String name; // private = restricted access\n\n  // Getter\n  public String getName() {\n    return name;\n  }\n\n  // Setter\n  public void setName(String newName) {\n    this.name = newName;\n  }\n}Example explainedThegetmethod returns the value of the variablename.Thesetmethod takes a parameter (newName) and assigns it to thenamevariable. Thethiskeyword is used to refer to the current \nobject.However, as thenamevariable is declared asprivate, wecannotaccess it from outside this class:Examplepublic class Main {\n  public static void main(String[] args) {\n    Person myObj = new Person();\n    myObj.name = \"John\";  // error\n    System.out.println(myObj.name); // error \n  }\n}Run Example »If the variable was declared aspublic, we would expect the following output:JohnHowever, as we try to access aprivatevariable, we get an error:MyClass.java:4: error: name has private access in PersonmyObj.name = \"John\";^MyClass.java:5: error: name has private access in PersonSystem.out.println(myObj.name);^2 errorsInstead, we use thegetName()andsetName()methods to access and update the variable:Examplepublic class Main {\n  public static void main(String[] args) {\n    Person myObj = new Person();\n    myObj.setName(\"John\"); // Set the value of the name variable to \"John\"\n    System.out.println(myObj.getName());\n  }\n}\n\n// Outputs \"John\"Try it Yourself »Why Encapsulation?Better control of class attributes and methodsClass attributes can be maderead-only(if you only use thegetmethod), orwrite-only(if you only use thesetmethod)Flexible: the programmer can change one part of the code without affecting other partsIncreased security of data❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up\nprivate\nprivate\nGet and Set\nYou learned from the previous chapter thatprivatevariables can only be \naccessed within the same class (an outside class has no access to it). However, \nit is possible to access them if we provide publicgetandsetmethods.\nprivate\nThegetmethod returns the variable value, and thesetmethod sets the value.\nget\nset\nSyntax for both is that they start with eithergetorset, followed by the \nname of the variable, with the first letter in upper case:\nget\nset\nExample\npublic class Person {\n  private String name; // private = restricted access\n\n  // Getter\n  public String getName() {\n    return name;\n  }\n\n  // Setter\n  public void setName(String newName) {\n    this.name = newName;\n  }\n}\npublic class Person {\n  private String name; // private = restricted access\n\n  // Getter\n  public String getName() {\n    return name;\n  }\n\n  // Setter\n  public void setName(String newName) {\n    this.name = newName;\n  }\n}\nThegetmethod returns the value of the variablename.\nget\nname\nThesetmethod takes a parameter (newName) and assigns it to thenamevariable. Thethiskeyword is used to refer to the current \nobject.\nset\nnewName\nname\nthis\nHowever, as thenamevariable is declared asprivate, wecannotaccess it from outside this class:\nname\nprivate\nExample\npublic class Main {\n  public static void main(String[] args) {\n    Person myObj = new Person();\n    myObj.name = \"John\";  // error\n    System.out.println(myObj.name); // error \n  }\n}\npublic class Main {\n  public static void main(String[] args) {\n    Person myObj = new Person();\n    myObj.name = \"John\";  // error\n    System.out.println(myObj.name); // error \n  }\n}\nRun Example »\nIf the variable was declared aspublic, we would expect the following output:\npublic\nJohn\nHowever, as we try to access aprivatevariable, we get an error:\nprivate\nMyClass.java:4: error: name has private access in PersonmyObj.name = \"John\";^MyClass.java:5: error: name has private access in PersonSystem.out.println(myObj.name);^2 errors\nInstead, we use thegetName()andsetName()methods to access and update the variable:\ngetName()\nsetName()\nExample\npublic class Main {\n  public static void main(String[] args) {\n    Person myObj = new Person();\n    myObj.setName(\"John\"); // Set the value of the name variable to \"John\"\n    System.out.println(myObj.getName());\n  }\n}\n\n// Outputs \"John\"\npublic class Main {\n  public static void main(String[] args) {\n    Person myObj = new Person();\n    myObj.setName(\"John\"); // Set the value of the name variable to \"John\"\n    System.out.println(myObj.getName());\n  }\n}\n\n// Outputs \"John\"\nTry it Yourself »\nWhy Encapsulation?\nget\nset"
    },
    {
        "title": "JavaPackages",
        "url": "https://www.w3schools.com/java/java_packages.asp",
        "content": "JavaPackages\nJava Packages & API\nA package in Java is used to group related classes. Think of it asa folder in a file directory. We use packages to avoid name conflicts, and \nto write a better maintainable code. Packages are divided into two categories:\nBuilt-in Packages\nThe Java API is a library of prewritten classes, that are free to use, included in the\nJava Development Environment.\nThe library contains components for managing input, database programming, and much much \nmore. The complete list can be found at Oracles website:https://docs.oracle.com/javase/8/docs/api/.\nThe library is divided intopackagesandclasses. \nMeaning you can either import a single class (along with its methods and \nattributes), or a whole package that contain \nall the classes that belong to the specified package.\nTo use a class or a package from the library, you need to use theimportkeyword:\nimport\nSyntax\nimportpackage.name.Class;   // Import a single class\nimportpackage.name.*;   // Import the whole package\nimportpackage.name.Class;   // Import a single class\nimportpackage.name.*;   // Import the whole package\nImport a Class\nIf you find a class you want to use, for example, theScannerclass,which is used to get \nuser input, write the following code:\nScanner\nExample\nimport java.util.Scanner;\nimport java.util.Scanner;\nIn the example above,java.utilis a package, whileScanneris a class of \nthejava.utilpackage.\njava.util\nScanner\njava.util\nTo use theScannerclass, create an object of the class and use any of the available methods found in theScannerclass documentation. \nIn our example, we will use thenextLine()method, which is used to read a \ncomplete line:\nScanner\nScanner\nnextLine()\nExample\nUsing theScannerclass to get user input:\nScanner\nimport java.util.Scanner;\n\nclass MyClass {\n  public static void main(String[] args) {\n    Scanner myObj = new Scanner(System.in);\n    System.out.println(\"Enter username\");\n\n    String userName = myObj.nextLine();\n    System.out.println(\"Username is: \" + userName);\n  }\n}\nimport java.util.Scanner;\n\nclass MyClass {\n  public static void main(String[] args) {\n    Scanner myObj = new Scanner(System.in);\n    System.out.println(\"Enter username\");\n\n    String userName = myObj.nextLine();\n    System.out.println(\"Username is: \" + userName);\n  }\n}\nRun Example »\nImport a Package\nThere are many packages to choose from. In the previous example, we used theScannerclass from thejava.utilpackage. This package also contains date and time \nfacilities, random-number generator and other utility classes.\nScanner\njava.util\nTo import a whole package, end the sentence with an asterisk sign (*). \nThe following example \nwill import ALL the classes in thejava.utilpackage:\n*\njava.util\nExample\nimport java.util.*;\nimport java.util.*;\nRun Example »\nUser-defined Packages\nTo create your own package, you need to understand that Java uses a file system directory to store them. Just like folders on your computer:\nExample\n└── root\n  └── mypack\n    └── MyPackageClass.java\nTo create a package, use thepackagekeyword:\npackage\nMyPackageClass.java\npackage mypack;\nclass MyPackageClass {\n  public static void main(String[] args) {\n    System.out.println(\"This is my package!\");\n  }\n}\npackage mypack;\nclass MyPackageClass {\n  public static void main(String[] args) {\n    System.out.println(\"This is my package!\");\n  }\n}\nRun Example »\nSave the file asMyPackageClass.java, and compile it:\nThen compile the package:\nThis forces the compiler to create the \"mypack\" package.\nThe-dkeyword specifies the destination for where to save the class file. You \n  can use any directory name, like c:/user (windows), or, if you want to keep \n  the package within the same directory, you can use the dot sign \".\", like in \n  the example above.\n-d\n.\nNote:The package name should be written in lower case to avoid conflict with class names.\nWhen we compiled the package in the example above, a new folder was created, called \"mypack\".\nTo run theMyPackageClass.javafile, write the following:\nThe output will be:\nThis is my package!"
    },
    {
        "title": "JavaInheritance",
        "url": "https://www.w3schools.com/java/java_inheritance.asp",
        "content": "JavaInheritance\nJava Inheritance (Subclass and Superclass)\nIn Java, it is possible to inherit attributes and methods from one class to another. We group the \"inheritance concept\" into two categories:\nTo inherit from a class, use theextendskeyword.\nextends\nIn the example below, theCarclass \n(subclass) inherits the attributes and methods from theVehicleclass \n(superclass):\nCar\nVehicle\nExample\nclass Vehicle {\n  protected String brand = \"Ford\";        // Vehicle attribute\n  public void honk() {                    // Vehicle method\n    System.out.println(\"Tuut, tuut!\");\n  }\n}\n\nclass Car extends Vehicle {\n  private String modelName = \"Mustang\";    // Car attribute\n  public static void main(String[] args) {\n\n    // Create a myCar object\n    Car myCar = new Car();\n\n    // Call the honk() method (from the Vehicle class) on the myCar object\n    myCar.honk();\n\n    // Display the value of the brand attribute (from the Vehicle class) and the value of the modelName from the Car class\n    System.out.println(myCar.brand + \" \" + myCar.modelName);\n  }\n}\nclass Vehicle {\n  protected String brand = \"Ford\";        // Vehicle attribute\n  public void honk() {                    // Vehicle method\n    System.out.println(\"Tuut, tuut!\");\n  }\n}\n\nclass Car extends Vehicle {\n  private String modelName = \"Mustang\";    // Car attribute\n  public static void main(String[] args) {\n\n    // Create a myCar object\n    Car myCar = new Car();\n\n    // Call the honk() method (from the Vehicle class) on the myCar object\n    myCar.honk();\n\n    // Display the value of the brand attribute (from the Vehicle class) and the value of the modelName from the Car class\n    System.out.println(myCar.brand + \" \" + myCar.modelName);\n  }\n}\nTry it Yourself »\nDid you notice theprotectedmodifier in Vehicle?\nprotected\nWe set thebrandattribute inVehicleto aprotectedaccess \nmodifier. If it was set toprivate, the Car class would not be able to access \nit.\nprotected\nprivate\n- It is useful for code reusability: reuse attributes and methods of an existing class when you create a new class.\nTip:Also take a look at the next chapter,Polymorphism, which uses inherited methods to perform different tasks.\nThe final Keyword\nIf you don't want other classes to inherit from a class, use thefinalkeyword:\nfinal\nIf you try to access afinalclass, Java will generate an error:\nfinal\nfinal class Vehicle {\n  ...\n}\n\nclass Car extends Vehicle {\n  ...\n}\nfinal class Vehicle {\n  ...\n}\n\nclass Car extends Vehicle {\n  ...\n}\nThe output will be something like this:\nMain.java:9: error: cannot inherit from final Vehicleclass Main extends \n  Vehicle {^1 error)"
    },
    {
        "title": "JavaPolymorphism",
        "url": "https://www.w3schools.com/java/java_polymorphism.asp",
        "content": "JavaPolymorphism\nJava Polymorphism\nPolymorphism means \"many forms\", and it occurs when we have many classes that are related to each other by inheritance.\nLike we specified in the previous chapter;Inheritancelets us \ninherit attributes and methods from another class.Polymorphismuses those methods to perform different tasks. This allows us to perform a single \naction in different ways.\nFor example, think of a superclass calledAnimalthat has a method calledanimalSound(). Subclasses of Animals could be Pigs, Cats, Dogs, Birds - And they also have their own implementation of an animal sound (the pig oinks, and the cat meows, etc.):\nAnimal\nanimalSound()\nExample\nclass Animal {\n  public void animalSound() {\n    System.out.println(\"The animal makes a sound\");\n  }\n}\n\nclass Pig extends Animal {\n  public void animalSound() {\n    System.out.println(\"The pig says: wee wee\");\n  }\n}\n\nclass Dog extends Animal {\n  public void animalSound() {\n    System.out.println(\"The dog says: bow wow\");\n  }\n}\nclass Animal {\n  public void animalSound() {\n    System.out.println(\"The animal makes a sound\");\n  }\n}\n\nclass Pig extends Animal {\n  public void animalSound() {\n    System.out.println(\"The pig says: wee wee\");\n  }\n}\n\nclass Dog extends Animal {\n  public void animalSound() {\n    System.out.println(\"The dog says: bow wow\");\n  }\n}\nRemember from theInheritance chapterthat we use theextendskeyword to inherit from a class.\nextends\nNow we can createPigandDogobjects and call theanimalSound()method on both of them:\nPig\nDog\nanimalSound()\nExample\nclass Animal {\n  public void animalSound() {\n    System.out.println(\"The animal makes a sound\");\n  }\n}\n\nclass Pig extends Animal {\n  public void animalSound() {\n    System.out.println(\"The pig says: wee wee\");\n  }\n}\n\nclass Dog extends Animal {\n  public void animalSound() {\n    System.out.println(\"The dog says: bow wow\");\n  }\n}\n\nclass Main {\n  public static void main(String[] args) {\n    Animal myAnimal = new Animal();  // Create a Animal object\n    Animal myPig = new Pig();  // Create a Pig object\n    Animal myDog = new Dog();  // Create a Dog object\n    myAnimal.animalSound();\n    myPig.animalSound();\n    myDog.animalSound();\n  }\n}\nclass Animal {\n  public void animalSound() {\n    System.out.println(\"The animal makes a sound\");\n  }\n}\n\nclass Pig extends Animal {\n  public void animalSound() {\n    System.out.println(\"The pig says: wee wee\");\n  }\n}\n\nclass Dog extends Animal {\n  public void animalSound() {\n    System.out.println(\"The dog says: bow wow\");\n  }\n}\n\nclass Main {\n  public static void main(String[] args) {\n    Animal myAnimal = new Animal();  // Create a Animal object\n    Animal myPig = new Pig();  // Create a Pig object\n    Animal myDog = new Dog();  // Create a Dog object\n    myAnimal.animalSound();\n    myPig.animalSound();\n    myDog.animalSound();\n  }\n}\nTry it Yourself »\n- It is useful for code reusability: reuse attributes and methods of an existing class when you create a new class."
    },
    {
        "title": "JavaInner Classes",
        "url": "https://www.w3schools.com/java/java_inner_classes.asp",
        "content": "JavaInner Classes\nJava Inner Classes\nIn Java, it is also possible to nest classes (a class within a class). The purpose \nof nested classes is to group classes that belong together, which makes your code more readable and maintainable.\nTo access the inner class, create an object of the outer class, and then create an object of the inner class:\nExample\nclass OuterClass {\n  int x = 10;\n\n  class InnerClass {\n    int y = 5;\n  }\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    OuterClass myOuter = new OuterClass();\n    OuterClass.InnerClass myInner = myOuter.new InnerClass();\n    System.out.println(myInner.y + myOuter.x);\n  }\n}\n\n// Outputs 15 (5 + 10)\nclass OuterClass {\n  int x = 10;\n\n  class InnerClass {\n    int y = 5;\n  }\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    OuterClass myOuter = new OuterClass();\n    OuterClass.InnerClass myInner = myOuter.new InnerClass();\n    System.out.println(myInner.y + myOuter.x);\n  }\n}\n\n// Outputs 15 (5 + 10)\nTry it Yourself »\nPrivate Inner Class\nUnlike a \"regular\" class, an inner class can beprivateorprotected. \nIf you don't want outside objects to access the inner class, declare \nthe class asprivate:\nprivate\nprotected\nprivate\nExample\nclass OuterClass {\n  int x = 10;privateclass InnerClass {\n    int y = 5;\n  }\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    OuterClass myOuter = new OuterClass();\n    OuterClass.InnerClass myInner = myOuter.new InnerClass();\n    System.out.println(myInner.y + myOuter.x);\n  }\n}\nclass OuterClass {\n  int x = 10;privateclass InnerClass {\n    int y = 5;\n  }\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    OuterClass myOuter = new OuterClass();\n    OuterClass.InnerClass myInner = myOuter.new InnerClass();\n    System.out.println(myInner.y + myOuter.x);\n  }\n}\nIf you try to access a private inner class from an outside class, an error occurs:\nMain.java:13: error: OuterClass.InnerClass has private access in OuterClassOuterClass.InnerClass myInner = myOuter.new InnerClass();^\nTry it Yourself »\nStatic Inner Class\nAn inner class can also bestatic, which means that you can access it without \ncreating an object of the outer class:\nstatic\nExample\nclass OuterClass {\n  int x = 10;\n\n  static class InnerClass {\n    int y = 5;\n  }\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    OuterClass.InnerClass myInner = new OuterClass.InnerClass();\n    System.out.println(myInner.y);\n  }\n}\n\n// Outputs 5\nclass OuterClass {\n  int x = 10;\n\n  static class InnerClass {\n    int y = 5;\n  }\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    OuterClass.InnerClass myInner = new OuterClass.InnerClass();\n    System.out.println(myInner.y);\n  }\n}\n\n// Outputs 5\nTry it Yourself »\nNote:just likestaticattributes and methods, astaticinner class does not have access to members of the outer class.\nstatic\nstatic\nAccess Outer Class From Inner Class\nOne advantage of inner classes, is that they can access attributes and methods of the outer class:\nExample\nclass OuterClass {\n  int x = 10;\n\n  class InnerClass {\n    public int myInnerMethod() {\n      return x;\n    }\n  }\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    OuterClass myOuter = new OuterClass();\n    OuterClass.InnerClass myInner = myOuter.new InnerClass();\n    System.out.println(myInner.myInnerMethod());\n  }\n}\n\n// Outputs 10\nclass OuterClass {\n  int x = 10;\n\n  class InnerClass {\n    public int myInnerMethod() {\n      return x;\n    }\n  }\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    OuterClass myOuter = new OuterClass();\n    OuterClass.InnerClass myInner = myOuter.new InnerClass();\n    System.out.println(myInner.myInnerMethod());\n  }\n}\n\n// Outputs 10\nTry it Yourself »"
    },
    {
        "title": "JavaAbstraction",
        "url": "https://www.w3schools.com/java/java_abstract.asp",
        "content": "JavaAbstraction\nAbstract Classes and Methods\nDataabstractionis the process of hiding certain details and showing only essential information to the user.Abstraction can be achieved with eitherabstract classesorinterfaces(which you will learn more about in the next chapter).\nTheabstractkeyword is a non-access modifier, used for classes and methods:Abstract class:is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class).Abstract method:can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from).An abstract class can have both abstract and regular methods:abstract class Animal {\n  public abstract void animalSound();\n  public void sleep() {\n    System.out.println(\"Zzz\");\n  }\n}From the example above, it is not possible to create an object of the Animal class:Animal myObj = new Animal(); // will generate an errorTo access the abstract class, it must be inherited from another class. Let's convert the Animal class we used in thePolymorphismchapter to an abstract class:Remember from theInheritance chapterthat we use theextendskeyword to inherit from a class.Example// Abstract class\nabstract class Animal {\n  // Abstract method (does not have a body)\n  public abstract void animalSound();\n  // Regular method\n  public void sleep() {\n    System.out.println(\"Zzz\");\n  }\n}\n\n// Subclass (inherit from Animal)\nclass Pig extends Animal {\n  public void animalSound() {\n    // The body of animalSound() is provided here\n    System.out.println(\"The pig says: wee wee\");\n  }\n}\n\nclass Main {\n  public static void main(String[] args) {\n    Pig myPig = new Pig(); // Create a Pig object\n    myPig.animalSound();\n    myPig.sleep();\n  }\n}Try it Yourself »Why And When To Use Abstract Classes and Methods?To achieve security - hide certain details and only show the important \ndetails of an object.Note:Abstraction can also be achieved withInterfaces, which you will learn more about in the next chapter.❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up\nabstract\nAn abstract class can have both abstract and regular methods:\nabstract class Animal {\n  public abstract void animalSound();\n  public void sleep() {\n    System.out.println(\"Zzz\");\n  }\n}\nabstract class Animal {\n  public abstract void animalSound();\n  public void sleep() {\n    System.out.println(\"Zzz\");\n  }\n}\nFrom the example above, it is not possible to create an object of the Animal class:\nAnimal myObj = new Animal(); // will generate an error\nAnimal myObj = new Animal(); // will generate an error\nTo access the abstract class, it must be inherited from another class. Let's convert the Animal class we used in thePolymorphismchapter to an abstract class:\nRemember from theInheritance chapterthat we use theextendskeyword to inherit from a class.\nextends\nExample\n// Abstract class\nabstract class Animal {\n  // Abstract method (does not have a body)\n  public abstract void animalSound();\n  // Regular method\n  public void sleep() {\n    System.out.println(\"Zzz\");\n  }\n}\n\n// Subclass (inherit from Animal)\nclass Pig extends Animal {\n  public void animalSound() {\n    // The body of animalSound() is provided here\n    System.out.println(\"The pig says: wee wee\");\n  }\n}\n\nclass Main {\n  public static void main(String[] args) {\n    Pig myPig = new Pig(); // Create a Pig object\n    myPig.animalSound();\n    myPig.sleep();\n  }\n}\n// Abstract class\nabstract class Animal {\n  // Abstract method (does not have a body)\n  public abstract void animalSound();\n  // Regular method\n  public void sleep() {\n    System.out.println(\"Zzz\");\n  }\n}\n\n// Subclass (inherit from Animal)\nclass Pig extends Animal {\n  public void animalSound() {\n    // The body of animalSound() is provided here\n    System.out.println(\"The pig says: wee wee\");\n  }\n}\n\nclass Main {\n  public static void main(String[] args) {\n    Pig myPig = new Pig(); // Create a Pig object\n    myPig.animalSound();\n    myPig.sleep();\n  }\n}\nTry it Yourself »\nTo achieve security - hide certain details and only show the important \ndetails of an object.\nNote:Abstraction can also be achieved withInterfaces, which you will learn more about in the next chapter."
    },
    {
        "title": "JavaInterface",
        "url": "https://www.w3schools.com/java/java_interface.asp",
        "content": "JavaInterface\nInterfaces\nAnother way to achieveabstractionin Java, is with interfaces.\nAninterfaceis a completely \"abstract class\" \nthat is used to group related methods with empty bodies:\ninterface\nExample\n// interface\ninterface Animal {\n  public void animalSound(); // interface method (does not have a body)\n  public void run(); // interface method (does not have a body)\n}\n// interface\ninterface Animal {\n  public void animalSound(); // interface method (does not have a body)\n  public void run(); // interface method (does not have a body)\n}\nTo access the interface methods, the interface must be \"implemented\" \n(kinda like inherited) by another class with theimplementskeyword (instead ofextends). The body of the \ninterface method is provided by the \"implement\" class:\nimplements\nextends\nExample\n// Interface\ninterface Animal {\n  public void animalSound(); // interface method (does not have a body)\n  public void sleep(); // interface method (does not have a body)\n}\n\n// Pig \"implements\" the Animal interface\nclass Pig implements Animal {\n  public void animalSound() {\n    // The body of animalSound() is provided here\n    System.out.println(\"The pig says: wee wee\");\n  }\n  public void sleep() {\n    // The body of sleep() is provided here\n    System.out.println(\"Zzz\");\n  }\n}\n\nclass Main {\n  public static void main(String[] args) {\n    Pig myPig = new Pig();  // Create a Pig object\n    myPig.animalSound();\n    myPig.sleep();\n  }\n}\n// Interface\ninterface Animal {\n  public void animalSound(); // interface method (does not have a body)\n  public void sleep(); // interface method (does not have a body)\n}\n\n// Pig \"implements\" the Animal interface\nclass Pig implements Animal {\n  public void animalSound() {\n    // The body of animalSound() is provided here\n    System.out.println(\"The pig says: wee wee\");\n  }\n  public void sleep() {\n    // The body of sleep() is provided here\n    System.out.println(\"Zzz\");\n  }\n}\n\nclass Main {\n  public static void main(String[] args) {\n    Pig myPig = new Pig();  // Create a Pig object\n    myPig.animalSound();\n    myPig.sleep();\n  }\n}\nTry it Yourself »\nabstract\npublic\npublic\nstatic\nfinal\n1) To achieve security - hide certain details and only show the important \ndetails of an object (interface).\n2) Java does not support \"multiple inheritance\" (a class can only inherit from one superclass). However, it can be achieved \n  with interfaces, because the class canimplementmultiple interfaces.Note:To implement multiple interfaces, separate them with a comma (see example below).\nMultiple Interfaces\nTo implement multiple interfaces, separate them with a comma:\nExample\ninterface FirstInterface {\n  public void myMethod(); // interface method\n}\n\ninterface SecondInterface {\n  public void myOtherMethod(); // interface method\n}\n\nclass DemoClass implements FirstInterface, SecondInterface {\n  public void myMethod() {\n    System.out.println(\"Some text..\");\n  }\n  public void myOtherMethod() {\n    System.out.println(\"Some other text...\");\n  }\n}\n\nclass Main {\n  public static void main(String[] args) {\n    DemoClass myObj = new DemoClass();\n    myObj.myMethod();\n    myObj.myOtherMethod();\n  }\n}\ninterface FirstInterface {\n  public void myMethod(); // interface method\n}\n\ninterface SecondInterface {\n  public void myOtherMethod(); // interface method\n}\n\nclass DemoClass implements FirstInterface, SecondInterface {\n  public void myMethod() {\n    System.out.println(\"Some text..\");\n  }\n  public void myOtherMethod() {\n    System.out.println(\"Some other text...\");\n  }\n}\n\nclass Main {\n  public static void main(String[] args) {\n    DemoClass myObj = new DemoClass();\n    myObj.myMethod();\n    myObj.myOtherMethod();\n  }\n}\nTry it Yourself »"
    },
    {
        "title": "JavaEnums",
        "url": "https://www.w3schools.com/java/java_enums.asp",
        "content": "JavaEnums\nEnums\nAnenumis a special \"class\" that represents a group ofconstants(unchangeable variables, likefinalvariables).\nenum\nfinal\nTo create anenum, use theenumkeyword (instead of class or interface), and separate \nthe constants with a comma. Note that they should be in uppercase letters:\nenum\nenum\nExample\nenum Level {\n  LOW,\n  MEDIUM,\n  HIGH\n}\nenum Level {\n  LOW,\n  MEDIUM,\n  HIGH\n}\nYou can accessenumconstants with thedotsyntax:\nenum\nEnumis short for \"enumerations\", which means \"specifically listed\".\nEnum inside a Class\nYou can also have anenuminside a class:\nenum\nExample\npublic class Main {\n  enum Level {\n    LOW,\n    MEDIUM,\n    HIGH\n  }\n\n  public static void main(String[] args) {\n    Level myVar = Level.MEDIUM; \n    System.out.println(myVar);\n  }\n}\npublic class Main {\n  enum Level {\n    LOW,\n    MEDIUM,\n    HIGH\n  }\n\n  public static void main(String[] args) {\n    Level myVar = Level.MEDIUM; \n    System.out.println(myVar);\n  }\n}\nThe output will be:\nMEDIUM\nEnum in a Switch Statement\nEnums are often used inswitchstatements to check for corresponding values:\nswitch\nExample\nenum Level {\n  LOW,\n  MEDIUM,\n  HIGH\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    Level myVar = Level.MEDIUM;\n\n    switch(myVar) {\n      case LOW:\n        System.out.println(\"Low level\");\n        break;\n      case MEDIUM:\n         System.out.println(\"Medium level\");\n        break;\n      case HIGH:\n        System.out.println(\"High level\");\n        break;\n    }\n  }\n}\nenum Level {\n  LOW,\n  MEDIUM,\n  HIGH\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    Level myVar = Level.MEDIUM;\n\n    switch(myVar) {\n      case LOW:\n        System.out.println(\"Low level\");\n        break;\n      case MEDIUM:\n         System.out.println(\"Medium level\");\n        break;\n      case HIGH:\n        System.out.println(\"High level\");\n        break;\n    }\n  }\n}\nThe output will be:\nMedium level\nLoop Through an Enum\nThe enum type has avalues()method, which returns an array of all enum constants. This method is useful when you want to loop through the constants of an enum:\nvalues()\nExample\nfor (Level myVar : Level.values()) {\n  System.out.println(myVar);\n}\nfor (Level myVar : Level.values()) {\n  System.out.println(myVar);\n}\nThe output will be:\nLOWMEDIUMHIGH\nAnenumcan, just like aclass, have attributes and methods. The only \ndifference is that enum constants arepublic,staticandfinal(unchangeable - cannot be overridden).\nenum\nclass\npublic\nstatic\nfinal\nAnenumcannot be used to create objects, and it cannot extend other classes (but it can implement interfaces).\nenum\nUse enums when you have values that you know aren't going to change, like month days, days, colors, deck of cards, etc."
    },
    {
        "title": "JavaUser Input (Scanner)",
        "url": "https://www.w3schools.com/java/java_user_input.asp",
        "content": "JavaUser Input (Scanner)\nJava User Input\nTheScannerclass is used to get \nuser input, and it is found in thejava.utilpackage.\nScanner\njava.util\nTo use theScannerclass, create an object of the class and use any of the available methods found in theScannerclass documentation. \nIn our example, we will use thenextLine()method, which is used to read Strings:\nScanner\nScanner\nnextLine()\nExample\nimport java.util.Scanner;  // Import the Scanner class\n\nclass Main {\n  public static void main(String[] args) {\n    Scanner myObj = new Scanner(System.in);  // Create a Scanner object\n    System.out.println(\"Enter username\");\n\n    String userName = myObj.nextLine();  // Read user input\n    System.out.println(\"Username is: \" + userName);  // Output user input\n  }\n}\nimport java.util.Scanner;  // Import the Scanner class\n\nclass Main {\n  public static void main(String[] args) {\n    Scanner myObj = new Scanner(System.in);  // Create a Scanner object\n    System.out.println(\"Enter username\");\n\n    String userName = myObj.nextLine();  // Read user input\n    System.out.println(\"Username is: \" + userName);  // Output user input\n  }\n}\nRun Example »\nIf you don't know what a package is, read ourJava Packages Tutorial.\nInput Types\nIn the example above, we used thenextLine()method, which is used to read Strings. To read other types, look at the table below:\nnextLine()\nnextBoolean()\nboolean\nnextByte()\nbyte\nnextDouble()\ndouble\nnextFloat()\nfloat\nnextInt()\nint\nnextLine()\nString\nnextLong()\nlong\nnextShort()\nshort\nIn the example below, we use different methods to read data of various types:\nExample\nimport java.util.Scanner;\n\nclass Main {\n  public static void main(String[] args) {\n    Scanner myObj = new Scanner(System.in);\n\n    System.out.println(\"Enter name, age and salary:\");\n\n    // String input\n    String name = myObj.nextLine();\n\n    // Numerical input\n    int age = myObj.nextInt();\n    double salary = myObj.nextDouble();\n\n    // Output input by user\n    System.out.println(\"Name: \" + name);\n    System.out.println(\"Age: \" + age);\n    System.out.println(\"Salary: \" + salary);\n  }\n}\nimport java.util.Scanner;\n\nclass Main {\n  public static void main(String[] args) {\n    Scanner myObj = new Scanner(System.in);\n\n    System.out.println(\"Enter name, age and salary:\");\n\n    // String input\n    String name = myObj.nextLine();\n\n    // Numerical input\n    int age = myObj.nextInt();\n    double salary = myObj.nextDouble();\n\n    // Output input by user\n    System.out.println(\"Name: \" + name);\n    System.out.println(\"Age: \" + age);\n    System.out.println(\"Salary: \" + salary);\n  }\n}\nRun Example »\nNote:If you enter wrong input (e.g. text in a numerical input), you will get an exception/error message (like \"InputMismatchException\").\nYou can read more about exceptions and how to handle errors in theExceptions chapter.\nComplete Scanner Reference\nTip:For a complete reference of Scanner methods, go to ourJava Scanner Reference."
    },
    {
        "title": "JavaDate and Time",
        "url": "https://www.w3schools.com/java/java_date.asp",
        "content": "JavaDate and Time\nJava Dates\nJava does not have a built-in Date class, but we can import thejava.timepackage to work with the date and time API. The package includes many date and time classes. \nFor example:\njava.time\nLocalDate\nLocalTime\nLocalDateTime\nDateTimeFormatter\nIf you don't know what a package is, read ourJava Packages Tutorial.\nDisplay Current Date\nTo display the current date, import thejava.time.LocalDateclass, and use itsnow()method:\njava.time.LocalDate\nnow()\nExample\nimport java.time.LocalDate; // import the LocalDate class\n\npublic class Main {\n  public static void main(String[] args) {\n    LocalDate myObj = LocalDate.now(); // Create a date object\n    System.out.println(myObj); // Display the current date\n  }\n}\nimport java.time.LocalDate; // import the LocalDate class\n\npublic class Main {\n  public static void main(String[] args) {\n    LocalDate myObj = LocalDate.now(); // Create a date object\n    System.out.println(myObj); // Display the current date\n  }\n}\nThe output will be:\n\nDisplay Current Time\nTo display the current time (hour, minute, second, and nanoseconds), import thejava.time.LocalTimeclass, and use itsnow()method:\njava.time.LocalTime\nnow()\nExample\nimport java.time.LocalTime; // import the LocalTime class\n\npublic class Main {\n  public static void main(String[] args) {\n    LocalTime myObj = LocalTime.now();\n    System.out.println(myObj);\n  }\n}\nimport java.time.LocalTime; // import the LocalTime class\n\npublic class Main {\n  public static void main(String[] args) {\n    LocalTime myObj = LocalTime.now();\n    System.out.println(myObj);\n  }\n}\nThis example displays the server's local time, which may differ from your \nlocal time:\n\nDisplay Current Date and Time\nTo display the current date and time, import thejava.time.LocalDateTimeclass, and use itsnow()method:\njava.time.LocalDateTime\nnow()\nExample\nimport java.time.LocalDateTime; // import the LocalDateTime class\n\npublic class Main {\n  public static void main(String[] args) {\n    LocalDateTime myObj = LocalDateTime.now();\n    System.out.println(myObj);\n  }\n}\nimport java.time.LocalDateTime; // import the LocalDateTime class\n\npublic class Main {\n  public static void main(String[] args) {\n    LocalDateTime myObj = LocalDateTime.now();\n    System.out.println(myObj);\n  }\n}\nThe output will be something like this:\n\nFormatting Date and Time\nThe \"T\" in the example above is used to separate the date from the time. You can use theDateTimeFormatterclass \nwith theofPattern()method in the same package to format or parse date-time objects. \nThe following example will remove both the \"T\" and nanoseconds from the date-time:\nDateTimeFormatter\nofPattern()\nExample\nimport java.time.LocalDateTime; // Import the LocalDateTime class\nimport java.time.format.DateTimeFormatter; // Import the DateTimeFormatter class\n\npublic class Main {\n  public static void main(String[] args) {\n    LocalDateTime myDateObj = LocalDateTime.now();\n    System.out.println(\"Before formatting: \" + myDateObj);\n    DateTimeFormatter myFormatObj = DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm:ss\");\n\n    String formattedDate = myDateObj.format(myFormatObj);\n    System.out.println(\"After formatting: \" + formattedDate);\n  }\n}\nimport java.time.LocalDateTime; // Import the LocalDateTime class\nimport java.time.format.DateTimeFormatter; // Import the DateTimeFormatter class\n\npublic class Main {\n  public static void main(String[] args) {\n    LocalDateTime myDateObj = LocalDateTime.now();\n    System.out.println(\"Before formatting: \" + myDateObj);\n    DateTimeFormatter myFormatObj = DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm:ss\");\n\n    String formattedDate = myDateObj.format(myFormatObj);\n    System.out.println(\"After formatting: \" + formattedDate);\n  }\n}\nThe output will be:\n\nTheofPattern()method accepts all sorts of values, if you want to display \nthe date and time in a different format. For example:\nofPattern()"
    },
    {
        "title": "JavaArrayList",
        "url": "https://www.w3schools.com/java/java_arraylist.asp",
        "content": "JavaArrayList\nJava ArrayList\nTheArrayListclass is a resizablearray, which can be found in thejava.utilpackage.\nArrayList\njava.util\nThe difference between a built-in array and anArrayListin Java, is that the size of an array cannot be modified (if you want to \nadd or remove elements to/from an array, you have to create a new one). While elements can be added and removed from anArrayListwhenever you want. The syntax is also slightly different:\nArrayList\nArrayList\nExample\nCreate anArrayListobject calledcarsthat will store strings:\nArrayList\nimport java.util.ArrayList; // import the ArrayList class\n\nArrayList<String> cars = new ArrayList<String>(); // Create an ArrayList object\nimport java.util.ArrayList; // import the ArrayList class\n\nArrayList<String> cars = new ArrayList<String>(); // Create an ArrayList object\nIf you don't know what a package is, read ourJava Packages Tutorial.\nAdd Items\nTheArrayListclass has many useful methods. For example, to add elements to the \nlist, use theadd()method:\nArrayList\nadd()\nExample\nimport java.util.ArrayList;\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<String> cars = new ArrayList<String>();\n    cars.add(\"Volvo\");\n    cars.add(\"BMW\");\n    cars.add(\"Ford\");\n    cars.add(\"Mazda\");\n    System.out.println(cars);\n  }\n}\nimport java.util.ArrayList;\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<String> cars = new ArrayList<String>();\n    cars.add(\"Volvo\");\n    cars.add(\"BMW\");\n    cars.add(\"Ford\");\n    cars.add(\"Mazda\");\n    System.out.println(cars);\n  }\n}\nTry it Yourself »\nYou can also add an item at a specified position by referring to the index \nnumber:\nExample\nimport java.util.ArrayList;\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<String> cars = new ArrayList<String>();\n    cars.add(\"Volvo\");\n    cars.add(\"BMW\");\n    cars.add(\"Ford\");\n\n    cars.add(0, \"Mazda\"); // Insert element at the beginning of the list (0)\n\n    System.out.println(cars);\n  }\n}\nimport java.util.ArrayList;\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<String> cars = new ArrayList<String>();\n    cars.add(\"Volvo\");\n    cars.add(\"BMW\");\n    cars.add(\"Ford\");\n\n    cars.add(0, \"Mazda\"); // Insert element at the beginning of the list (0)\n\n    System.out.println(cars);\n  }\n}\nTry it Yourself »\nRemember:Array indexes start with 0: [0] is the first element. [1] is the second \nelement, etc.\nAccess an Item\nTo access an element in theArrayList, use theget()method and refer to the index number:\nArrayList\nget()\nExample\ncars.get(0);\ncars.get(0);\nTry it Yourself »\nChange an Item\nTo modify an element, use theset()method \nand refer to the index number:\nset()\nExample\ncars.set(0, \"Opel\");\ncars.set(0, \"Opel\");\nTry it Yourself »\nRemove an Item\nTo remove an element, use theremove()method \nand refer to the index number:\nremove()\nExample\ncars.remove(0);\ncars.remove(0);\nTry it Yourself »\nTo remove all the elements in theArrayList, use theclear()method:\nArrayList\nclear()\nExample\ncars.clear();\ncars.clear();\nTry it Yourself »\nArrayList Size\nTo find out how many elements an ArrayList have, use thesizemethod:\nsize\nExample\ncars.size();\ncars.size();\nTry it Yourself »\nLoop Through an ArrayList\nLoop through the elements of anArrayListwith aforloop, and use thesize()method to specify how many times the loop should run:\nArrayList\nfor\nsize()\nExample\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<String> cars = new ArrayList<String>();\n    cars.add(\"Volvo\");\n    cars.add(\"BMW\");\n    cars.add(\"Ford\");\n    cars.add(\"Mazda\");\n    for (int i = 0; i < cars.size(); i++) {\n      System.out.println(cars.get(i));\n    }\n  }\n}\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<String> cars = new ArrayList<String>();\n    cars.add(\"Volvo\");\n    cars.add(\"BMW\");\n    cars.add(\"Ford\");\n    cars.add(\"Mazda\");\n    for (int i = 0; i < cars.size(); i++) {\n      System.out.println(cars.get(i));\n    }\n  }\n}\nTry it Yourself »\nYou can also loop through anArrayListwith thefor-eachloop:\nArrayList\nExample\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<String> cars = new ArrayList<String>();\n    cars.add(\"Volvo\");\n    cars.add(\"BMW\");\n    cars.add(\"Ford\");\n    cars.add(\"Mazda\");\n    for (String i : cars) {\n      System.out.println(i);\n    }\n  }\n}\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<String> cars = new ArrayList<String>();\n    cars.add(\"Volvo\");\n    cars.add(\"BMW\");\n    cars.add(\"Ford\");\n    cars.add(\"Mazda\");\n    for (String i : cars) {\n      System.out.println(i);\n    }\n  }\n}\nTry it Yourself »\nOther Types\nElements in an ArrayList are actually objects. In the examples above, we created elements \n(objects) of type \"String\". Remember that a String in Java is an object (not a primitive type). To use other types, such as int, you must specify an equivalentwrapper class:Integer. For other primitive types, \nuse:Booleanfor boolean,Characterfor char,Doublefor double, \netc:\nInteger\nBoolean\nCharacter\nDouble\nExample\nCreate anArrayListto store numbers (add elements of typeInteger):\nArrayList\nInteger\nimport java.util.ArrayList;\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<Integer> myNumbers = new ArrayList<Integer>();\n    myNumbers.add(10);\n    myNumbers.add(15);\n    myNumbers.add(20);\n    myNumbers.add(25);\n    for (int i : myNumbers) {\n      System.out.println(i);\n    }\n  }\n}\nimport java.util.ArrayList;\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<Integer> myNumbers = new ArrayList<Integer>();\n    myNumbers.add(10);\n    myNumbers.add(15);\n    myNumbers.add(20);\n    myNumbers.add(25);\n    for (int i : myNumbers) {\n      System.out.println(i);\n    }\n  }\n}\nTry it Yourself »\nSort an ArrayList\nAnother useful class in thejava.utilpackage is theCollectionsclass, which include thesort()method for sorting lists \nalphabetically or numerically:\njava.util\nCollections\nsort()\nExample\nSort an ArrayList of Strings:\nimport java.util.ArrayList;\nimport java.util.Collections;  // Import the Collections class\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<String> cars = new ArrayList<String>();\n    cars.add(\"Volvo\");\n    cars.add(\"BMW\");\n    cars.add(\"Ford\");\n    cars.add(\"Mazda\");\n    Collections.sort(cars);  // Sort cars\n    for (String i : cars) {\n      System.out.println(i);\n    }\n  }\n}\nimport java.util.ArrayList;\nimport java.util.Collections;  // Import the Collections class\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<String> cars = new ArrayList<String>();\n    cars.add(\"Volvo\");\n    cars.add(\"BMW\");\n    cars.add(\"Ford\");\n    cars.add(\"Mazda\");\n    Collections.sort(cars);  // Sort cars\n    for (String i : cars) {\n      System.out.println(i);\n    }\n  }\n}\nTry it Yourself »\nExample\nSort an ArrayList of Integers:\nimport java.util.ArrayList;\nimport java.util.Collections;  // Import the Collections class\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<Integer> myNumbers = new ArrayList<Integer>();\n    myNumbers.add(33);\n    myNumbers.add(15);\n    myNumbers.add(20);\n    myNumbers.add(34);\n    myNumbers.add(8);\n    myNumbers.add(12);\n\n    Collections.sort(myNumbers);  // Sort myNumbers\n\n    for (int i : myNumbers) {\n      System.out.println(i);\n    }\n  }\n}\nimport java.util.ArrayList;\nimport java.util.Collections;  // Import the Collections class\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<Integer> myNumbers = new ArrayList<Integer>();\n    myNumbers.add(33);\n    myNumbers.add(15);\n    myNumbers.add(20);\n    myNumbers.add(34);\n    myNumbers.add(8);\n    myNumbers.add(12);\n\n    Collections.sort(myNumbers);  // Sort myNumbers\n\n    for (int i : myNumbers) {\n      System.out.println(i);\n    }\n  }\n}\nTry it Yourself »\nComplete ArrayList Reference\nFor a complete reference of ArrayList methods, go to ourJava ArrayList Reference."
    },
    {
        "title": "JavaLinkedList",
        "url": "https://www.w3schools.com/java/java_linkedlist.asp",
        "content": "JavaLinkedList\nJava LinkedList\nIn the previous chapter, you learned about theArrayListclass. TheLinkedListclass is \nalmost identical to theArrayList:\nArrayList\nLinkedList\nArrayList\nExample\n// Import the LinkedList class\nimport java.util.LinkedList;\n\npublic class Main {\n  public static void main(String[] args) {\n    LinkedList<String> cars = new LinkedList<String>();\n    cars.add(\"Volvo\");\n    cars.add(\"BMW\");\n    cars.add(\"Ford\");\n    cars.add(\"Mazda\");\n    System.out.println(cars);\n  }\n}\n// Import the LinkedList class\nimport java.util.LinkedList;\n\npublic class Main {\n  public static void main(String[] args) {\n    LinkedList<String> cars = new LinkedList<String>();\n    cars.add(\"Volvo\");\n    cars.add(\"BMW\");\n    cars.add(\"Ford\");\n    cars.add(\"Mazda\");\n    System.out.println(cars);\n  }\n}\nTry it Yourself »\nArrayList vs. LinkedList\nTheLinkedListclass is a collection which can contain many objects of the same type,\njust like theArrayList.\nLinkedList\nArrayList\nTheLinkedListclass has all of the same methods as theArrayListclass because\nthey both implement theListinterface. This means that you can add items, change\nitems, remove items and clear the list in the same way.\nLinkedList\nArrayList\nList\nHowever, while theArrayListclass and theLinkedListclass can be used in the same way,\nthey are built very differently.\nArrayList\nLinkedList\nHow the ArrayList works\nTheArrayListclass has a regular array inside it. When an element is added, it is placed\ninto the array. If the array is not big enough, a new, larger array is created to replace the\nold one and the old one is removed.\nArrayList\nHow the LinkedList works\nTheLinkedListstores its items in \"containers.\" The list has a link to the first container\nand each container has a link to the next container in the list. To add an element to the list,\nthe element is placed into a new container and that container is linked to one of the other\ncontainers in the list.\nLinkedList\nWhen To Use\nUse anArrayListfor storing and accessing data, andLinkedListto \nmanipulate data.\nArrayList\nLinkedList\nLinkedList Methods\nFor many cases, theArrayListis more efficient as it is common to need access to\nrandom items in the list, but theLinkedListprovides several methods to do certain\noperations more efficiently:\nArrayList\nLinkedList\nComplete LinkedList Reference\nFor a complete reference of LinkedList methods, go to ourJava LinkedList Reference."
    },
    {
        "title": "JavaList Sorting",
        "url": "https://www.w3schools.com/java/java_sort_list.asp",
        "content": "JavaList Sorting\nJava Sort a List\nIn the previous chapters, you learned how to use two popular lists in Java:ArrayListandLinkedList, which are found in thejava.utilpackage.Another useful class in thejava.utilpackage is theCollectionsclass, which include thesort()method for sorting lists \nalphabetically or numerically.Sort an ArrayListSort an ArrayList of Strings alphabetically in ascending order:Exampleimport java.util.ArrayList;\nimport java.util.Collections;  // Import the Collections class\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<String> cars = new ArrayList<String>();\n    cars.add(\"Volvo\");\n    cars.add(\"BMW\");\n    cars.add(\"Ford\");\n    cars.add(\"Mazda\");\n\n    Collections.sort(cars);  // Sort cars\n\n    for (String i : cars) {\n      System.out.println(i);\n    }\n  }\n}Try it Yourself »Sort an ArrayList of Integers numerically in ascending order:Exampleimport java.util.ArrayList;\nimport java.util.Collections;  // Import the Collections class\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<Integer> myNumbers = new ArrayList<Integer>();\n    myNumbers.add(33);\n    myNumbers.add(15);\n    myNumbers.add(20);\n    myNumbers.add(34);\n    myNumbers.add(8);\n    myNumbers.add(12);\n\n    Collections.sort(myNumbers);  // Sort myNumbers\n\n    for (int i : myNumbers) {\n      System.out.println(i);\n    }\n  }\n}Try it Yourself »Reverse the OrderYou can also sort a list in reverse order, by using thereverseOrder()method.In the following example, we sort an ArrayList of Strings alphabetically in \nreverse/descending order:Exampleimport java.util.ArrayList;\nimport java.util.Collections;  // Import the Collections class\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<String> cars = new ArrayList<String>();\n    cars.add(\"Volvo\");\n    cars.add(\"BMW\");\n    cars.add(\"Ford\");\n    cars.add(\"Mazda\");\n\n    Collections.sort(cars, Collections.reverseOrder()); // Sort cars\n\n    for (String i : cars) {\n      System.out.println(i);\n    }\n  }\n}Try it Yourself »Sort an ArrayList of Integers numerically in reverse/descending order:Exampleimport java.util.ArrayList;\nimport java.util.Collections;  // Import the Collections class\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<Integer> myNumbers = new ArrayList<Integer>();\n    myNumbers.add(33);\n    myNumbers.add(15);\n    myNumbers.add(20);\n    myNumbers.add(34);\n    myNumbers.add(8);\n    myNumbers.add(12);\n\n    Collections.sort(myNumbers, Collections.reverseOrder()); // Sort myNumbers\n\n    for (int i : myNumbers) {\n      System.out.println(i);\n    }\n  }\n}Try it Yourself »❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up\nArrayList\nLinkedList\njava.util\nAnother useful class in thejava.utilpackage is theCollectionsclass, which include thesort()method for sorting lists \nalphabetically or numerically.\njava.util\nCollections\nsort()\nSort an ArrayList\nSort an ArrayList of Strings alphabetically in ascending order:\nExample\nimport java.util.ArrayList;\nimport java.util.Collections;  // Import the Collections class\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<String> cars = new ArrayList<String>();\n    cars.add(\"Volvo\");\n    cars.add(\"BMW\");\n    cars.add(\"Ford\");\n    cars.add(\"Mazda\");\n\n    Collections.sort(cars);  // Sort cars\n\n    for (String i : cars) {\n      System.out.println(i);\n    }\n  }\n}\nimport java.util.ArrayList;\nimport java.util.Collections;  // Import the Collections class\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<String> cars = new ArrayList<String>();\n    cars.add(\"Volvo\");\n    cars.add(\"BMW\");\n    cars.add(\"Ford\");\n    cars.add(\"Mazda\");\n\n    Collections.sort(cars);  // Sort cars\n\n    for (String i : cars) {\n      System.out.println(i);\n    }\n  }\n}\nTry it Yourself »\nSort an ArrayList of Integers numerically in ascending order:\nExample\nimport java.util.ArrayList;\nimport java.util.Collections;  // Import the Collections class\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<Integer> myNumbers = new ArrayList<Integer>();\n    myNumbers.add(33);\n    myNumbers.add(15);\n    myNumbers.add(20);\n    myNumbers.add(34);\n    myNumbers.add(8);\n    myNumbers.add(12);\n\n    Collections.sort(myNumbers);  // Sort myNumbers\n\n    for (int i : myNumbers) {\n      System.out.println(i);\n    }\n  }\n}\nimport java.util.ArrayList;\nimport java.util.Collections;  // Import the Collections class\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<Integer> myNumbers = new ArrayList<Integer>();\n    myNumbers.add(33);\n    myNumbers.add(15);\n    myNumbers.add(20);\n    myNumbers.add(34);\n    myNumbers.add(8);\n    myNumbers.add(12);\n\n    Collections.sort(myNumbers);  // Sort myNumbers\n\n    for (int i : myNumbers) {\n      System.out.println(i);\n    }\n  }\n}\nTry it Yourself »\nReverse the Order\nYou can also sort a list in reverse order, by using thereverseOrder()method.\nreverseOrder()\nIn the following example, we sort an ArrayList of Strings alphabetically in \nreverse/descending order:\nExample\nimport java.util.ArrayList;\nimport java.util.Collections;  // Import the Collections class\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<String> cars = new ArrayList<String>();\n    cars.add(\"Volvo\");\n    cars.add(\"BMW\");\n    cars.add(\"Ford\");\n    cars.add(\"Mazda\");\n\n    Collections.sort(cars, Collections.reverseOrder()); // Sort cars\n\n    for (String i : cars) {\n      System.out.println(i);\n    }\n  }\n}\nimport java.util.ArrayList;\nimport java.util.Collections;  // Import the Collections class\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<String> cars = new ArrayList<String>();\n    cars.add(\"Volvo\");\n    cars.add(\"BMW\");\n    cars.add(\"Ford\");\n    cars.add(\"Mazda\");\n\n    Collections.sort(cars, Collections.reverseOrder()); // Sort cars\n\n    for (String i : cars) {\n      System.out.println(i);\n    }\n  }\n}\nTry it Yourself »\nSort an ArrayList of Integers numerically in reverse/descending order:\nExample\nimport java.util.ArrayList;\nimport java.util.Collections;  // Import the Collections class\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<Integer> myNumbers = new ArrayList<Integer>();\n    myNumbers.add(33);\n    myNumbers.add(15);\n    myNumbers.add(20);\n    myNumbers.add(34);\n    myNumbers.add(8);\n    myNumbers.add(12);\n\n    Collections.sort(myNumbers, Collections.reverseOrder()); // Sort myNumbers\n\n    for (int i : myNumbers) {\n      System.out.println(i);\n    }\n  }\n}\nimport java.util.ArrayList;\nimport java.util.Collections;  // Import the Collections class\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<Integer> myNumbers = new ArrayList<Integer>();\n    myNumbers.add(33);\n    myNumbers.add(15);\n    myNumbers.add(20);\n    myNumbers.add(34);\n    myNumbers.add(8);\n    myNumbers.add(12);\n\n    Collections.sort(myNumbers, Collections.reverseOrder()); // Sort myNumbers\n\n    for (int i : myNumbers) {\n      System.out.println(i);\n    }\n  }\n}\nTry it Yourself »"
    },
    {
        "title": "JavaHashMap",
        "url": "https://www.w3schools.com/java/java_hashmap.asp",
        "content": "JavaHashMap\nJava HashMap\nIn theArrayListchapter, you learned that Arrays store items as an ordered collection, and you have to access them with an index number (inttype).\nAHashMaphowever, store items in \"key/value\" pairs, and you can access them by an index of another type (e.g. aString).\nArrayList\nint\nHashMap\nString\nOne object is used as a key (index) to another \nobject (value). It can store different types:Stringkeys andIntegervalues, or the \nsame type, like:Stringkeys andStringvalues:\nString\nInteger\nString\nString\nExample\nCreate aHashMapobject calledcapitalCitiesthat will storeStringkeysandStringvalues:\nHashMap\nString\nString\nimport java.util.HashMap; // import the HashMap class\n\nHashMap<String, String> capitalCities = new HashMap<String, String>();\nimport java.util.HashMap; // import the HashMap class\n\nHashMap<String, String> capitalCities = new HashMap<String, String>();\nAdd Items\nTheHashMapclass has many useful methods. For example, to \nadd items to it, use theput()method:\nHashMap\nput()\nExample\n// Import the HashMap class\nimport java.util.HashMap;\n\npublic class Main {\n  public static void main(String[] args) {\n    // Create a HashMap object called capitalCities\n    HashMap<String, String> capitalCities = new HashMap<String, String>();\n\n    // Add keys and values (Country, City)\n    capitalCities.put(\"England\", \"London\");\n    capitalCities.put(\"Germany\", \"Berlin\");\n    capitalCities.put(\"Norway\", \"Oslo\");\n    capitalCities.put(\"USA\", \"Washington DC\");\n    System.out.println(capitalCities);\n  }\n}\n// Import the HashMap class\nimport java.util.HashMap;\n\npublic class Main {\n  public static void main(String[] args) {\n    // Create a HashMap object called capitalCities\n    HashMap<String, String> capitalCities = new HashMap<String, String>();\n\n    // Add keys and values (Country, City)\n    capitalCities.put(\"England\", \"London\");\n    capitalCities.put(\"Germany\", \"Berlin\");\n    capitalCities.put(\"Norway\", \"Oslo\");\n    capitalCities.put(\"USA\", \"Washington DC\");\n    System.out.println(capitalCities);\n  }\n}\nTry it Yourself »\nAccess an Item\nTo access a value in theHashMap, use theget()method and refer to \nits key:\nHashMap\nget()\nExample\ncapitalCities.get(\"England\");\ncapitalCities.get(\"England\");\nTry it Yourself »\nRemove an Item\nTo remove an item, use theremove()method \nand refer to the key:\nremove()\nExample\ncapitalCities.remove(\"England\");\ncapitalCities.remove(\"England\");\nTry it Yourself »\nTo remove all items, use theclear()method:\nclear()\nExample\ncapitalCities.clear();\ncapitalCities.clear();\nTry it Yourself »\nHashMap Size\nTo find out how many items there are, use thesize()method:\nsize()\nExample\ncapitalCities.size();\ncapitalCities.size();\nTry it Yourself »\nLoop Through a HashMap\nLoop through the items of aHashMapwith afor-eachloop.\nHashMap\nNote:Use thekeySet()method if you only want the keys, and use thevalues()method if you only want the values:\nkeySet()\nvalues()\nExample\n// Print keys\nfor (String i : capitalCities.keySet()) {\n  System.out.println(i);\n}\n// Print keys\nfor (String i : capitalCities.keySet()) {\n  System.out.println(i);\n}\nTry it Yourself »\nExample\n// Print values\nfor (String i : capitalCities.values()) {\n  System.out.println(i);\n}\n// Print values\nfor (String i : capitalCities.values()) {\n  System.out.println(i);\n}\nTry it Yourself »\nExample\n// Print keys and values\nfor (String i : capitalCities.keySet()) {\n  System.out.println(\"key: \" + i + \" value: \" + capitalCities.get(i));\n}\n// Print keys and values\nfor (String i : capitalCities.keySet()) {\n  System.out.println(\"key: \" + i + \" value: \" + capitalCities.get(i));\n}\nTry it Yourself »\nOther Types\nKeys and values in a HashMap are actually objects. In the examples above, we used objects of type \"String\". Remember that a String in Java is an object (not a primitive type). To use other types, such as int, you must specify an equivalentwrapper class:Integer. For other primitive types, \nuse:Booleanfor boolean,Characterfor char,Doublefor double, \netc:\nInteger\nBoolean\nCharacter\nDouble\nExample\nCreate aHashMapobject calledpeoplethat will storeStringkeysandIntegervalues:\nHashMap\nString\nInteger\n// Import the HashMap class\nimport java.util.HashMap;\n\npublic class Main {\n  public static void main(String[] args) {\n\n    // Create a HashMap object called people\n    HashMap<String, Integer> people = new HashMap<String, Integer>();\n\n    // Add keys and values (Name, Age)\n    people.put(\"John\", 32);\n    people.put(\"Steve\", 30);\n    people.put(\"Angie\", 33);\n\n    for (String i : people.keySet()) {\n      System.out.println(\"key: \" + i + \" value: \" + people.get(i));\n    }\n  }\n}\n// Import the HashMap class\nimport java.util.HashMap;\n\npublic class Main {\n  public static void main(String[] args) {\n\n    // Create a HashMap object called people\n    HashMap<String, Integer> people = new HashMap<String, Integer>();\n\n    // Add keys and values (Name, Age)\n    people.put(\"John\", 32);\n    people.put(\"Steve\", 30);\n    people.put(\"Angie\", 33);\n\n    for (String i : people.keySet()) {\n      System.out.println(\"key: \" + i + \" value: \" + people.get(i));\n    }\n  }\n}\nTry it Yourself »\nComplete HashMap Reference\nFor a complete reference of HashMap methods, go to ourJava HashMap Reference."
    },
    {
        "title": "JavaHashSet",
        "url": "https://www.w3schools.com/java/java_hashset.asp",
        "content": "JavaHashSet\nJava HashSet\nA HashSet is a collection of items where every item is unique, and it is found in thejava.utilpackage:\njava.util\nExample\nCreate aHashSetobject calledcarsthat will store strings:\nHashSet\nimport java.util.HashSet; // Import the HashSet class\n\nHashSet<String> cars = new HashSet<String>();\nimport java.util.HashSet; // Import the HashSet class\n\nHashSet<String> cars = new HashSet<String>();\nAdd Items\nTheHashSetclass has many useful methods. For example, to \nadd items to it, use theadd()method:\nHashSet\nadd()\nExample\n// Import the HashSet class\nimport java.util.HashSet;\n\npublic class Main {\n  public static void main(String[] args) {\n    HashSet<String> cars = new HashSet<String>();\n    cars.add(\"Volvo\");\n    cars.add(\"BMW\");\n    cars.add(\"Ford\");\n    cars.add(\"BMW\");\n    cars.add(\"Mazda\");\n    System.out.println(cars);\n  }\n}\n// Import the HashSet class\nimport java.util.HashSet;\n\npublic class Main {\n  public static void main(String[] args) {\n    HashSet<String> cars = new HashSet<String>();\n    cars.add(\"Volvo\");\n    cars.add(\"BMW\");\n    cars.add(\"Ford\");\n    cars.add(\"BMW\");\n    cars.add(\"Mazda\");\n    System.out.println(cars);\n  }\n}\nTry it Yourself »\nNote:In the example above, even though BMW is added twice it only appears once in the set\nbecause every item in a set has to be unique.\nCheck If an Item Exists\nTo check whether an item exists in a HashSet, use thecontains()method:\ncontains()\nExample\ncars.contains(\"Mazda\");\ncars.contains(\"Mazda\");\nTry it Yourself »\nRemove an Item\nTo remove an item, use theremove()method:\nremove()\nExample\ncars.remove(\"Volvo\");\ncars.remove(\"Volvo\");\nTry it Yourself »\nTo remove all items, use theclear()method:\nclear()\nExample\ncars.clear();\ncars.clear();\nTry it Yourself »\nHashSet Size\nTo find out how many items there are, use thesizemethod:\nsize\nExample\ncars.size();\ncars.size();\nTry it Yourself »\nLoop Through a HashSet\nLoop through the items of anHashSetwith afor-eachloop:\nHashSet\nExample\nfor (String i : cars) {\n  System.out.println(i);\n}\nfor (String i : cars) {\n  System.out.println(i);\n}\nTry it Yourself »\nOther Types\nItems in an HashSet are actually objects. In the examples above, we created \nitems \n(objects) of type \"String\". Remember that a String in Java is an object (not a primitive type). To use other types, such as int, you must specify an equivalentwrapper class:Integer. For other primitive types, \nuse:Booleanfor boolean,Characterfor char,Doublefor double, \netc:\nInteger\nBoolean\nCharacter\nDouble\nExample\nUse aHashSetthat storesIntegerobjects:\nHashSet\nInteger\nimport java.util.HashSet;\n\npublic class Main {\n  public static void main(String[] args) {\n\n    // Create a HashSet object called numbers\n    HashSet<Integer> numbers = new HashSet<Integer>();\n\n    // Add values to the set\n    numbers.add(4);\n    numbers.add(7);\n    numbers.add(8);\n\n    // Show which numbers between 1 and 10 are in the set\n    for(int i = 1; i <= 10; i++) {\n      if(numbers.contains(i)) {\n        System.out.println(i + \" was found in the set.\");\n      } else {\n        System.out.println(i + \" was not found in the set.\");\n      }\n    }\n  }\n}\nimport java.util.HashSet;\n\npublic class Main {\n  public static void main(String[] args) {\n\n    // Create a HashSet object called numbers\n    HashSet<Integer> numbers = new HashSet<Integer>();\n\n    // Add values to the set\n    numbers.add(4);\n    numbers.add(7);\n    numbers.add(8);\n\n    // Show which numbers between 1 and 10 are in the set\n    for(int i = 1; i <= 10; i++) {\n      if(numbers.contains(i)) {\n        System.out.println(i + \" was found in the set.\");\n      } else {\n        System.out.println(i + \" was not found in the set.\");\n      }\n    }\n  }\n}\nTry it Yourself »"
    },
    {
        "title": "JavaIterator",
        "url": "https://www.w3schools.com/java/java_iterator.asp",
        "content": "JavaIterator\nJava Iterator\nAnIteratoris an object that can be used to loop through collections, likeArrayListandHashSet. It is called an \"iterator\" because \"iterating\" is the technical term for looping.\nIterator\nTo use an Iterator, you must import it from thejava.utilpackage.\njava.util\nGetting an Iterator\nTheiterator()method can be used to get anIteratorfor any collection:\niterator()\nIterator\nExample\n// Import the ArrayList class and the Iterator class\nimport java.util.ArrayList;\nimport java.util.Iterator;\n\npublic class Main {\n  public static void main(String[] args) {\n\n    // Make a collection\n    ArrayList<String> cars = new ArrayList<String>();\n    cars.add(\"Volvo\");\n    cars.add(\"BMW\");\n    cars.add(\"Ford\");\n    cars.add(\"Mazda\");\n\n    // Get the iterator\n    Iterator<String> it = cars.iterator();\n\n    // Print the first item\n    System.out.println(it.next());\n  }\n}\n// Import the ArrayList class and the Iterator class\nimport java.util.ArrayList;\nimport java.util.Iterator;\n\npublic class Main {\n  public static void main(String[] args) {\n\n    // Make a collection\n    ArrayList<String> cars = new ArrayList<String>();\n    cars.add(\"Volvo\");\n    cars.add(\"BMW\");\n    cars.add(\"Ford\");\n    cars.add(\"Mazda\");\n\n    // Get the iterator\n    Iterator<String> it = cars.iterator();\n\n    // Print the first item\n    System.out.println(it.next());\n  }\n}\nTry it Yourself »\nLooping Through a Collection\nTo loop through a collection, use thehasNext()andnext()methods of theIterator:\nhasNext()\nnext()\nIterator\nExample\nwhile(it.hasNext()) {\n  System.out.println(it.next());\n}\nwhile(it.hasNext()) {\n  System.out.println(it.next());\n}\nTry it Yourself »\nRemoving Items from a Collection\nIterators are designed to easily change the collections that they loop through. Theremove()method can remove items from a collection while looping.\nremove()\nExample\nUse an iterator to remove numbers less than 10 from a collection:\nimport java.util.ArrayList;\nimport java.util.Iterator;\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<Integer> numbers = new ArrayList<Integer>();\n    numbers.add(12);\n    numbers.add(8);\n    numbers.add(2);\n    numbers.add(23);\n    Iterator<Integer> it = numbers.iterator();\n    while(it.hasNext()) {\n      Integer i = it.next();\n      if(i < 10) {\n        it.remove();\n      }\n    }\n    System.out.println(numbers);\n  }\n}\nimport java.util.ArrayList;\nimport java.util.Iterator;\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<Integer> numbers = new ArrayList<Integer>();\n    numbers.add(12);\n    numbers.add(8);\n    numbers.add(2);\n    numbers.add(23);\n    Iterator<Integer> it = numbers.iterator();\n    while(it.hasNext()) {\n      Integer i = it.next();\n      if(i < 10) {\n        it.remove();\n      }\n    }\n    System.out.println(numbers);\n  }\n}\nTry it Yourself »\nNote:Trying to remove items using afor loopor afor-each loopwould not work correctly\nbecause the collection is changing size at the same time that the code is trying to loop."
    },
    {
        "title": "JavaWrapper Classes",
        "url": "https://www.w3schools.com/java/java_wrapper_classes.asp",
        "content": "JavaWrapper Classes\nJava Wrapper Classes\nWrapper classes provide a way to use primitive data types (int,boolean, \netc..) as objects.\nint\nboolean\nThe table below shows the primitive type and the equivalent wrapper class:\nSometimes you must use wrapper classes, for example when working with Collection objects, such \nasArrayList, where primitive types cannot be \nused (the list can only store objects):\nArrayList\nExample\nArrayList<int> myNumbers = new ArrayList<int>(); // Invalid\nArrayList<int> myNumbers = new ArrayList<int>(); // Invalid\nArrayList<Integer> myNumbers = new ArrayList<Integer>(); // Valid\nArrayList<Integer> myNumbers = new ArrayList<Integer>(); // Valid\nTry it Yourself »\nCreating Wrapper Objects\nTo create a wrapper object, use the wrapper class instead of the primitive \ntype. To get the value, you can just print the object:\nExample\npublic class Main {\n  public static void main(String[] args) {\n    Integer myInt = 5;\n    Double myDouble = 5.99;\n    Character myChar = 'A';\n    System.out.println(myInt);\n    System.out.println(myDouble);\n    System.out.println(myChar);\n  }\n}\npublic class Main {\n  public static void main(String[] args) {\n    Integer myInt = 5;\n    Double myDouble = 5.99;\n    Character myChar = 'A';\n    System.out.println(myInt);\n    System.out.println(myDouble);\n    System.out.println(myChar);\n  }\n}\nTry it Yourself »\nSince you're now working with objects, you can use certain methods to get \ninformation about the specific object.\nFor example, the following methods are used to get the value associated with \nthe corresponding wrapper object:intValue(),byteValue(),shortValue(),longValue(),floatValue(),doubleValue(),charValue(),booleanValue().\nintValue()\nbyteValue()\nshortValue()\nlongValue()\nfloatValue()\ndoubleValue()\ncharValue()\nbooleanValue()\nThis example will output the same result as the example above:\nExample\npublic class Main {\n  public static void main(String[] args) {\n    Integer myInt = 5;\n    Double myDouble = 5.99;\n    Character myChar = 'A';\n    System.out.println(myInt.intValue());\n    System.out.println(myDouble.doubleValue());\n    System.out.println(myChar.charValue());\n  }\n}\npublic class Main {\n  public static void main(String[] args) {\n    Integer myInt = 5;\n    Double myDouble = 5.99;\n    Character myChar = 'A';\n    System.out.println(myInt.intValue());\n    System.out.println(myDouble.doubleValue());\n    System.out.println(myChar.charValue());\n  }\n}\nTry it Yourself »\nAnother useful method is thetoString()method, which is used to convert wrapper objects to strings.\ntoString()\nIn the following example, we convert anIntegerto aString, and use thelength()method of theStringclass to output the length of the \"string\":\nInteger\nString\nlength()\nString\nExample\npublic class Main {\n  public static void main(String[] args) {\n    Integer myInt = 100;\n    String myString = myInt.toString();\n    System.out.println(myString.length());\n  }\n}\npublic class Main {\n  public static void main(String[] args) {\n    Integer myInt = 100;\n    String myString = myInt.toString();\n    System.out.println(myString.length());\n  }\n}\nTry it Yourself »"
    },
    {
        "title": "Java Exceptions -Try...Catch",
        "url": "https://www.w3schools.com/java/java_try_catch.asp",
        "content": "Java Exceptions -Try...Catch\nJava Exceptions\nWhen executing Java code, different errors can occur: coding errors made by the programmer, errors due to wrong input, \nor other unforeseeable things.\nWhen an error occurs, Java will normally stop and generate an error message. The technical term for this is: Java will throw anexception(throw an error).\nJava try and catch\nThetrystatement allows you to define a block of code to be \ntested for errors while it is being executed.\ntry\nThecatchstatement allows you to define a block of code to \nbe executed, if an error occurs in the try block.\ncatch\nThetryandcatchkeywords \ncome in pairs:\ntry\ncatch\nSyntax\ntry {\n  //Block of code to try}\ncatch(Exceptione) {\n  //Block of code to handle errors}\ntry {\n  //Block of code to try}\ncatch(Exceptione) {\n  //Block of code to handle errors}\nConsider the following example:\nThis will generate an error, becausemyNumbers[10]does not exist.\npublic class Main {\n  public static void main(String[ ] args) {\n    int[] myNumbers = {1, 2, 3};\n    System.out.println(myNumbers[10]); // error!\n  }\n}\npublic class Main {\n  public static void main(String[ ] args) {\n    int[] myNumbers = {1, 2, 3};\n    System.out.println(myNumbers[10]); // error!\n  }\n}\nThe output will be something like this:\nException in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: 10at Main.main(Main.java:4)\nNote:ArrayIndexOutOfBoundsExceptionoccurs when you try to access an index number that does not exist.\nArrayIndexOutOfBoundsException\nIf an error occurs, we can usetry...catchto catch the error and execute some code to handle it:\ntry...catch\nExample\npublic class Main {\n  public static void main(String[ ] args) {\n    try {\n      int[] myNumbers = {1, 2, 3};\n      System.out.println(myNumbers[10]);\n    } catch (Exception e) {\n      System.out.println(\"Something went wrong.\");\n    }\n  }\n}\npublic class Main {\n  public static void main(String[ ] args) {\n    try {\n      int[] myNumbers = {1, 2, 3};\n      System.out.println(myNumbers[10]);\n    } catch (Exception e) {\n      System.out.println(\"Something went wrong.\");\n    }\n  }\n}\nThe output will be:\nSomething went wrong.\nFinally\nThefinallystatement lets you execute code, aftertry...catch, regardless of the result:\nfinally\ntry...catch\nExample\npublic class Main {\n  public static void main(String[] args) {\n    try {\n      int[] myNumbers = {1, 2, 3};\n      System.out.println(myNumbers[10]);\n    } catch (Exception e) {\n      System.out.println(\"Something went wrong.\");\n    } finally {\n      System.out.println(\"The 'try catch' is finished.\");\n    }\n  }\n}\npublic class Main {\n  public static void main(String[] args) {\n    try {\n      int[] myNumbers = {1, 2, 3};\n      System.out.println(myNumbers[10]);\n    } catch (Exception e) {\n      System.out.println(\"Something went wrong.\");\n    } finally {\n      System.out.println(\"The 'try catch' is finished.\");\n    }\n  }\n}\nThe output will be:\nSomething went wrong.The 'try catch' is finished.\nThe throw keyword\nThethrowstatement allows you to create a custom error.\nthrow\nThethrowstatement is used together with anexception type. There are many exception types available in Java:ArithmeticException,FileNotFoundException,ArrayIndexOutOfBoundsException,SecurityException, etc:\nthrow\nArithmeticException\nFileNotFoundException\nArrayIndexOutOfBoundsException\nSecurityException\nExample\nThrow an exception ifageis below 18 (print \"Access \ndenied\"). If age is 18 or older, print \"Access granted\":\npublic class Main {\n  static void checkAge(int age) {\n    if (age < 18) {\n      throw new ArithmeticException(\"Access denied - You must be at least 18 years old.\");\n    }\n    else {\n      System.out.println(\"Access granted - You are old enough!\");\n    }\n  }\n\n  public static void main(String[] args) {\n    checkAge(15); // Set age to 15 (which is below 18...)\n  }\n}\npublic class Main {\n  static void checkAge(int age) {\n    if (age < 18) {\n      throw new ArithmeticException(\"Access denied - You must be at least 18 years old.\");\n    }\n    else {\n      System.out.println(\"Access granted - You are old enough!\");\n    }\n  }\n\n  public static void main(String[] args) {\n    checkAge(15); // Set age to 15 (which is below 18...)\n  }\n}\nThe output will be:\nException in thread \"main\" java.lang.ArithmeticException: Access denied - You must be at least 18 years old.at Main.checkAge(Main.java:4)at Main.main(Main.java:12)\nIfagewas 20, you wouldnotget an exception:\nExample\ncheckAge(20);\ncheckAge(20);\nThe output will be:\nAccess granted - You are old enough!\nError and Exception Types Reference\nFor a list of different errors and exception types, go to ourJava Errors and Exception Types Reference."
    },
    {
        "title": "JavaRegular Expressions",
        "url": "https://www.w3schools.com/java/java_regex.asp",
        "content": "JavaRegular Expressions\nWhat is a Regular Expression?\nA regular expression is a sequence of characters that forms a search pattern.\nWhen you search for data in a text, you can use this search pattern to describe what you\nare searching for.\nA regular expression can be a single character, or a more complicated pattern.\nRegular expressions can be used to perform all types oftext searchandtext replaceoperations.\nJava does not have a built-in Regular Expression class, but we can import thejava.util.regexpackage to work with regular expressions. The package includes the following \nclasses:\njava.util.regex\nPattern\nMatcher\nPatternSyntaxException\nExample\nFind out if there are any occurrences of the word \"w3schools\" in a sentence:\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class Main {\n  public static void main(String[] args) {\n    Pattern pattern = Pattern.compile(\"w3schools\", Pattern.CASE_INSENSITIVE);\n    Matcher matcher = pattern.matcher(\"Visit W3Schools!\");\n    boolean matchFound = matcher.find();\n    if(matchFound) {\n      System.out.println(\"Match found\");\n    } else {\n      System.out.println(\"Match not found\");\n    }\n  }\n}\n// Outputs Match found\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class Main {\n  public static void main(String[] args) {\n    Pattern pattern = Pattern.compile(\"w3schools\", Pattern.CASE_INSENSITIVE);\n    Matcher matcher = pattern.matcher(\"Visit W3Schools!\");\n    boolean matchFound = matcher.find();\n    if(matchFound) {\n      System.out.println(\"Match found\");\n    } else {\n      System.out.println(\"Match not found\");\n    }\n  }\n}\n// Outputs Match found\nTry it Yourself »\nExample Explained\nIn this example, The word \"w3schools\" is being searched for in a sentence.\nFirst, the pattern is created using thePattern.compile()method. The first parameter\nindicates which pattern is being searched for and the second parameter has a flag to\nindicates that the search should be case-insensitive. The second parameter is optional.\nPattern.compile()\nThematcher()method is used to search for the pattern in a string. It returns a Matcher\nobject which contains information about the search that was performed.\nmatcher()\nThefind()method returns true if the pattern was found in the string and false if it was not\nfound.\nfind()\nFlags\nFlags in thecompile()method change how the search is performed. Here are a few of\nthem:\ncompile()\nPattern.CASE_INSENSITIVE\nPattern.LITERAL\nPattern.UNICODE_CASE\nCASE_INSENSITIVE\nRegular Expression Patterns\nThe first parameter of thePattern.compile()method is the pattern. It describes what\nis being searched for.\nPattern.compile()\nBrackets are used to find a range of characters:\nMetacharacters\nMetacharacters are characters with a special meaning:\nQuantifiers\nQuantifiers define quantities:"
    },
    {
        "title": "JavaThreads",
        "url": "https://www.w3schools.com/java/java_threads.asp",
        "content": "JavaThreads\nJava Threads\nThreads allows a program to operate more efficiently by doing multiple things at the same\ntime.\nThreads can be used to perform complicated tasks in the background without interrupting\nthe main program.\nCreating a Thread\nThere are two ways to create a thread.\nIt can be created by extending theThreadclass and overriding itsrun()method:\nThread\nrun()\nExtend Syntax\npublic class Main extends Thread {\n  public void run() {\n    System.out.println(\"This code is running in a thread\");}}\npublic class Main extends Thread {\n  public void run() {\n    System.out.println(\"This code is running in a thread\");\n\nAnother way to create a thread is to implement theRunnableinterface:\nRunnable\nImplement Syntax\npublic class Main implements Runnable {\n  public void run() {\n    System.out.println(\"This code is running in a thread\");\n  }\n}\npublic class Main implements Runnable {\n  public void run() {\n    System.out.println(\"This code is running in a thread\");\n  }\n}\nRunning Threads\nIf the class extends theThreadclass, the thread can be run by creating an instance of the\nclass and call itsstart()method:\nThread\nstart()\nExtend Example\npublic class Main extends Thread {\n  public static void main(String[] args) {\n    Main thread = new Main();\n    thread.start();\n    System.out.println(\"This code is outside of the thread\");\n  }\n  public void run() {\n    System.out.println(\"This code is running in a thread\");\n  }\n}\npublic class Main extends Thread {\n  public static void main(String[] args) {\n    Main thread = new Main();\n    thread.start();\n    System.out.println(\"This code is outside of the thread\");\n  }\n  public void run() {\n    System.out.println(\"This code is running in a thread\");\n  }\n}\nTry it Yourself »\nIf the class implements theRunnableinterface, the thread can be run by passing an\ninstance of the class to aThreadobject's constructor and then calling the thread'sstart()method:\nRunnable\nThread\nstart()\nImplement Example\npublic class Main implements Runnable {\n  public static void main(String[] args) {\n    Main obj = new Main();\n    Thread thread = new Thread(obj);\n    thread.start();\n    System.out.println(\"This code is outside of the thread\");\n  }\n  public void run() {\n    System.out.println(\"This code is running in a thread\");\n  }\n}\npublic class Main implements Runnable {\n  public static void main(String[] args) {\n    Main obj = new Main();\n    Thread thread = new Thread(obj);\n    thread.start();\n    System.out.println(\"This code is outside of the thread\");\n  }\n  public void run() {\n    System.out.println(\"This code is running in a thread\");\n  }\n}\nTry it Yourself »\nDifferences between \"extending\" and \"implementing\" Threads\nThe major difference is that when a class extends the Thread class, you cannot extend any other class, but by implementing the Runnable interface, \nit is possible to extend from another class as well, like: classMyClass extends OtherClass implements Runnable.\nMyClass extends OtherClass implements Runnable\nConcurrency Problems\nBecause threads run at the same time as other parts of the program, there is no way to\nknow in which order the code will run. When the threads and main program are reading\nand writing the same variables, the values are unpredictable. The problems that result\nfrom this are called concurrency problems.\nExample\nA code example where the value of the variableamountis unpredictable:\npublic class Main extends Thread {\n  public static int amount = 0;\n\n  public static void main(String[] args) {\n    Main thread = new Main();\n    thread.start();\n    System.out.println(amount);\n    amount++;\n    System.out.println(amount);}public void run() {\n    amount++;}}\npublic class Main extends Thread {\n  public static int amount = 0;\n\n  public static void main(String[] args) {\n    Main thread = new Main();\n    thread.start();\n    System.out.println(amount);\n    amount++;\n    System.out.println(amount);\npublic void run() {\n    amount++;\n\nTry it Yourself »\nTo avoid concurrency problems, it is best to share as few attributes between threads as\npossible. If attributes need to be shared, one possible solution is to use theisAlive()method of the thread to check whether the thread has finished running before using any \nattributes that the thread can change.\nisAlive()\nExample\nUseisAlive()to prevent concurrency problems:\nisAlive()\npublic class Main extends Thread {\n  public static int amount = 0;\n\n  public static void main(String[] args) {\n    Main thread = new Main();\n    thread.start();\n    // Wait for the thread to finish\n    while(thread.isAlive()) {\n      System.out.println(\"Waiting...\");}// Update amount and print its value\n    System.out.println(\"Main: \" + amount);\n    amount++;\n    System.out.println(\"Main: \" + amount);}public void run() {\n    amount++;}}\npublic class Main extends Thread {\n  public static int amount = 0;\n\n  public static void main(String[] args) {\n    Main thread = new Main();\n    thread.start();\n    // Wait for the thread to finish\n    while(thread.isAlive()) {\n      System.out.println(\"Waiting...\");\n// Update amount and print its value\n    System.out.println(\"Main: \" + amount);\n    amount++;\n    System.out.println(\"Main: \" + amount);\npublic void run() {\n    amount++;\n\nTry it Yourself »"
    },
    {
        "title": "JavaLambda Expressions",
        "url": "https://www.w3schools.com/java/java_lambda.asp",
        "content": "JavaLambda Expressions\nJava Lambda Expressions\nLambda Expressions were added in Java 8.\nA lambda expression is a short block of code which takes in parameters and returns a\nvalue. Lambda expressions are similar to methods, but they do not need a name and they\ncan be implemented right in the body of a method.\nSyntax\nThe simplest lambda expression contains a single parameter and an expression:\nparameter->expression\nparameter->expression\nTo use more than one parameter, wrap them in parentheses:\n(parameter1, parameter2)->expression\n(parameter1, parameter2)->expression\nExpressions are limited. They have to immediately return a value, and they cannot contain\nvariables, assignments or statements such asiforfor. In order to do more complex\noperations, a code block can be used with curly braces. If the lambda expression needs to\nreturn a value, then the code block should have areturnstatement.\nif\nfor\nreturn\n(parameter1, parameter2)-> {code block}\n(parameter1, parameter2)-> {code block}\nUsing Lambda Expressions\nLambda expressions are usually passed as parameters to a function:\nExample\nUse a lambda expression in theArrayList'sforEach()method to print\nevery item in the list:\nArrayList\nforEach()\nimport java.util.ArrayList;\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<Integer> numbers = new ArrayList<Integer>();\n    numbers.add(5);\n    numbers.add(9);\n    numbers.add(8);\n    numbers.add(1);\n    numbers.forEach( (n) -> { System.out.println(n); } );\n  }\n}\nimport java.util.ArrayList;\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<Integer> numbers = new ArrayList<Integer>();\n    numbers.add(5);\n    numbers.add(9);\n    numbers.add(8);\n    numbers.add(1);\n    numbers.forEach( (n) -> { System.out.println(n); } );\n  }\n}\nTry it Yourself »\nLambda expressions can be stored in variables if the variable's type is an interface which\nhas only one method. The lambda expression should have the same number of\nparameters and the same return type as that method. Java has many of these kinds of\ninterfaces built in, such as theConsumerinterface (found in thejava.utilpackage) used by lists.\nConsumer\njava.util\nExample\nUse Java'sConsumerinterface to store a lambda expression in a variable:\nConsumer\nimport java.util.ArrayList;\nimport java.util.function.Consumer;\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<Integer> numbers = new ArrayList<Integer>();\n    numbers.add(5);\n    numbers.add(9);\n    numbers.add(8);\n    numbers.add(1);\n    Consumer<Integer> method = (n) -> { System.out.println(n); };\n    numbers.forEach( method );\n  }\n}\nimport java.util.ArrayList;\nimport java.util.function.Consumer;\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<Integer> numbers = new ArrayList<Integer>();\n    numbers.add(5);\n    numbers.add(9);\n    numbers.add(8);\n    numbers.add(1);\n    Consumer<Integer> method = (n) -> { System.out.println(n); };\n    numbers.forEach( method );\n  }\n}\nTry it Yourself »\nTo use a lambda expression in a method, the method should have a parameter with a\nsingle-method interface as its type. Calling the interface's method will run the lambda\nexpression:\nExample\nCreate a method which takes a lambda expression as a parameter:\ninterface StringFunction {\n  String run(String str);}public class Main {\n  public static void main(String[] args) {\n    StringFunction exclaim = (s) -> s + \"!\";\n    StringFunction ask = (s) -> s + \"?\";\n    printFormatted(\"Hello\", exclaim);\n    printFormatted(\"Hello\", ask);}public static void printFormatted(String str, StringFunction format) {\n    String result = format.run(str);\n    System.out.println(result);}}\ninterface StringFunction {\n  String run(String str);\npublic class Main {\n  public static void main(String[] args) {\n    StringFunction exclaim = (s) -> s + \"!\";\n    StringFunction ask = (s) -> s + \"?\";\n    printFormatted(\"Hello\", exclaim);\n    printFormatted(\"Hello\", ask);\npublic static void printFormatted(String str, StringFunction format) {\n    String result = format.run(str);\n    System.out.println(result);\n\nTry it Yourself »"
    },
    {
        "title": "JavaAdvanced Sorting (Comparator and Comparable)",
        "url": "https://www.w3schools.com/java/java_advanced_sorting.asp",
        "content": "JavaAdvanced Sorting (Comparator and Comparable)\nJava Advanced Sorting\nIn theList Sorting Chapter, you learned how to sort lists alphabetically and numerically, but what if the list has objects in it?\nTo sort objects you need to specify a rule that decides how objects should be sorted. For example, if you have a list of cars you might want to sort them by year, the rule could be that cars with an earlier year go first.\nTheComparatorandComparableinterfaces allow you to specify what rule is used to sort objects.\nComparator\nComparable\nBeing able to specify a sorting rule also allows you to change how strings and numbers are sorted.\nComparators\nAn object that implements theComparatorinterface is called a comparator.\nComparator\nTheComparatorinterface allows you to create a class with acompare()method that compares two objects to decide which one should go first in a list.\nComparator\ncompare()\nThecompare()method should return a number which is:\ncompare()\nA class that implements theComparatorinterface might look something like this:\nComparator\n// Sort Car objects by year\nclass SortByYear implements Comparator {\n  public int compare(Object obj1, Object obj2) {\n    // Make sure that the objects are Car objects\n    Car a = (Car) obj1;\n    Car b = (Car) obj2;\n    \n    // Compare the objects\n    if (a.year < b.year) return -1; // The first car has a smaller year\n    if (a.year > b.year) return 1;  // The first car has a larger year\n    return 0; // Both cars have the same year\n  }\n}\n// Sort Car objects by year\nclass SortByYear implements Comparator {\n  public int compare(Object obj1, Object obj2) {\n    // Make sure that the objects are Car objects\n    Car a = (Car) obj1;\n    Car b = (Car) obj2;\n    \n    // Compare the objects\n    if (a.year < b.year) return -1; // The first car has a smaller year\n    if (a.year > b.year) return 1;  // The first car has a larger year\n    return 0; // Both cars have the same year\n  }\n}\nTo use the comparator, pass it as an argument into a sorting method:\n// Use a comparator to sort the cars\nComparator myComparator = new SortByYear();\nCollections.sort(myCars, myComparator);\n// Use a comparator to sort the cars\nComparator myComparator = new SortByYear();\nCollections.sort(myCars, myComparator);\nHere is a complete example using a comparator to sort a list of cars by year:\nExample\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\n\n// Define a Car class\nclass Car {\n  public String brand;\n  public String model;\n  public int year;\n  \n  public Car(String b, String m, int y) {\n    brand = b;\n    model = m;\n    year = y;\n  }\n}\n\n// Create a comparator\nclass SortByYear implements Comparator {\n  public int compare(Object obj1, Object obj2) {\n    // Make sure that the objects are Car objects\n    Car a = (Car) obj1;\n    Car b = (Car) obj2;\n    \n    // Compare the year of both objects\n    if (a.year < b.year) return -1; // The first car has a smaller year\n    if (a.year > b.year) return 1;  // The first car has a larger year\n    return 0; // Both cars have the same year\n  }\n}\n\npublic class Main { \n  public static void main(String[] args) { \n    // Create a list of cars\n    ArrayList<Car> myCars = new ArrayList<Car>();    \n    myCars.add(new Car(\"BMW\", \"X5\", 1999));\n    myCars.add(new Car(\"Honda\", \"Accord\", 2006));\n    myCars.add(new Car(\"Ford\", \"Mustang\", 1970));\n\n    // Use a comparator to sort the cars\n    Comparator myComparator = new SortByYear();\n    Collections.sort(myCars, myComparator);\n\n    // Display the cars\n    for (Car c : myCars) {\n      System.out.println(c.brand + \" \" + c.model + \" \" + c.year);\n    }\n  } \n}\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\n\n// Define a Car class\nclass Car {\n  public String brand;\n  public String model;\n  public int year;\n  \n  public Car(String b, String m, int y) {\n    brand = b;\n    model = m;\n    year = y;\n  }\n}\n\n// Create a comparator\nclass SortByYear implements Comparator {\n  public int compare(Object obj1, Object obj2) {\n    // Make sure that the objects are Car objects\n    Car a = (Car) obj1;\n    Car b = (Car) obj2;\n    \n    // Compare the year of both objects\n    if (a.year < b.year) return -1; // The first car has a smaller year\n    if (a.year > b.year) return 1;  // The first car has a larger year\n    return 0; // Both cars have the same year\n  }\n}\n\npublic class Main { \n  public static void main(String[] args) { \n    // Create a list of cars\n    ArrayList<Car> myCars = new ArrayList<Car>();    \n    myCars.add(new Car(\"BMW\", \"X5\", 1999));\n    myCars.add(new Car(\"Honda\", \"Accord\", 2006));\n    myCars.add(new Car(\"Ford\", \"Mustang\", 1970));\n\n    // Use a comparator to sort the cars\n    Comparator myComparator = new SortByYear();\n    Collections.sort(myCars, myComparator);\n\n    // Display the cars\n    for (Car c : myCars) {\n      System.out.println(c.brand + \" \" + c.model + \" \" + c.year);\n    }\n  } \n}\nUsing a Lambda Expression\nTo make the code shorter, the comparator can be replaced with a lambda expression which has the same arguments and return value as thecompare()method:\ncompare()\nExample\nUse a lambda expression as a comparator:\nCollections.sort(myCars, (obj1, obj2) -> {\n  Car a = (Car) obj1;\n  Car b = (Car) obj2;\n  if (a.year < b.year) return -1;\n  if (a.year > b.year) return 1;\n  return 0;\n});\nCollections.sort(myCars, (obj1, obj2) -> {\n  Car a = (Car) obj1;\n  Car b = (Car) obj2;\n  if (a.year < b.year) return -1;\n  if (a.year > b.year) return 1;\n  return 0;\n});\nSpecial Sorting Rules\nComparators can also be used to make special sorting rules for strings and numbers. In this example we use a comparator to list all of the even numbers before the odd ones:\nExample\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\n\nclass SortEvenFirst implements Comparator {\n  public int compare(Object obj1, Object obj2) {\n    // Make sure the objects are integers\n    Integer a = (Integer)obj1;\n    Integer b = (Integer)obj2;\n    \n    // Check each number to see if it is even\n    // A number is even if the remainder when dividing by 2 is 0\n    boolean aIsEven = (a % 2) == 0;\n    boolean bIsEven = (b % 2) == 0;\n    \n    if (aIsEven == bIsEven) {\n    \n      // If both numbers are even or both are odd then use normal sorting rules\n      if (a < b) return -1;\n      if (a > b) return 1;\n      return 0;\n      \n    } else {\n    \n      // If a is even then it goes first, otherwise b goes first\n      if (aIsEven) {\n      \treturn -1;\n      } else {\n        return 1;\n      }\n    }\n  }\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<Integer> myNumbers = new ArrayList<Integer>();\n    myNumbers.add(33);\n    myNumbers.add(15);\n    myNumbers.add(20);\n    myNumbers.add(34);\n    myNumbers.add(8);\n    myNumbers.add(12);\n\n    Comparator myComparator = new SortEvenFirst();\n    Collections.sort(myNumbers, myComparator);\n\n    for (int i : myNumbers) {\n      System.out.println(i);\n    }\n  }\n}\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\n\nclass SortEvenFirst implements Comparator {\n  public int compare(Object obj1, Object obj2) {\n    // Make sure the objects are integers\n    Integer a = (Integer)obj1;\n    Integer b = (Integer)obj2;\n    \n    // Check each number to see if it is even\n    // A number is even if the remainder when dividing by 2 is 0\n    boolean aIsEven = (a % 2) == 0;\n    boolean bIsEven = (b % 2) == 0;\n    \n    if (aIsEven == bIsEven) {\n    \n      // If both numbers are even or both are odd then use normal sorting rules\n      if (a < b) return -1;\n      if (a > b) return 1;\n      return 0;\n      \n    } else {\n    \n      // If a is even then it goes first, otherwise b goes first\n      if (aIsEven) {\n      \treturn -1;\n      } else {\n        return 1;\n      }\n    }\n  }\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<Integer> myNumbers = new ArrayList<Integer>();\n    myNumbers.add(33);\n    myNumbers.add(15);\n    myNumbers.add(20);\n    myNumbers.add(34);\n    myNumbers.add(8);\n    myNumbers.add(12);\n\n    Comparator myComparator = new SortEvenFirst();\n    Collections.sort(myNumbers, myComparator);\n\n    for (int i : myNumbers) {\n      System.out.println(i);\n    }\n  }\n}\nThe Comparable Interface\nTheComparableinterface allows an object to specify its own sorting rule with acompareTo()method.\nComparable\ncompareTo()\nThecompareTo()method takes an object as an argument and compares the comparable with the argument to decide which one should go first in a list.\ncompareTo()\nLike the comparator, thecompareTo()method returns a number which is:\ncompareTo()\nMany native Java classes implement theComparableinterface, such asStringandInteger.\nComparable\nString\nInteger\nThis is why strings and numbers do not need a comparator to be sorted.\nAn object that implements theComparableinterface might look something like this:\nComparable\nclass Car implements Comparable {\n  public String brand;\n  public String model;\n  public int year;\n  \n  // Decide how this object compares to other objects\n  public int compareTo(Object obj) {\n  \tCar other = (Car)obj;\n    if(year < other.year) return -1; // This object is smaller than the other one\n    if(year > other.year) return 1;  // This object is larger than the other one\n    return 0; // Both objects are the same\n  }\n}\nclass Car implements Comparable {\n  public String brand;\n  public String model;\n  public int year;\n  \n  // Decide how this object compares to other objects\n  public int compareTo(Object obj) {\n  \tCar other = (Car)obj;\n    if(year < other.year) return -1; // This object is smaller than the other one\n    if(year > other.year) return 1;  // This object is larger than the other one\n    return 0; // Both objects are the same\n  }\n}\nHere is the same example as before but using theComparableinterface instead of a comparator:\nComparable\nExample\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\n\n// Define a Car class which is comparable\nclass Car implements Comparable {\n  public String brand;\n  public String model;\n  public int year;\n  \n  public Car(String b, String m, int y) {\n    brand = b;\n    model = m;\n    year = y;\n  }\n  \n  // Decide how this object compares to other objects\n  public int compareTo(Object obj) {\n  \tCar other = (Car)obj;\n    if(year < other.year) return -1; // This object is smaller than the other one\n    if(year > other.year) return 1;  // This object is larger than the other one\n    return 0; // Both objects are the same\n  }\n}\n\npublic class Main { \n  public static void main(String[] args) { \n    // Create a list of cars\n    ArrayList<Car> myCars = new ArrayList<Car>();    \n    myCars.add(new Car(\"BMW\", \"X5\", 1999));\n    myCars.add(new Car(\"Honda\", \"Accord\", 2006));\n    myCars.add(new Car(\"Ford\", \"Mustang\", 1970));\n\n    // Sort the cars\n    Collections.sort(myCars);\n\n    // Display the cars\n    for (Car c : myCars) {\n      System.out.println(c.brand + \" \" + c.model + \" \" + c.year);\n    }\n  } \n}\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\n\n// Define a Car class which is comparable\nclass Car implements Comparable {\n  public String brand;\n  public String model;\n  public int year;\n  \n  public Car(String b, String m, int y) {\n    brand = b;\n    model = m;\n    year = y;\n  }\n  \n  // Decide how this object compares to other objects\n  public int compareTo(Object obj) {\n  \tCar other = (Car)obj;\n    if(year < other.year) return -1; // This object is smaller than the other one\n    if(year > other.year) return 1;  // This object is larger than the other one\n    return 0; // Both objects are the same\n  }\n}\n\npublic class Main { \n  public static void main(String[] args) { \n    // Create a list of cars\n    ArrayList<Car> myCars = new ArrayList<Car>();    \n    myCars.add(new Car(\"BMW\", \"X5\", 1999));\n    myCars.add(new Car(\"Honda\", \"Accord\", 2006));\n    myCars.add(new Car(\"Ford\", \"Mustang\", 1970));\n\n    // Sort the cars\n    Collections.sort(myCars);\n\n    // Display the cars\n    for (Car c : myCars) {\n      System.out.println(c.brand + \" \" + c.model + \" \" + c.year);\n    }\n  } \n}\nA Common Sorting Trick\nThe most obvious way to sort two numbers naturally is to write something like this:\nif(a.year < b.year) return -1; // a is less than b\nif(a.year > b.year) return 1; // a is greater than b\nreturn 0; // a is equal to b\nif(a.year < b.year) return -1; // a is less than b\nif(a.year > b.year) return 1; // a is greater than b\nreturn 0; // a is equal to b\nBut it can actually be done with just a single line:\nreturn a.year - b.year;\nreturn a.year - b.year;\nThis trick can also be used to easily sort things in reverse:\nreturn b.year - a.year;\nreturn b.year - a.year;\nComparator vs. Comparable\nA comparator is an object with one method that is used to compare two different objects.\nA comparable is an object which can compare itself with other objects.\nIt is easier to use theComparableinterface when possible, but theComparatorinterface is more powerful because it allows you to sort any kind of object even if you cannot change its code.❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up\nComparable\nComparator\n❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up"
    },
    {
        "title": "JavaFiles",
        "url": "https://www.w3schools.com/java/java_files.asp",
        "content": "JavaFiles\nFile handling is an important part of any application.\nJava has several methods for creating, reading, updating, and \ndeleting files.\nJava File Handling\nTheFileclass from thejava.iopackage, allows \nus to work with files.\nFile\njava.io\nTo use theFileclass, create an object of \nthe class, and specify the filename or directory name:Exampleimport java.io.File;  // Import the File class\n\nFile myObj = new File(\"filename.txt\"); // Specify the filenameIf you don't know what a package is, read ourJava Packages Tutorial.TheFileclass has many useful methods for creating and getting information \nabout files. \nFor example:MethodTypeDescriptioncanRead()BooleanTests whether the file is readable or notcanWrite()BooleanTests whether the file is writable or notcreateNewFile()BooleanCreates an empty filedelete()BooleanDeletes a fileexists()BooleanTests whether the file existsgetName()StringReturns the name of the filegetAbsolutePath()StringReturns the absolute pathname of the filelength()LongReturns the size of the file in byteslist()String[]Returns an array of the files in the directorymkdir()BooleanCreates a directoryYou will learn how to create, write, read and delete files in the next chapters:Create/Write Files »Read Files »Delete Files »❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up\nFile\nExample\nimport java.io.File;  // Import the File class\n\nFile myObj = new File(\"filename.txt\"); // Specify the filename\nimport java.io.File;  // Import the File class\n\nFile myObj = new File(\"filename.txt\"); // Specify the filename\nIf you don't know what a package is, read ourJava Packages Tutorial.\nTheFileclass has many useful methods for creating and getting information \nabout files. \nFor example:\nFile\ncanRead()\ncanWrite()\ncreateNewFile()\ndelete()\nexists()\ngetName()\ngetAbsolutePath()\nlength()\nlist()\nmkdir()\nYou will learn how to create, write, read and delete files in the next chapters:"
    },
    {
        "title": "JavaCreate and Write To Files",
        "url": "https://www.w3schools.com/java/java_files_create.asp",
        "content": "JavaCreate and Write To Files\nCreate a File\nTo create a file in Java, you can use thecreateNewFile()method. This method returns a \nboolean value:trueif the file was successfully created, andfalseif the file \nalready exists. Note that the method is enclosed in atry...catchblock. This is necessary because it throws anIOExceptionif an error occurs (if the \nfile cannot be created for some reason):\ncreateNewFile()\ntrue\nfalse\ntry...catch\nIOException\nExample\nimport java.io.File;  // Import the File class\nimport java.io.IOException;  // Import the IOException class to handle errors\n\npublic class CreateFile {\n  public static void main(String[] args) {\n    try {\n      File myObj = new File(\"filename.txt\");\n      if (myObj.createNewFile()) {\n        System.out.println(\"File created: \" + myObj.getName());\n      } else {\n        System.out.println(\"File already exists.\");\n      }\n    } catch (IOException e) {\n      System.out.println(\"An error occurred.\");\n      e.printStackTrace();\n    }\n  }\n}\nimport java.io.File;  // Import the File class\nimport java.io.IOException;  // Import the IOException class to handle errors\n\npublic class CreateFile {\n  public static void main(String[] args) {\n    try {\n      File myObj = new File(\"filename.txt\");\n      if (myObj.createNewFile()) {\n        System.out.println(\"File created: \" + myObj.getName());\n      } else {\n        System.out.println(\"File already exists.\");\n      }\n    } catch (IOException e) {\n      System.out.println(\"An error occurred.\");\n      e.printStackTrace();\n    }\n  }\n}\nThe output will be:\nFile created: filename.txt\nTo create a file in a specific directory (requires permission), specify the path of the file and use double backslashes to escape the \"\\\" character (for Windows). On Mac and Linux you can just write the path, like: /Users/name/filename.txt\n\\\nExample\nFile myObj = new File(\"C:\\\\Users\\\\MyName\\\\filename.txt\");\nFile myObj = new File(\"C:\\\\Users\\\\MyName\\\\filename.txt\");\nRun Example »\nWrite To a File\nIn the \nfollowing example, we use theFileWriterclass together with itswrite()method \nto write some text to the file we created in the example above. Note that when you are done writing to the file, \nyou should close it \nwith theclose()method:\nFileWriter\nwrite()\nclose()\nExample\nimport java.io.FileWriter;   // Import the FileWriter class\nimport java.io.IOException;  // Import the IOException class to handle errors\n\npublic class WriteToFile {\n  public static void main(String[] args) {\n    try {\n      FileWriter myWriter = new FileWriter(\"filename.txt\");\n      myWriter.write(\"Files in Java might be tricky, but it is fun enough!\");\n      myWriter.close();\n      System.out.println(\"Successfully wrote to the file.\");\n    } catch (IOException e) {\n      System.out.println(\"An error occurred.\");\n      e.printStackTrace();\n    }\n  }\n}\nimport java.io.FileWriter;   // Import the FileWriter class\nimport java.io.IOException;  // Import the IOException class to handle errors\n\npublic class WriteToFile {\n  public static void main(String[] args) {\n    try {\n      FileWriter myWriter = new FileWriter(\"filename.txt\");\n      myWriter.write(\"Files in Java might be tricky, but it is fun enough!\");\n      myWriter.close();\n      System.out.println(\"Successfully wrote to the file.\");\n    } catch (IOException e) {\n      System.out.println(\"An error occurred.\");\n      e.printStackTrace();\n    }\n  }\n}\nThe output will be:\nSuccessfully wrote to the file.\nTo read the file above, go to theJava Read Fileschapter."
    },
    {
        "title": "JavaRead Files",
        "url": "https://www.w3schools.com/java/java_files_read.asp",
        "content": "JavaRead Files\nRead a File\nIn the previous chapter, you learned how to create and write to a file.\nIn the \nfollowing example, we use theScannerclass to read the contents of the text file we created in the previous chapter:\nScanner\nExample\nimport java.io.File;  // Import the File class\nimport java.io.FileNotFoundException;  // Import this class to handle errors\nimport java.util.Scanner; // Import the Scanner class to read text files\n\npublic class ReadFile {\n  public static void main(String[] args) {\n    try {\n      File myObj = new File(\"filename.txt\");\n      Scanner myReader = new Scanner(myObj);\n      while (myReader.hasNextLine()) {\n        String data = myReader.nextLine();\n        System.out.println(data);\n      }\n      myReader.close();\n    } catch (FileNotFoundException e) {\n      System.out.println(\"An error occurred.\");\n      e.printStackTrace();\n    }\n  }\n}\nimport java.io.File;  // Import the File class\nimport java.io.FileNotFoundException;  // Import this class to handle errors\nimport java.util.Scanner; // Import the Scanner class to read text files\n\npublic class ReadFile {\n  public static void main(String[] args) {\n    try {\n      File myObj = new File(\"filename.txt\");\n      Scanner myReader = new Scanner(myObj);\n      while (myReader.hasNextLine()) {\n        String data = myReader.nextLine();\n        System.out.println(data);\n      }\n      myReader.close();\n    } catch (FileNotFoundException e) {\n      System.out.println(\"An error occurred.\");\n      e.printStackTrace();\n    }\n  }\n}\nThe output will be:\nFiles in Java might be tricky, but it is fun enough!\nGet File Information\nTo get more information about a file, use any of theFilemethods:\nFile\nExample\nimport java.io.File;  // Import the File class\n\npublic class GetFileInfo {public static void main(String[] args) {\n    File myObj = new File(\"filename.txt\");\n    if (myObj.exists()) {\n      System.out.println(\"File name: \" + myObj.getName());\n      System.out.println(\"Absolute path: \" + myObj.getAbsolutePath());\n      System.out.println(\"Writeable: \" + myObj.canWrite());\n      System.out.println(\"Readable \" + myObj.canRead());\n      System.out.println(\"File size in bytes \" + myObj.length());\n    } else {\n      System.out.println(\"The file does not exist.\");\n    }\n  }\n}\nimport java.io.File;  // Import the File class\n\npublic class GetFileInfo {public static void main(String[] args) {\n    File myObj = new File(\"filename.txt\");\n    if (myObj.exists()) {\n      System.out.println(\"File name: \" + myObj.getName());\n      System.out.println(\"Absolute path: \" + myObj.getAbsolutePath());\n      System.out.println(\"Writeable: \" + myObj.canWrite());\n      System.out.println(\"Readable \" + myObj.canRead());\n      System.out.println(\"File size in bytes \" + myObj.length());\n    } else {\n      System.out.println(\"The file does not exist.\");\n    }\n  }\n}\nThe output will be:\nFile name: filename.txtAbsolute path: C:\\Users\\MyName\\filename.txtWriteable: trueReadable: trueFile size in bytes: 0\nNote:There are many available classes in the Java API that can be used to read and write files in Java:FileReader, BufferedReader, Files, Scanner, FileInputStream, FileWriter, BufferedWriter, FileOutputStream, etc. Which one to use depends on the Java version you're working with and whether you need to read bytes or characters, and the size of the file/lines etc.\nFileReader, BufferedReader, Files, Scanner, FileInputStream, FileWriter, BufferedWriter, FileOutputStream\nTip:To delete a file, read ourJava Delete Fileschapter."
    },
    {
        "title": "JavaDelete Files",
        "url": "https://www.w3schools.com/java/java_files_delete.asp",
        "content": "JavaDelete Files\nDelete a File\nTo delete a file in Java, use thedelete()method:\ndelete()\nExample\nimport java.io.File;  // Import the File class\n\npublic class DeleteFile {\n  public static void main(String[] args) { \n    File myObj = new File(\"filename.txt\"); \n    if (myObj.delete()) { \n      System.out.println(\"Deleted the file: \" + myObj.getName());\n    } else {\n      System.out.println(\"Failed to delete the file.\");\n    } \n  } \n}\nimport java.io.File;  // Import the File class\n\npublic class DeleteFile {\n  public static void main(String[] args) { \n    File myObj = new File(\"filename.txt\"); \n    if (myObj.delete()) { \n      System.out.println(\"Deleted the file: \" + myObj.getName());\n    } else {\n      System.out.println(\"Failed to delete the file.\");\n    } \n  } \n}\nThe output will be:\nDeleted the file: filename.txt\nDelete a Folder\nYou can also delete a folder. However, it must be empty:\nExample\nimport java.io.File; \n\npublic class DeleteFolder {\n  public static void main(String[] args) { \n    File myObj = new File(\"C:\\\\Users\\\\MyName\\\\Test\"); \n    if (myObj.delete()) { \n      System.out.println(\"Deleted the folder: \" + myObj.getName());\n    } else {\n      System.out.println(\"Failed to delete the folder.\");\n    } \n  }}\nimport java.io.File; \n\npublic class DeleteFolder {\n  public static void main(String[] args) { \n    File myObj = new File(\"C:\\\\Users\\\\MyName\\\\Test\"); \n    if (myObj.delete()) { \n      System.out.println(\"Deleted the folder: \" + myObj.getName());\n    } else {\n      System.out.println(\"Failed to delete the folder.\");\n    } \n  }\nThe output will be:\nDeleted the folder: Test"
    },
    {
        "title": "JavaHow To Add Two Numbers",
        "url": "https://www.w3schools.com/java/java_howto_add_two_numbers.asp",
        "content": "JavaHow To Add Two Numbers\nAdd Two Numbers\nLearn how to add two numbers in Java:\nExample\nint x = 5;\nint y = 6;\nint sum = x + y;\nSystem.out.println(sum); // Print the sum of x + y\nint x = 5;\nint y = 6;\nint sum = x + y;\nSystem.out.println(sum); // Print the sum of x + y\nAdd Two Numbers with User Input\nLearn how to add two numbers with user input:\nExample\nimport java.util.Scanner; // Import the Scanner class\n\nclass MyClass {\n  public static void main(String[] args) {\n    int x, y, sum;\n    Scanner myObj = new Scanner(System.in); // Create a Scanner object\n    System.out.println(\"Type a number:\");\n    x = myObj.nextInt(); // Read user input\n\n    System.out.println(\"Type another number:\");\n    y = myObj.nextInt(); // Read user input\n\n    sum = x + y;  // Calculate the sum of x + y\n    System.out.println(\"Sum is: \" + sum); // Print the sum\n  }\n}\nimport java.util.Scanner; // Import the Scanner class\n\nclass MyClass {\n  public static void main(String[] args) {\n    int x, y, sum;\n    Scanner myObj = new Scanner(System.in); // Create a Scanner object\n    System.out.println(\"Type a number:\");\n    x = myObj.nextInt(); // Read user input\n\n    System.out.println(\"Type another number:\");\n    y = myObj.nextInt(); // Read user input\n\n    sum = x + y;  // Calculate the sum of x + y\n    System.out.println(\"Sum is: \" + sum); // Print the sum\n  }\n}"
    },
    {
        "title": "JavaHow To Count Words",
        "url": "https://www.w3schools.com/java/java_howto_count_words.asp",
        "content": "JavaHow To Count Words\nCount Number of Words in a String\nYou can easily count the number of words in a string with the following example:\nExample\nString words = \"One Two Three Four\";\nint countWords = words.split(\"\\\\s\").length;\nSystem.out.println(countWords);\nString words = \"One Two Three Four\";\nint countWords = words.split(\"\\\\s\").length;\nSystem.out.println(countWords);\nRelated Pages\nJava String Tutorial\nJava String Methods"
    },
    {
        "title": "JavaHow To Reverse a String",
        "url": "https://www.w3schools.com/java/java_howto_reverse_string.asp",
        "content": "JavaHow To Reverse a String\nReverse a String\nYou can easily reverse a string by characters with the following example:\nExample\nString originalStr = \"Hello\";\nString reversedStr = \"\";\n\nfor (int i = 0; i < originalStr.length(); i++) {\n  reversedStr = originalStr.charAt(i) + reversedStr;\n}\n\nSystem.out.println(\"Reversed string: \"+ reversedStr);\nString originalStr = \"Hello\";\nString reversedStr = \"\";\n\nfor (int i = 0; i < originalStr.length(); i++) {\n  reversedStr = originalStr.charAt(i) + reversedStr;\n}\n\nSystem.out.println(\"Reversed string: \"+ reversedStr);\nRelated Pages\nJava String Tutorial\nJava String Methods"
    },
    {
        "title": "JavaHow To Calculate the Sum of Elements",
        "url": "https://www.w3schools.com/java/java_howto_sum_of_array_elements.asp",
        "content": "JavaHow To Calculate the Sum of Elements\nCalculate the Sum of an Array\nGet the sum of array elements:\nExample\nint[] myArray = {1, 5, 10, 25};\nint sum = 0;\nint i; \n\n// Loop through the array elements and store the sum in the sum variable\nfor (i = 0; i < myArray.length; i++) {\n  sum += myArray[i];}System.out.println(\"The sum is: \" + sum);\nint[] myArray = {1, 5, 10, 25};\nint sum = 0;\nint i; \n\n// Loop through the array elements and store the sum in the sum variable\nfor (i = 0; i < myArray.length; i++) {\n  sum += myArray[i];\nSystem.out.println(\"The sum is: \" + sum);"
    },
    {
        "title": "JavaHow To Convert a String to an Array",
        "url": "https://www.w3schools.com/java/java_howto_string_to_array.asp",
        "content": "JavaHow To Convert a String to an Array\nConvert a String to an Array\nThere are many ways to convert a string to an array. The simplest way is to use thetoCharArray()method:\ntoCharArray()\nExample\nConvert a string to achararray:\nchar\n// Create a string\nString myStr = \"Hello\";\n\n// Convert the string to a char array\nchar[] myArray = myStr.toCharArray();\n\n// Print the first element of the array\nSystem.out.println(myArray[0]);\n// Create a string\nString myStr = \"Hello\";\n\n// Convert the string to a char array\nchar[] myArray = myStr.toCharArray();\n\n// Print the first element of the array\nSystem.out.println(myArray[0]);\nYou can also loop through the array to print all array elements:\nExample\n// Create a string\nString myStr = \"Hello\";\n\n// Convert the string to a char array\nchar[] myArray = myStr.toCharArray();\n\n// Print array elements\nfor (char i : myArray) {\n  System.out.println(i);\n}\n// Create a string\nString myStr = \"Hello\";\n\n// Convert the string to a char array\nchar[] myArray = myStr.toCharArray();\n\n// Print array elements\nfor (char i : myArray) {\n  System.out.println(i);\n}\nRelated Pages\nJava Strings Tutorial\nJava Array Tutorial\nThe toCharArray() String Method"
    },
    {
        "title": "JavaHow To Sort an Array",
        "url": "https://www.w3schools.com/java/java_howto_sort_an_array.asp",
        "content": "JavaHow To Sort an Array\nHow To Sort an Array\nYou can use thesort()method, found injava.util.Arrays, to sort an array:\nsort()\njava.util.Arrays\nExample\nimport java.util.Arrays;\n\npublic class Main {\n  public static void main(String[] args) {\n    String[] cars = {\"Volvo\", \"BMW\", \"Tesla\", \"Ford\", \"Fiat\", \"Mazda\", \"Audi\"};\n    Arrays.sort(cars);\n    for (String i : cars) {\n      System.out.println(i);}}}\nimport java.util.Arrays;\n\npublic class Main {\n  public static void main(String[] args) {\n    String[] cars = {\"Volvo\", \"BMW\", \"Tesla\", \"Ford\", \"Fiat\", \"Mazda\", \"Audi\"};\n    Arrays.sort(cars);\n    for (String i : cars) {\n      System.out.println(i);\n\n\n\nTry it Yourself »\nRelated Pages\nJava Array Tutorial\nJava Arrays Class Reference"
    },
    {
        "title": "JavaHow To Find the Average of Array Elements",
        "url": "https://www.w3schools.com/java/java_howto_calculate_avg_array.asp",
        "content": "JavaHow To Find the Average of Array Elements\nHow To Calculate the Average of Array Elements\nCreate a program that calculates the average of different ages:\nExample\n// An array storing different ages\nint ages[] = {20, 22, 18, 35, 48, 26, 87, 70};\n\nfloat avg, sum = 0;\n\n// Get the length of the array\nint length = ages.length;\n\n// Loop through the elements of the array\nfor (int age : ages) {\n  sum += age;\n}\n\n// Calculate the average by dividing the sum by the length\navg = sum / length;\n\n// Print the average\nSystem.out.println(\"The average age is: \" + avg);\n// An array storing different ages\nint ages[] = {20, 22, 18, 35, 48, 26, 87, 70};\n\nfloat avg, sum = 0;\n\n// Get the length of the array\nint length = ages.length;\n\n// Loop through the elements of the array\nfor (int age : ages) {\n  sum += age;\n}\n\n// Calculate the average by dividing the sum by the length\navg = sum / length;\n\n// Print the average\nSystem.out.println(\"The average age is: \" + avg);\nTry it Yourself »\nRelated Pages\nJava Array Tutorial"
    },
    {
        "title": "JavaHow To Find the Smallest Element in an Array",
        "url": "https://www.w3schools.com/java/java_howto_find_smallest_array_el.asp",
        "content": "JavaHow To Find the Smallest Element in an Array\nHow To Find the Smallest Element in an Array\nCreate a program that finds the lowest age among different ages:\nExample\n// An array storing different ages\nint ages[] = {20, 22, 18, 35, 48, 26, 87, 70};\n\n// Create a 'lowest age' variable and assign the first array element of ages to it\nint lowestAge = ages[0];\n\n// Loop through the elements of the ages array to find the lowest age\nfor (int age : ages) {\n  // Check if the current age is smaller than the current 'lowest age'\n  if (lowestAge > age) {\n    // If the smaller age is found, update 'lowest age' with that element\n    lowestAge = age;\n  }\n}\n\n// Output the value of the lowest age\nSystem.out.println(\"The lowest age in the array is: \" + lowestAge);\n// An array storing different ages\nint ages[] = {20, 22, 18, 35, 48, 26, 87, 70};\n\n// Create a 'lowest age' variable and assign the first array element of ages to it\nint lowestAge = ages[0];\n\n// Loop through the elements of the ages array to find the lowest age\nfor (int age : ages) {\n  // Check if the current age is smaller than the current 'lowest age'\n  if (lowestAge > age) {\n    // If the smaller age is found, update 'lowest age' with that element\n    lowestAge = age;\n  }\n}\n\n// Output the value of the lowest age\nSystem.out.println(\"The lowest age in the array is: \" + lowestAge);\nTry it Yourself »\nRelated Pages\nJava Array Tutorial"
    },
    {
        "title": "JavaHow To Loop Through an ArrayList",
        "url": "https://www.w3schools.com/java/java_howto_loop_through_arraylist.asp",
        "content": "JavaHow To Loop Through an ArrayList\nLoop Through an ArrayList\nLoop through the elements of anArrayList:\nArrayList\nExample\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<String> cars = new ArrayList<String>();\n    cars.add(\"Volvo\");\n    cars.add(\"BMW\");\n    cars.add(\"Ford\");\n    cars.add(\"Mazda\");\n    for (String i : cars) {\n      System.out.println(i);\n    }\n  }\n}\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<String> cars = new ArrayList<String>();\n    cars.add(\"Volvo\");\n    cars.add(\"BMW\");\n    cars.add(\"Ford\");\n    cars.add(\"Mazda\");\n    for (String i : cars) {\n      System.out.println(i);\n    }\n  }\n}\nTry it Yourself »\nRelated Pages\nJava ArrayList Tutorial\nJava ArrayList Methods"
    },
    {
        "title": "JavaHow To Loop Through a HashMap",
        "url": "https://www.w3schools.com/java/java_howto_loop_through_hashmap.asp",
        "content": "JavaHow To Loop Through a HashMap\nLoop Through a HashMap\nLoop through the items of aHashMapwith afor-eachloop.\nHashMap\nNote:Use thekeySet()method if you only want the keys, and use thevalues()method if you only want the values:\nkeySet()\nvalues()\nExample\n// Print keys\nfor (String i : capitalCities.keySet()) {\n  System.out.println(i);\n}\n// Print keys\nfor (String i : capitalCities.keySet()) {\n  System.out.println(i);\n}\nTry it Yourself »\nExample\n// Print values\nfor (String i : capitalCities.values()) {\n  System.out.println(i);\n}\n// Print values\nfor (String i : capitalCities.values()) {\n  System.out.println(i);\n}\nTry it Yourself »\nExample\n// Print keys and values\nfor (String i : capitalCities.keySet()) {\n  System.out.println(\"key: \" + i + \" value: \" + capitalCities.get(i));\n}\n// Print keys and values\nfor (String i : capitalCities.keySet()) {\n  System.out.println(\"key: \" + i + \" value: \" + capitalCities.get(i));\n}\nTry it Yourself »\nRelated Pages\nJava HashMap Tutorial\nJava HashMap Methods"
    },
    {
        "title": "JavaHow To Loop Through an Enum",
        "url": "https://www.w3schools.com/java/java_howto_loop_through_enum.asp",
        "content": "JavaHow To Loop Through an Enum\nLoop Through an Enum\nThe enum type has avalues()method, which returns an array of all enum constants. This method is useful when you want to loop through the constants of an enum:\nvalues()\nExample\nenum Level {\n  LOW,\n  MEDIUM,\n  HIGH\n}\n\npublic class Main { \n  public static void main(String[] args) { \n    for (Level myVar : Level.values()) {\n      System.out.println(myVar);\n    }\n  } \n}\nenum Level {\n  LOW,\n  MEDIUM,\n  HIGH\n}\n\npublic class Main { \n  public static void main(String[] args) { \n    for (Level myVar : Level.values()) {\n      System.out.println(myVar);\n    }\n  } \n}\nRelated Pages\nJava Enums Tutorial"
    },
    {
        "title": "JavaHow To Get the Area of a Rectangle",
        "url": "https://www.w3schools.com/java/java_howto_area_of_rectangle.asp",
        "content": "JavaHow To Get the Area of a Rectangle\nArea of Rectangle\nThe area of a rectangle can be found by multiplying the length of the \nrectangle by the width:\nExample\nint length = 5; \nint width = 2; \nint area = length * width; \nSystem.out.println(\"Area of rectangle: \" + area);\nint length = 5; \nint width = 2; \nint area = length * width; \nSystem.out.println(\"Area of rectangle: \" + area);"
    },
    {
        "title": "JavaHow To Find Even or Odd Numbers",
        "url": "https://www.w3schools.com/java/java_howto_even_or_odd.asp",
        "content": "JavaHow To Find Even or Odd Numbers\nCheck Whether a Number is Even or Odd\nFind out if a number is even or odd:\nExample\nint number = 5;\n\n// Find out if the number above is even or odd\nif (number % 2 == 0) {\n  System.out.println(number + \" is even.\");\n} else {\n  System.out.println(number + \" is odd.\");}\nint number = 5;\n\n// Find out if the number above is even or odd\nif (number % 2 == 0) {\n  System.out.println(number + \" is even.\");\n} else {\n  System.out.println(number + \" is odd.\");\nRelated Pages\nJava Numbers Tutorial\nJava Operators Tutorial\nJava Math Tutorial"
    },
    {
        "title": "JavaHow To Find Positive or Negative Numbers",
        "url": "https://www.w3schools.com/java/java_howto_pos_or_neg.asp",
        "content": "JavaHow To Find Positive or Negative Numbers\nFind Out if a Number is Positive or Negative\nFind out if a number is even or odd:\nExample\nint myNum = 10; // Is this a positive or negative number?\n\nif (myNum > 0) {\n  System.out.println(\"The value is a positive number.\");\n} else if (myNum < 0) {\n  System.out.println(\"The value is a negative number.\");\n} else {\n  System.out.println(\"The value is 0.\");}\nint myNum = 10; // Is this a positive or negative number?\n\nif (myNum > 0) {\n  System.out.println(\"The value is a positive number.\");\n} else if (myNum < 0) {\n  System.out.println(\"The value is a negative number.\");\n} else {\n  System.out.println(\"The value is 0.\");\nRelated Pages\nJava If..Else Tutorial"
    },
    {
        "title": "JavaHow To Find the Square Root of a Number",
        "url": "https://www.w3schools.com/java/java_howto_find_square_root.asp",
        "content": "JavaHow To Find the Square Root of a Number\nSquare Root of a Number\nYou can useMath.sqrt()to find the square root of a number:\nMath.sqrt()\nExample\nFind the square root of 64:\nMath.sqrt(64);\nMath.sqrt(64);\nRelated Pages\nJava Math Tutorial\nJava Math Reference"
    },
    {
        "title": "JavaHow To Generate Random Numbers",
        "url": "https://www.w3schools.com/java/java_howto_random_number.asp",
        "content": "JavaHow To Generate Random Numbers\nHow To Generate a Random Number\nYou can useMath.random()method to generate a random number.Math.random()returns a random number between 0.0 (inclusive), and 1.0 (exclusive):ExampleMath.random();Try it Yourself »To get more control over the random number, for example, if you only want a random number between 0 and 100, you can use the following formula:Exampleint randomNum = (int)(Math.random() * 101); // 0 to 100Try it Yourself »Related PagesJava Math TutorialJava Math ReferenceJava Type Casting❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up\nMath.random()\nMath.random()returns a random number between 0.0 (inclusive), and 1.0 (exclusive):\nMath.random()\nExample\nMath.random();\nMath.random();\nTry it Yourself »\nTo get more control over the random number, for example, if you only want a random number between 0 and 100, you can use the following formula:\nExample\nint randomNum = (int)(Math.random() * 101); // 0 to 100\nint randomNum = (int)(Math.random() * 101); // 0 to 100\nTry it Yourself »\nRelated Pages\nJava Math Tutorial\nJava Math Reference\nJava Type Casting"
    },
    {
        "title": "JavaReferenceDocumentation",
        "url": "https://www.w3schools.com/java/java_ref_reference.asp",
        "content": "JavaReferenceDocumentation\nThis section contains a Java reference documentation.\nJava Reference\nA list of Java keywords and methods can be found here:"
    },
    {
        "title": "JavaKeywords",
        "url": "https://www.w3schools.com/java/java_ref_keywords.asp",
        "content": "JavaKeywords\nJava Reserved Keywords\nJava has a set of keywords that are reserved words that cannot be used as \nvariables, methods, classes, or any other identifiers:\nNote:true,false, andnullare not keywords, but they are literals and reserved words that cannot be used as identifiers.\ntrue\nfalse\nnull"
    },
    {
        "title": "JavaString Methods",
        "url": "https://www.w3schools.com/java/java_ref_string.asp",
        "content": "JavaString Methods\nAll String Methods\nThe String class has a set of built-in methods that you can use on strings.\nRelated Pages\nJava Strings Tutorial"
    },
    {
        "title": "JavaMath Methods",
        "url": "https://www.w3schools.com/java/java_ref_math.asp",
        "content": "JavaMath Methods\nThe Java Math class has many methods that allows you to perform mathematical tasks on numbers.\nAll Math Methods\nA list of all Math methods can be found in the table below:\nNote:All Math methods arestatic.\nstatic\nRelated Pages\nJava Math Tutorial"
    },
    {
        "title": "JavaOutput Methods",
        "url": "https://www.w3schools.com/java/java_ref_output.asp",
        "content": "JavaOutput Methods\nOutput Methods\nTheSystem.outstream, short for \"output\", is used together with different methods to output values or print text to the console:\nSystem.out"
    },
    {
        "title": "JavaArrays Class",
        "url": "https://www.w3schools.com/java/java_ref_arrays.asp",
        "content": "JavaArrays Class\nThe JavaArraysclass (found injava.util), has methods that allow you to manipulate arrays.\nArrays\njava.util\nArrays Methods\nA list of popular methods of the Arrays Class can be found in the table below:\nProperties\nThelengthproperty is a built-in Java property, and does not belong to the Arrays class.\nlength\nRelated Pages\nJava Arrays Tutorial"
    },
    {
        "title": "JavaArrayList Methods",
        "url": "https://www.w3schools.com/java/java_ref_arraylist.asp",
        "content": "JavaArrayList Methods\nAll ArrayList Methods\nA list of all ArrayList methods can be found in the table below.\nSome methods use the type of the ArrayList's items as a parameter or return value. This type will be referred to asTin the table.\nIterator\nArrayList\nListIterator\nArrayList\nSpliterator\nArrayList\nRelated Pages\nJava Arrays Tutorial\nJava ArrayList Tutorial"
    },
    {
        "title": "JavaLinkedList Methods",
        "url": "https://www.w3schools.com/java/java_ref_linkedlist.asp",
        "content": "JavaLinkedList Methods\nAll LinkedList Methods\nA list of all LinkedList methods can be found in the table below.\nSome methods use the type of the LinkedList's items as a parameter or return value. This type will be referred to asTin the table.\ngetFirst()\nIterator\nLinkedList\nListIterator\nLinkedList\ngetFirst()\npeek()\npoll()\nremoveFirst()\naddFirst()\nSpliterator\nLinkedList\nRelated Pages\nJava Arrays Tutorial\nJava LinkedList Tutorial\nJava ArrayList Tutorial"
    },
    {
        "title": "JavaHashMap Methods",
        "url": "https://www.w3schools.com/java/java_ref_hashmap.asp",
        "content": "JavaHashMap Methods\nAll HashMap Methods\nA list of all HashMap methods can be found in the table below.\nSome methods use the type of the HashMap's entries as a parameter or return value. The type of the key will be referred to asKand the type of the value will be referred to asVin the table.\nRelated Pages\nJava HashMap Tutorial"
    },
    {
        "title": "JavaScanner Methods",
        "url": "https://www.w3schools.com/java/java_ref_scanner.asp",
        "content": "JavaScanner Methods\nScanner Methods\nTheScannerclass can be used to obtain data from the keyboard, files and strings.\nScanner\nA list of usefulScannermethods can be found in the table below.\nScanner\nbyte\nint\nlong\nshort\nbyte\ndouble\nfloat\nint\nlong\nshort"
    },
    {
        "title": "JavaIterator Interface",
        "url": "https://www.w3schools.com/java/java_ref_iterators.asp",
        "content": "JavaIterator Interface\nJava Iterator Methods\nTheIteratorinterface provides methods to access and iterate through collections:\nIterator\nNote:Thenext()method uses the type of the iterator's items as its return value. This type is referred to asTin the table.\nnext()"
    },
    {
        "title": "JavaErrors and Exception Types",
        "url": "https://www.w3schools.com/java/java_ref_errors.asp",
        "content": "JavaErrors and Exception Types\nErrors and Exception Types\nThe table below shows a list of commonErrorandExceptiontypes in Java:\nError\nException\nnull"
    },
    {
        "title": "JavaExamples",
        "url": "https://www.w3schools.com/java/java_examples.asp",
        "content": "JavaExamples\nJava Syntax\nJava Comments\nJava Variables\nJava Data Types\nJava Type Casting\nJava Operators\nJava Strings\nJava Math\nJava Booleans\nJava If...Else (Conditions)\nJava Switch\nJava Loops\nJava Arrays\nJava Methods\nJava Classes and Objects\nJava Modifiers\nJava Encapsulation\nJava Packages\nJava Inheritance\nJava Inner Classes\nJava Abstraction & Interfaces\nJava Enums\nJava User Input\nJava Dates\nJava ArrayList\nJava HashMap\nJava HashSet\nJava Iterator\nJava Wrapper Classes\nJava Exceptions (Try...Catch)\nJava Regular Expressions\nJava Threads\nJava Files"
    },
    {
        "title": "JavaOnline Compiler",
        "url": "https://www.w3schools.com/java/java_compiler.asp",
        "content": "JavaOnline Compiler\nJava Compiler (Editor)\nWith our online Java compiler, you can edit Java code, and view the result in your browser.\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\");\n  }\n}\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\");\n  }\n}\nHello World!\nClick on the \"Try it Yourself\" button to see how it works.\nPublish Your Code\nIf you want to create your own Java applications, check outW3Schools Spaces.\nW3Schools Spacesis a website-building tool that enables you to create and share your own website, as well as develop and host Java applications.\nYou can change the website's look and how it works by editing the code right in your web browser.\nIt's easy to use and doesn't require any setup.\nThe code editor is packed with features to help you achieve more:\nLearn Faster\nPractice is key to mastering coding, and the best way to put your Java knowledge into practice is by getting practical with code.\nUseW3Schools Spacesto build, test and deploy code.\nThe code editor lets you write and practice different types of computer languages. It includes \nJava, but you can use it for other languages too.\nNew languages are added all the time:\nIf you don't know Java, we suggest that you read ourJava Tutorialfrom scratch.\nEasy Package Management\nGet an overview of your packages and easily add or delete frameworks and libraries. Then, with just one click, you can make changes to your packages without manual installation.\n\nBuild Powerful Websites\nYou can also use the code editor inW3School Spacesto build frontend or full-stack websites from scratch.\nOr you can use the 60+ templates available and save time:\nCreate your Spaces account today and explore them all!\nShare Your Website With The World\nHost and publish your websites in no time withW3School Spaces.\nW3Schools subdomain and SSL certificate are included for free withW3School Spaces. An SSL certificate makes your website safe and secure. It also helps people trust your website and makes it easier to find it online.\nWant a custom domain for your website?\nYou can buy a domain or transfer an existing one and connect it to your space.\nHow Does It Work?\nGet started in a few clicks withW3School Spaces."
    },
    {
        "title": "JavaExercises",
        "url": "https://www.w3schools.com/java/java_exercises.asp",
        "content": "JavaExercises\nExercises\nTest your Java skills with exercises from all categories:\nSyntax\nOutput Text\nOutput Numbers\nComments\nVariables\nPrint Variables\nMultiple Variables\nVariable Names\nData Types\nNumbers\nBoolean Types\nCharacters\nType Casting\nOperators\nStrings\nString Concatenation\nStrings and Numbers\nSpecial Characters\nMath\nBooleans\nIf\nIf Else\nElse If\nShort Hand If Else\nSwitch\nWhile Loops\nDo While Loops\nFor Loops\nNested Loops\nFor-Each Loops\nBreak and Continue\nArrays\nArrays and Loops\nMultidimensional Arrays\nMethods\nMethod Parameters\nReturn Values\nMethod Overloading\nScope\nRecursion\nOOP\nClasses/Objects\nClass Attributes\nClass Methods\nConstructors\nModifiers\nEncapsulation\nPackages\nInheritance\nPolymorphism\nInner Classes\nAbstraction\nInterface\nEnums\nUser Input\nDate\nArrayList\nLinkedList\nList Sorting\nHashMap\nHashSet\nIterator\nWrapper Classes\nExceptions\nRegular Expressions\nThreads\nLambda Expressions\nAdvanced Sorting\nFiles\nCreate and Write to Files\nRead Files\nDelete Files\nLog in to track your progress\nIf you haven't already,sign upto become a W3Schooler, and get points for every exercise you complete.\nAs a logged-in W3Schools user you will have access to many features like havingyour own web page,track your learning progress,receive personal guided paths, andmore.\nThe Exercise\nThe exercises are a mix of \"multiple choice\" and \"fill in the blanks\" questions. \nThere are between 3 and 9 questions in  each category.\nThe answer can be found in the corresponding tutorial chapter. If you're stuck, \nor answer wrong, you can try again or hit the \"Show Answer\" button to see the correct answer.\nKickstart your career\nGet certified by completingthecourse"
    },
    {
        "title": "JavaQuiz",
        "url": "https://www.w3schools.com/java/java_quiz.asp",
        "content": "JavaQuiz\nYou can test your Java skills with W3Schools' Quiz.\nThe Test\nThe test contains 25 questions and there is no time limit.\nThe test is not official, it's just a nice way to see how much you know, or don't know, about \nJava.\nCount Your Score\nYou will get 1 point for each correct answer. At the end of the Quiz,\nyour total score will be displayed. Maximum score is 25 points.\nStart the Quiz\nGood luck!\nStart the Java Quiz ❯\nIf you don't know Java, we suggest that you read ourJava Tutorialfrom scratch.\nKickstart your career\nGet certified by completingthecourse"
    },
    {
        "title": "JavaServer",
        "url": "https://www.w3schools.com/java/java_server.asp",
        "content": "JavaServer\nCreate Java Server\nCoding Skills\nAI Tutor\nProjects\nSecurely\nChoose your Plan\nBy subscribing to a plan you support the W3Schools mission to makelearning available to everyone - no matter their background.\n$0/Forever\nThis is for you that are beginning to explore coding and web development\n$14.99/Month\nThis is for you that want to learn and reach your goals faster. Build fullstack projects, ad free experience.\nFor teachers\nSpend less time on admin tasks while engaging your students. Help them learn, practice and collaborate. All in one place.\n25% OFF\nYou can also buy a domain or connect an existing one.\nPowerful Code Editor\nPractice Makes Perfect\nSave Time with Templates\nkAI\nJust landed inSpaces\nLearn to code more effectivelyand intelligently with kAI - AI tutor\nHi! I'm kAI, W3Schools AI Tutor...\nFeel free to ask me any coding-related questions, and I'll do my best to assist you.\nI can help you checking your code for errors, improving your code's structure, explaining coding concepts in a clear and understandable way, and more...\nI can even create complete websites for you based on your input, so what are you waiting for?\nSuper Simple to Share\nIncluded for free in all plans\nWant custom domains?\nHow it works\nCoding Made Easy\nCloud-based\nTerminal & Log\nHow To Libraries\nDatabase\nFile Navigator\nPackage Manager\nAnalytics\nEnvironment Manager\nSave Time & Money.\nAll Your Files in One Place.\nFix Your Code Faster.\nGet Full Data Visibility.\nIncreased Control and Security.\nFind What You Need Quicker.\nGet Traffic Insights.\nGet Inspired\nFrequently Asked Questions\nWith Basic Spaces, you can build frontend websites. Whereas with Fullstack Spaces, you can build frontend and backend websites.\nBasic Spaces include HTML, CSS, and Javascript. Full Stack Spaces include everything in Basic Spaces plus PHP, Python, React.js, Vue.js, Node.js, Handlebars, and Django.\nYour subscription will be automatically renewed every month.\nYour access to all the benefits for the paid period of time will continue. However, the subscription will not be renewed automatically.\nTo subscribe W3Schools accounts for multiple users, you can contact sales@w3schools.com"
    },
    {
        "title": "JavaSyllabus",
        "url": "https://www.w3schools.com/java/java_syllabus.asp",
        "content": "JavaSyllabus\nIntroduction\nTheW3Schools Java Tutorialis comprehensive and beginner-friendly.\nIt will give you a fundamental knowledge of Java.\nIt is designed for beginners and requires no prior experience with programming.\nThe content has been carefully made to be bite-sized, simple, and easy to understand.\nThe content has been proven by millions of users over the years. It is updated and improved frequently.\nThe syllabus outline and its sequence are structured so you can learn Java step by step, from the introduction to creating your first application with Java.\nGet Started With Java »\nLearning Outcomes\nNote:Are you a teacher teaching Java?W3Schools Academyis a toolbox of features that can help you teach. It offers classroom features such as pre-built study plans, classroom administration and much more. Read more aboutAcademy here.\nWhich Subjects Are Java Relevant For?\nGet Started\nActivities\nIn this tutorial we offer different activities for you to learn Java for free:\nSign in to Track Progress\nYou can also create a free account to track your progress.\nAs a signed-in user, you get access to features such as:\nSign Up - It's free\nOverview of the Modules\nGet Started\nSandbox and Lab Environment\nJava, like any other coding language, is best learned by working hands-on with code.\nEasily try code with our \"Try it Yourself\" editor.\nHere, you can edit Java code and view the result.\nExample\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World\");\n  }\n}\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World\");\n  }\n}\nTry it Yourself »\nIf you want to explore more and host your project, we have a feature calledSpacesthat allows you to build, test and deploy Java code and other backend languages.\nHere you get a secure sandbox environment called Spaces, where you can practice coding and test projects in real-time.\nSpaces allow you to test, build, and deploy code. This includes a W3Schools subdomain, hosting, and secure SSL certificates.\nSpaces require no installation and run directly in the browser.\nFeatures include:\nCreate a Spaces Account\nJava Certification\nW3Schools offers an end-of-pathway certification program.\nHere you can take exams to get certified.\nThe Java exam is a test that summarizes the W3Schools Java syllabus.\nAfter passing the exam you get the \"Certified Java Developer\" Certification.\nThere are two different types of certifications:\nThe non-adaptive is pass or no pass.\nThe adaptive certification is adaptive and graded; students will get a grade from intermediate, advanced to professional.\nBuy Certificate »\nAre You a Teacher?\nAre you interested in learning how you can useW3Schools Academyto Teach \nJava?\nWatch a demo ofW3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.\nWatch Demo »"
    },
    {
        "title": "JavaStudy Plan",
        "url": "https://www.w3schools.com/java/java_study_plan.asp",
        "content": "JavaStudy Plan\nIntroduction\nThe Java study plan helps you teach your students Java step-by-step.\nCreating a study plan for Java is easy.\nYou can use a pre-built study plan or customize it.\nStudents have different skill levels. The study plans can be customized to ensure that everyone is challenged.\nSave time with pre-built teacher materials and study plans. Easily organize your class with a timeline from the introduction of Java to the final exam.\nW3Schools Academy\nThis study plan is a feature of W3Schools Academy.\nW3Schools Academy is a platform that has everything you need to teach coding, all in one place.\nIt offers you as a teacher a toolbox of features that helps you succeed with teaching in your classroom.\nYou need to have an active subscription to access the study plan feature. There are two different subscription tiers:\nLearn More »\nAcademy also offer other features such as:\nGet a free demo »\nTeacher Materials\nW3Schools has everything you need to teach Java.\nThe Java training materials is available for you to include and use in your study plan:\nJava Syllabus\nWith the Java Syllabus, your students will start with the basics, like understanding variables, data types, and simple object-oriented programming concepts, and move to more advanced topics, like working with classes, inheritance, and handling exceptions. Each chapter has examples, try-it-yourself sections, exercises, and quizzes to make learning easy, interactive, and fun.\nRead more about Java Syllabus.\nStudy Plan Overview\nThe study plan features are made to help teachers and students. They make learning easy, flexible, and fun. These features work for different types of classes, learning styles and student level.\nLearn More »\nSample Study Plan\nYou choose the timeline and paceof your study plans.\nSchools have different preferences.\nSome would like more intensive pace, e.g. 5 weeks, others 12 or more weeks.\nIt is completely up to you.\nFor example, this is how a 5-week Java study plan could look like:\nImage of Sample Java study plan:\nReady to get started?\nStart withJava Study Planstoday.\nGet Started »\nAre You a Teacher?\nAre you interested in learning how you can useW3Schools Academyto Teach Java programming?\nWatch a demo ofW3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.\nWatch Demo »"
    },
    {
        "title": "W3SchoolsJava Certificate",
        "url": "https://www.w3schools.com/java/java_exam.asp",
        "content": "W3SchoolsJava Certificate\nW3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate »\nW3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate »\nWho Should Consider Getting Certified?\nAny student or professional within the digital industry.\nCertifications are valuable assets to gain trust and demonstrate knowledge to your clients, current or future employers on a ever increasing competitive market.\nW3Schools is Trusted by Top Companies\nW3Schools has over two decades of experience with teaching coding online.\nOur certificates are recognized and valued by companies looking to employ skilled developers.\nSave Time and Money\nShow the world your coding skills by getting a certification.\nThe prices is a small fraction compared to the price of traditional education.\nDocument and validate your competence by getting certified!\nExam overview\nFee:95 USD\nAchievable certification levels:Intermediate (40%)Advanced (75%)Professional (90%)\nNumber of questions:Adaptive,60on average\nRequirement to pass:Minimum 40% - Intermediate level\nTime limit:60 minutes\nNumber of attempts to pass:3\nExam deadline:None\nCertification Expiration:None\nFormat:Online, multiple choice\nRegister now »\nAdvance Faster in Your Career\nGetting a certificate proves your commitment to upgrading your skills.\nThe certificate can be added as credentials to your CV, Resume, LinkedIn profile, and so on.\nIt gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nKnowledge is power, especially in the current job market.\nDocumentation of your skills enables you to advance your career or helps you to start a new one.\nHow Does It Work?\nGet Your Certificate and Share It With The World\nExample certificate:\nEach certificate gets a unique link that can be shared with others.\nValidate your certification with the link or QR code.\nCheck how it looks like in thisExample.\nShare your certificate on Linkedin the Certifications section in just one click!\nDocument Your Skills\nGetting a certificate proves your commitment to upgrade your skills,\ngives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nGet Your Certificate »\nLooking to add multiple users?\nAre you an educator, manager or business owner looking for courses or certifications?\nWe are working with schools, companies and organizations from all over the world.\nGet courses and/or certifications for your team here."
    }
]